{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LabelWidget = void 0;\n\nconst React = require(\"react\");\n\nconst styled_1 = require(\"@emotion/styled\");\n\nvar S;\n\n(function (S) {\n  S.Label = styled_1.default.div`\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t`;\n  S.Foreign = styled_1.default.foreignObject`\n\t\tpointer-events: none;\n\t\toverflow: visible;\n\t`;\n})(S || (S = {}));\n\nclass LabelWidget extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.findPathAndRelativePositionToRenderLabel = index => {\n      // an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n      const link = this.props.label.getParent();\n      const lengths = link.getRenderedPath().map(path => path.getTotalLength()); // calculate the point where we want to display the label\n\n      let labelPosition = lengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) * (index / (link.getLabels().length + 1)); // find the path where the label will be rendered and calculate the relative position\n\n      let pathIndex = 0;\n\n      while (pathIndex < link.getRenderedPath().length) {\n        if (labelPosition - lengths[pathIndex] < 0) {\n          return {\n            path: link.getRenderedPath()[pathIndex],\n            position: labelPosition\n          };\n        } // keep searching\n\n\n        labelPosition -= lengths[pathIndex];\n        pathIndex++;\n      }\n    };\n\n    this.calculateLabelPosition = () => {\n      const found = this.findPathAndRelativePositionToRenderLabel(this.props.index + 1);\n\n      if (!found) {\n        return;\n      }\n\n      const {\n        path,\n        position\n      } = found;\n      const labelDimensions = {\n        width: this.ref.current.offsetWidth,\n        height: this.ref.current.offsetHeight\n      };\n      const pathCentre = path.getPointAtLength(position);\n      const labelCoordinates = {\n        x: pathCentre.x - labelDimensions.width / 2 + this.props.label.getOptions().offsetX,\n        y: pathCentre.y - labelDimensions.height / 2 + this.props.label.getOptions().offsetY\n      };\n      this.ref.current.style.transform = `translate(${labelCoordinates.x}px, ${labelCoordinates.y}px)`;\n    };\n\n    this.ref = React.createRef();\n  }\n\n  componentDidUpdate() {\n    window.requestAnimationFrame(this.calculateLabelPosition);\n  }\n\n  componentDidMount() {\n    window.requestAnimationFrame(this.calculateLabelPosition);\n  }\n\n  render() {\n    const canvas = this.props.engine.getCanvas();\n    return React.createElement(S.Foreign, {\n      key: this.props.label.getID(),\n      width: canvas === null || canvas === void 0 ? void 0 : canvas.offsetWidth,\n      height: canvas === null || canvas === void 0 ? void 0 : canvas.offsetHeight\n    }, React.createElement(S.Label, {\n      ref: this.ref\n    }, this.props.engine.getFactoryForLabel(this.props.label).generateReactWidget({\n      model: this.props.label\n    })));\n  }\n\n}\n\nexports.LabelWidget = LabelWidget;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAGA;;AAQA,IAAUA,CAAV;;AAAA,WAAUA,CAAV,EAAW;AACGA,YAAQC,iBAAOC,GAAG;;;EAAlB;AAKAF,cAAUC,iBAAOE,aAAa;;;EAA9B;AAIb,CAVD,EAAUH,CAAC,KAADA,CAAC,MAAX;;AAYA,MAAaI,WAAb,SAAiCC,KAAK,CAACC,SAAvC,CAAkE;AAGjEC,cAAYC,KAAZ,EAAmC;AAClC,UAAMA,KAAN;;AAYD,oDAA4CC,KAAD,IAA8D;AACxG;AACA,YAAMC,IAAI,GAAG,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,SAAjB,EAAb;AACA,YAAMC,OAAO,GAAGH,IAAI,CAACI,eAAL,GAAuBC,GAAvB,CAA4BC,IAAD,IAAUA,IAAI,CAACC,cAAL,EAArC,CAAhB,CAHwG,CAKxG;;AACA,UAAIC,aAAa,GAChBL,OAAO,CAACM,MAAR,CAAe,CAACC,aAAD,EAAgBC,YAAhB,KAAiCD,aAAa,GAAGC,YAAhE,EAA8E,CAA9E,KACCZ,KAAK,IAAIC,IAAI,CAACY,SAAL,GAAiBC,MAAjB,GAA0B,CAA9B,CADN,CADD,CANwG,CAUxG;;AACA,UAAIC,SAAS,GAAG,CAAhB;;AACA,aAAOA,SAAS,GAAGd,IAAI,CAACI,eAAL,GAAuBS,MAA1C,EAAkD;AACjD,YAAIL,aAAa,GAAGL,OAAO,CAACW,SAAD,CAAvB,GAAqC,CAAzC,EAA4C;AAC3C,iBAAO;AACNR,gBAAI,EAAEN,IAAI,CAACI,eAAL,GAAuBU,SAAvB,CADA;AAENC,oBAAQ,EAAEP;AAFJ,WAAP;AAIA,SANgD,CAQjD;;;AACAA,qBAAa,IAAIL,OAAO,CAACW,SAAD,CAAxB;AACAA,iBAAS;AACT;AACD,KAxBD;;AA0BA,kCAAyB,MAAK;AAC7B,YAAME,KAAK,GAAG,KAAKC,wCAAL,CAA8C,KAAKnB,KAAL,CAAWC,KAAX,GAAmB,CAAjE,CAAd;;AACA,UAAI,CAACiB,KAAL,EAAY;AACX;AACA;;AAED,YAAM;AAAEV,YAAF;AAAQS;AAAR,UAAqBC,KAA3B;AAEA,YAAME,eAAe,GAAG;AACvBC,aAAK,EAAE,KAAKC,GAAL,CAASC,OAAT,CAAiBC,WADD;AAEvBC,cAAM,EAAE,KAAKH,GAAL,CAASC,OAAT,CAAiBG;AAFF,OAAxB;AAKA,YAAMC,UAAU,GAAGnB,IAAI,CAACoB,gBAAL,CAAsBX,QAAtB,CAAnB;AAEA,YAAMY,gBAAgB,GAAG;AACxBC,SAAC,EAAEH,UAAU,CAACG,CAAX,GAAeV,eAAe,CAACC,KAAhB,GAAwB,CAAvC,GAA2C,KAAKrB,KAAL,CAAWG,KAAX,CAAiB4B,UAAjB,GAA8BC,OADpD;AAExBC,SAAC,EAAEN,UAAU,CAACM,CAAX,GAAeb,eAAe,CAACK,MAAhB,GAAyB,CAAxC,GAA4C,KAAKzB,KAAL,CAAWG,KAAX,CAAiB4B,UAAjB,GAA8BG;AAFrD,OAAzB;AAKA,WAAKZ,GAAL,CAASC,OAAT,CAAiBY,KAAjB,CAAuBC,SAAvB,GAAmC,aAAaP,gBAAgB,CAACC,CAAC,OAAOD,gBAAgB,CAACI,CAAC,KAA3F;AACA,KArBD;;AArCC,SAAKX,GAAL,GAAWzB,KAAK,CAACwC,SAAN,EAAX;AACA;;AAEDC,oBAAkB;AACjBC,UAAM,CAACC,qBAAP,CAA6B,KAAKC,sBAAlC;AACA;;AAEDC,mBAAiB;AAChBH,UAAM,CAACC,qBAAP,CAA6B,KAAKC,sBAAlC;AACA;;AAmDDE,QAAM;AACL,UAAMC,MAAM,GAAG,KAAK5C,KAAL,CAAW6C,MAAX,CAAkBC,SAAlB,EAAf;AAEA,WACCjD,oBAACL,CAAC,CAACuD,OAAH,EAAU;AAACC,SAAG,EAAE,KAAKhD,KAAL,CAAWG,KAAX,CAAiB8C,KAAjB,EAAN;AAAgC5B,WAAK,EAAEuB,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEpB,WAA/C;AAA4DC,YAAM,EAAEmB,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAElB;AAA5E,KAAV,EACC7B,oBAACL,CAAC,CAAC0D,KAAH,EAAQ;AAAC5B,SAAG,EAAE,KAAKA;AAAX,KAAR,EACE,KAAKtB,KAAL,CAAW6C,MAAX,CAAkBM,kBAAlB,CAAqC,KAAKnD,KAAL,CAAWG,KAAhD,EAAuDiD,mBAAvD,CAA2E;AAAEC,WAAK,EAAE,KAAKrD,KAAL,CAAWG;AAApB,KAA3E,CADF,CADD,CADD;AAOA;;AA3EgE;;AAAlEmD","names":["S","styled_1","div","foreignObject","LabelWidget","React","Component","constructor","props","index","link","label","getParent","lengths","getRenderedPath","map","path","getTotalLength","labelPosition","reduce","previousValue","currentValue","getLabels","length","pathIndex","position","found","findPathAndRelativePositionToRenderLabel","labelDimensions","width","ref","current","offsetWidth","height","offsetHeight","pathCentre","getPointAtLength","labelCoordinates","x","getOptions","offsetX","y","offsetY","style","transform","createRef","componentDidUpdate","window","requestAnimationFrame","calculateLabelPosition","componentDidMount","render","canvas","engine","getCanvas","Foreign","key","getID","Label","getFactoryForLabel","generateReactWidget","model","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-core\\src\\entities\\label\\LabelWidget.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LabelModel } from './LabelModel';\nimport styled from '@emotion/styled';\n\nexport interface LabelWidgetProps {\n\tengine: DiagramEngine;\n\tlabel: LabelModel;\n\tindex: number;\n}\n\nnamespace S {\n\texport const Label = styled.div`\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t`;\n\n\texport const Foreign = styled.foreignObject`\n\t\tpointer-events: none;\n\t\toverflow: visible;\n\t`;\n}\n\nexport class LabelWidget extends React.Component<LabelWidgetProps> {\n\tref: React.RefObject<HTMLDivElement>;\n\n\tconstructor(props: LabelWidgetProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\tcomponentDidUpdate() {\n\t\twindow.requestAnimationFrame(this.calculateLabelPosition);\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.requestAnimationFrame(this.calculateLabelPosition);\n\t}\n\n\tfindPathAndRelativePositionToRenderLabel = (index: number): { path: SVGPathElement; position: number } => {\n\t\t// an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n\t\tconst link = this.props.label.getParent();\n\t\tconst lengths = link.getRenderedPath().map((path) => path.getTotalLength());\n\n\t\t// calculate the point where we want to display the label\n\t\tlet labelPosition =\n\t\t\tlengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\n\t\t\t(index / (link.getLabels().length + 1));\n\n\t\t// find the path where the label will be rendered and calculate the relative position\n\t\tlet pathIndex = 0;\n\t\twhile (pathIndex < link.getRenderedPath().length) {\n\t\t\tif (labelPosition - lengths[pathIndex] < 0) {\n\t\t\t\treturn {\n\t\t\t\t\tpath: link.getRenderedPath()[pathIndex],\n\t\t\t\t\tposition: labelPosition\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// keep searching\n\t\t\tlabelPosition -= lengths[pathIndex];\n\t\t\tpathIndex++;\n\t\t}\n\t};\n\n\tcalculateLabelPosition = () => {\n\t\tconst found = this.findPathAndRelativePositionToRenderLabel(this.props.index + 1);\n\t\tif (!found) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { path, position } = found;\n\n\t\tconst labelDimensions = {\n\t\t\twidth: this.ref.current.offsetWidth,\n\t\t\theight: this.ref.current.offsetHeight\n\t\t};\n\n\t\tconst pathCentre = path.getPointAtLength(position);\n\n\t\tconst labelCoordinates = {\n\t\t\tx: pathCentre.x - labelDimensions.width / 2 + this.props.label.getOptions().offsetX,\n\t\t\ty: pathCentre.y - labelDimensions.height / 2 + this.props.label.getOptions().offsetY\n\t\t};\n\n\t\tthis.ref.current.style.transform = `translate(${labelCoordinates.x}px, ${labelCoordinates.y}px)`;\n\t};\n\n\trender() {\n\t\tconst canvas = this.props.engine.getCanvas();\n\n\t\treturn (\n\t\t\t<S.Foreign key={this.props.label.getID()} width={canvas?.offsetWidth} height={canvas?.offsetHeight}>\n\t\t\t\t<S.Label ref={this.ref}>\n\t\t\t\t\t{this.props.engine.getFactoryForLabel(this.props.label).generateReactWidget({ model: this.props.label })}\n\t\t\t\t</S.Label>\n\t\t\t</S.Foreign>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}