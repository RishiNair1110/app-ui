{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PortModel = exports.PortModelAlignment = void 0;\n\nconst _ = require(\"lodash\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nvar PortModelAlignment;\n\n(function (PortModelAlignment) {\n  PortModelAlignment[\"TOP\"] = \"top\";\n  PortModelAlignment[\"LEFT\"] = \"left\";\n  PortModelAlignment[\"BOTTOM\"] = \"bottom\";\n  PortModelAlignment[\"RIGHT\"] = \"right\";\n})(PortModelAlignment = exports.PortModelAlignment || (exports.PortModelAlignment = {}));\n\nclass PortModel extends react_canvas_core_1.BasePositionModel {\n  constructor(options) {\n    super(options);\n    this.links = {};\n    this.reportedPosition = false;\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.reportedPosition = false;\n    this.options.name = event.data.name;\n    this.options.alignment = event.data.alignment;\n  }\n\n  serialize() {\n    return Object.assign(Object.assign({}, super.serialize()), {\n      name: this.options.name,\n      alignment: this.options.alignment,\n      parentNode: this.parent.getID(),\n      links: _.map(this.links, link => {\n        return link.getID();\n      })\n    });\n  }\n\n  setPosition(x, y) {\n    let old = this.position;\n    super.setPosition(x, y);\n\n    _.forEach(this.getLinks(), link => {\n      let point = link.getPointForPort(this);\n      point.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n    });\n  }\n\n  doClone() {\n    let lookupTable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let clone = arguments.length > 1 ? arguments[1] : undefined;\n    clone.links = {};\n    clone.parent = this.getParent().clone(lookupTable);\n  }\n\n  getNode() {\n    return this.getParent();\n  }\n\n  getName() {\n    return this.options.name;\n  }\n\n  getMaximumLinks() {\n    return this.options.maximumLinks;\n  }\n\n  setMaximumLinks(maximumLinks) {\n    this.options.maximumLinks = maximumLinks;\n  }\n\n  removeLink(link) {\n    delete this.links[link.getID()];\n  }\n\n  addLink(link) {\n    this.links[link.getID()] = link;\n  }\n\n  getLinks() {\n    return this.links;\n  }\n\n  createLinkModel() {\n    if (_.isFinite(this.options.maximumLinks)) {\n      var numberOfLinks = _.size(this.links);\n\n      if (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n        return _.values(this.links)[0];\n      } else if (numberOfLinks >= this.options.maximumLinks) {\n        return null;\n      }\n    }\n\n    return null;\n  }\n\n  reportPosition() {\n    _.forEach(this.getLinks(), link => {\n      link.getPointForPort(this).setPosition(this.getCenter());\n    });\n\n    this.fireEvent({\n      entity: this\n    }, 'reportInitialPosition');\n  }\n\n  getCenter() {\n    return new geometry_1.Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n  }\n\n  getBoundingBox() {\n    return new geometry_1.Rectangle(this.position, this.width, this.height);\n  }\n\n  updateCoords(coords) {\n    this.width = coords.getWidth();\n    this.height = coords.getHeight();\n    this.setPosition(coords.getTopLeft());\n    this.reportedPosition = true;\n    this.reportPosition();\n  }\n\n  canLinkToPort(port) {\n    return true;\n  }\n\n  isLocked() {\n    return super.isLocked() || this.getParent().isLocked();\n  }\n\n}\n\nexports.PortModel = PortModel;","map":{"version":3,"mappings":"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","names":["PortModelAlignment","exports","PortModel","react_canvas_core_1","constructor","options","links","reportedPosition","deserialize","event","name","data","alignment","serialize","parentNode","parent","getID","_","map","link","setPosition","x","y","old","position","forEach","getLinks","point","getPointForPort","getX","getY","doClone","lookupTable","clone","getParent","getNode","getName","getMaximumLinks","maximumLinks","setMaximumLinks","removeLink","addLink","createLinkModel","isFinite","numberOfLinks","size","values","reportPosition","getCenter","fireEvent","entity","geometry_1","width","height","getBoundingBox","updateCoords","coords","getWidth","getHeight","getTopLeft","canLinkToPort","port","isLocked"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-core\\src\\entities\\port\\PortModel.ts"],"sourcesContent":["import { NodeModel } from '../node/NodeModel';\nimport { LinkModel } from '../link/LinkModel';\nimport * as _ from 'lodash';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelOptions,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tBasePositionModelListener,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\n\nexport enum PortModelAlignment {\n\tTOP = 'top',\n\tLEFT = 'left',\n\tBOTTOM = 'bottom',\n\tRIGHT = 'right'\n}\n\nexport interface PortModelListener extends BasePositionModelListener {\n\t/**\n\t * fires when it first receives positional information\n\t */\n\treportInitialPosition?: (event: BaseEntityEvent<PortModel>) => void;\n}\n\nexport interface PortModelOptions extends BaseModelOptions {\n\talignment?: PortModelAlignment;\n\tmaximumLinks?: number;\n\tname: string;\n}\n\nexport interface PortModelGenerics extends BasePositionModelGenerics {\n\tOPTIONS: PortModelOptions;\n\tPARENT: NodeModel;\n\tLISTENER: PortModelListener;\n}\n\nexport class PortModel<G extends PortModelGenerics = PortModelGenerics> extends BasePositionModel<G> {\n\tlinks: { [id: string]: LinkModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\treportedPosition: boolean;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.links = {};\n\t\tthis.reportedPosition = false;\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.reportedPosition = false;\n\t\tthis.options.name = event.data.name;\n\t\tthis.options.alignment = event.data.alignment;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tname: this.options.name,\n\t\t\talignment: this.options.alignment,\n\t\t\tparentNode: this.parent.getID(),\n\t\t\tlinks: _.map(this.links, (link) => {\n\t\t\t\treturn link.getID();\n\t\t\t})\n\t\t};\n\t}\n\n\tsetPosition(point: Point);\n\tsetPosition(x: number, y: number);\n\tsetPosition(x, y?) {\n\t\tlet old = this.position;\n\t\tsuper.setPosition(x, y);\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlet point = link.getPointForPort(this);\n\t\t\tpoint.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone: PortModel) {\n\t\tclone.links = {};\n\t\tclone.parent = this.getParent().clone(lookupTable);\n\t}\n\n\tgetNode(): NodeModel {\n\t\treturn this.getParent();\n\t}\n\n\tgetName(): string {\n\t\treturn this.options.name;\n\t}\n\n\tgetMaximumLinks(): number {\n\t\treturn this.options.maximumLinks;\n\t}\n\n\tsetMaximumLinks(maximumLinks: number) {\n\t\tthis.options.maximumLinks = maximumLinks;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tdelete this.links[link.getID()];\n\t}\n\n\taddLink(link: LinkModel) {\n\t\tthis.links[link.getID()] = link;\n\t}\n\n\tgetLinks(): { [id: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tpublic createLinkModel(): LinkModel | null {\n\t\tif (_.isFinite(this.options.maximumLinks)) {\n\t\t\tvar numberOfLinks: number = _.size(this.links);\n\t\t\tif (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n\t\t\t\treturn _.values(this.links)[0];\n\t\t\t} else if (numberOfLinks >= this.options.maximumLinks) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\treportPosition() {\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlink.getPointForPort(this).setPosition(this.getCenter());\n\t\t});\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tentity: this\n\t\t\t},\n\t\t\t'reportInitialPosition'\n\t\t);\n\t}\n\n\tgetCenter(): Point {\n\t\treturn new Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn new Rectangle(this.position, this.width, this.height);\n\t}\n\n\tupdateCoords(coords: Rectangle) {\n\t\tthis.width = coords.getWidth();\n\t\tthis.height = coords.getHeight();\n\t\tthis.setPosition(coords.getTopLeft());\n\t\tthis.reportedPosition = true;\n\t\tthis.reportPosition();\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\treturn true;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}