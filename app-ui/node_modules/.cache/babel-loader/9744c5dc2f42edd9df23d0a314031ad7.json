{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultDiagramState = void 0;\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nconst PortModel_1 = require(\"../entities/port/PortModel\");\n\nconst DragNewLinkState_1 = require(\"./DragNewLinkState\");\n\nconst DragDiagramItemsState_1 = require(\"./DragDiagramItemsState\");\n\nclass DefaultDiagramState extends react_canvas_core_1.State {\n  constructor() {\n    super({\n      name: 'default-diagrams'\n    });\n    this.childStates = [new react_canvas_core_1.SelectingState()];\n    this.dragCanvas = new react_canvas_core_1.DragCanvasState();\n    this.dragNewLink = new DragNewLinkState_1.DragNewLinkState();\n    this.dragItems = new DragDiagramItemsState_1.DragDiagramItemsState(); // determine what was clicked on\n\n    this.registerAction(new react_canvas_core_1.Action({\n      type: react_canvas_core_1.InputType.MOUSE_DOWN,\n      fire: event => {\n        const element = this.engine.getActionEventBus().getModelForEvent(event); // the canvas was clicked on, transition to the dragging canvas state\n\n        if (!element) {\n          this.transitionWithEvent(this.dragCanvas, event);\n        } // initiate dragging a new link\n        else if (element instanceof PortModel_1.PortModel) {\n          this.transitionWithEvent(this.dragNewLink, event);\n        } // move the items (and potentially link points)\n        else {\n          this.transitionWithEvent(this.dragItems, event);\n        }\n      }\n    })); // touch drags the canvas\n\n    this.registerAction(new react_canvas_core_1.Action({\n      type: react_canvas_core_1.InputType.TOUCH_START,\n      fire: event => {\n        this.transitionWithEvent(this.dragCanvas, event);\n      }\n    }));\n  }\n\n}\n\nexports.DefaultDiagramState = DefaultDiagramState;","map":{"version":3,"mappings":";;;;;;;AACA;;AAQA;;AACA;;AAEA;;AAEA,MAAaA,mBAAb,SAAyCC,yBAAzC,CAA6D;AAK5DC;AACC,UAAM;AACLC,UAAI,EAAE;AADD,KAAN;AAGA,SAAKC,WAAL,GAAmB,CAAC,IAAIH,kCAAJ,EAAD,CAAnB;AACA,SAAKI,UAAL,GAAkB,IAAIJ,mCAAJ,EAAlB;AACA,SAAKK,WAAL,GAAmB,IAAIC,mCAAJ,EAAnB;AACA,SAAKC,SAAL,GAAiB,IAAIC,6CAAJ,EAAjB,CAPD,CASC;;AACA,SAAKC,cAAL,CACC,IAAIT,0BAAJ,CAAW;AACVU,UAAI,EAAEV,8BAAUW,UADN;AAEVC,UAAI,EAAGC,KAAD,IAAmC;AACxC,cAAMC,OAAO,GAAG,KAAKC,MAAL,CAAYC,iBAAZ,GAAgCC,gBAAhC,CAAiDJ,KAAjD,CAAhB,CADwC,CAGxC;;AACA,YAAI,CAACC,OAAL,EAAc;AACb,eAAKI,mBAAL,CAAyB,KAAKd,UAA9B,EAA0CS,KAA1C;AACA,SAFD,CAGA;AAHA,aAIK,IAAIC,OAAO,YAAYK,qBAAvB,EAAkC;AACtC,eAAKD,mBAAL,CAAyB,KAAKb,WAA9B,EAA2CQ,KAA3C;AACA,SAFI,CAGL;AAHK,aAIA;AACJ,eAAKK,mBAAL,CAAyB,KAAKX,SAA9B,EAAyCM,KAAzC;AACA;AACD;AAjBS,KAAX,CADD,EAVD,CAgCC;;AACA,SAAKJ,cAAL,CACC,IAAIT,0BAAJ,CAAW;AACVU,UAAI,EAAEV,8BAAUoB,WADN;AAEVR,UAAI,EAAGC,KAAD,IAAmC;AACxC,aAAKK,mBAAL,CAAyB,KAAKd,UAA9B,EAA0CS,KAA1C;AACA;AAJS,KAAX,CADD;AAQA;;AA9C2D;;AAA7DQ","names":["DefaultDiagramState","react_canvas_core_1","constructor","name","childStates","dragCanvas","dragNewLink","DragNewLinkState_1","dragItems","DragDiagramItemsState_1","registerAction","type","MOUSE_DOWN","fire","event","element","engine","getActionEventBus","getModelForEvent","transitionWithEvent","PortModel_1","TOUCH_START","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-core\\src\\states\\DefaultDiagramState.ts"],"sourcesContent":["import { MouseEvent, TouchEvent } from 'react';\nimport {\n\tSelectingState,\n\tState,\n\tAction,\n\tInputType,\n\tActionEvent,\n\tDragCanvasState\n} from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../entities/port/PortModel';\nimport { DragNewLinkState } from './DragNewLinkState';\nimport { DiagramEngine } from '../DiagramEngine';\nimport { DragDiagramItemsState } from './DragDiagramItemsState';\n\nexport class DefaultDiagramState extends State<DiagramEngine> {\n\tdragCanvas: DragCanvasState;\n\tdragNewLink: DragNewLinkState;\n\tdragItems: DragDiagramItemsState;\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'default-diagrams'\n\t\t});\n\t\tthis.childStates = [new SelectingState()];\n\t\tthis.dragCanvas = new DragCanvasState();\n\t\tthis.dragNewLink = new DragNewLinkState();\n\t\tthis.dragItems = new DragDiagramItemsState();\n\n\t\t// determine what was clicked on\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\n\t\t\t\t\t// the canvas was clicked on, transition to the dragging canvas state\n\t\t\t\t\tif (!element) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragCanvas, event);\n\t\t\t\t\t}\n\t\t\t\t\t// initiate dragging a new link\n\t\t\t\t\telse if (element instanceof PortModel) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragNewLink, event);\n\t\t\t\t\t}\n\t\t\t\t\t// move the items (and potentially link points)\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragItems, event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// touch drags the canvas\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.TOUCH_START,\n\t\t\t\tfire: (event: ActionEvent<TouchEvent>) => {\n\t\t\t\t\tthis.transitionWithEvent(this.dragCanvas, event);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}