{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultNodeWidget = void 0;\n\nconst React = require(\"react\");\n\nconst _ = require(\"lodash\");\n\nconst DefaultPortLabelWidget_1 = require(\"../port/DefaultPortLabelWidget\");\n\nconst styled_1 = require(\"@emotion/styled\");\n\nvar S;\n\n(function (S) {\n  S.Node = styled_1.default.div`\n\t\tbackground-color: ${p => p.background};\n\t\tborder-radius: 5px;\n\t\tfont-family: sans-serif;\n\t\tcolor: white;\n\t\tborder: solid 2px black;\n\t\toverflow: visible;\n\t\tfont-size: 11px;\n\t\tborder: solid 2px ${p => p.selected ? 'rgb(0,192,255)' : 'black'};\n\t`;\n  S.Title = styled_1.default.div`\n\t\tbackground: rgba(0, 0, 0, 0.3);\n\t\tdisplay: flex;\n\t\twhite-space: nowrap;\n\t\tjustify-items: center;\n\t`;\n  S.TitleName = styled_1.default.div`\n\t\tflex-grow: 1;\n\t\tpadding: 5px 5px;\n\t`;\n  S.Ports = styled_1.default.div`\n\t\tdisplay: flex;\n\t\tbackground-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\n\t`;\n  S.PortsContainer = styled_1.default.div`\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\n\t\t&:first-of-type {\n\t\t\tmargin-right: 10px;\n\t\t}\n\n\t\t&:only-child {\n\t\t\tmargin-right: 0px;\n\t\t}\n\t`;\n})(S || (S = {}));\n/**\n * Default node that models the DefaultNodeModel. It creates two columns\n * for both all the input ports on the left, and the output ports on the right.\n */\n\n\nclass DefaultNodeWidget extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.generatePort = port => {\n      return React.createElement(DefaultPortLabelWidget_1.DefaultPortLabel, {\n        engine: this.props.engine,\n        port: port,\n        key: port.getID()\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(S.Node, {\n      \"data-default-node-name\": this.props.node.getOptions().name,\n      selected: this.props.node.isSelected(),\n      background: this.props.node.getOptions().color\n    }, React.createElement(S.Title, null, React.createElement(S.TitleName, null, this.props.node.getOptions().name)), React.createElement(S.Ports, null, React.createElement(S.PortsContainer, null, _.map(this.props.node.getInPorts(), this.generatePort)), React.createElement(S.PortsContainer, null, _.map(this.props.node.getOutPorts(), this.generatePort))));\n  }\n\n}\n\nexports.DefaultNodeWidget = DefaultNodeWidget;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAGA;;AACA;;AAEA,IAAUA,CAAV;;AAAA,WAAUA,CAAV,EAAW;AACGA,WAAOC,iBAAOC,GAA8C;sBACnDC,CAAD,IAAOA,CAAC,CAACC,UAAU;;;;;;;sBAOlBD,CAAD,IAAQA,CAAC,CAACE,QAAF,GAAa,gBAAb,GAAgC,OAAQ;EARxD;AAWAL,YAAQC,iBAAOC,GAAG;;;;;EAAlB;AAOAF,gBAAYC,iBAAOC,GAAG;;;EAAtB;AAKAF,YAAQC,iBAAOC,GAAG;;;EAAlB;AAKAF,qBAAiBC,iBAAOC,GAAG;;;;;;;;;;;;EAA3B;AAab,CA1CD,EAAUF,CAAC,KAADA,CAAC,MAAX;AAiDA;;;;;;AAIA,MAAaM,iBAAb,SAAuCC,KAAK,CAACC,SAA7C,CAAwE;AAAxEC;;;AACC,wBAAgBC,IAAD,IAAS;AACvB,aAAOH,oBAACI,yCAAD,EAAiB;AAACC,cAAM,EAAE,KAAKC,KAAL,CAAWD,MAApB;AAA4BF,YAAI,EAAEA,IAAlC;AAAwCI,WAAG,EAAEJ,IAAI,CAACK,KAAL;AAA7C,OAAjB,CAAP;AACA,KAFD;AAoBA;;AAhBAC,QAAM;AACL,WACCT,oBAACP,CAAC,CAACiB,IAAH,EAAO;AAAA,gCACkB,KAAKJ,KAAL,CAAWK,IAAX,CAAgBC,UAAhB,GAA6BC,IAD/C;AAENf,cAAQ,EAAE,KAAKQ,KAAL,CAAWK,IAAX,CAAgBG,UAAhB,EAFJ;AAGNjB,gBAAU,EAAE,KAAKS,KAAL,CAAWK,IAAX,CAAgBC,UAAhB,GAA6BG;AAHnC,KAAP,EAICf,oBAACP,CAAC,CAACuB,KAAH,EAAQ,IAAR,EACChB,oBAACP,CAAC,CAACwB,SAAH,EAAY,IAAZ,EAAc,KAAKX,KAAL,CAAWK,IAAX,CAAgBC,UAAhB,GAA6BC,IAA3C,CADD,CAJD,EAOCb,oBAACP,CAAC,CAACyB,KAAH,EAAQ,IAAR,EACClB,oBAACP,CAAC,CAAC0B,cAAH,EAAiB,IAAjB,EAAmBC,CAAC,CAACC,GAAF,CAAM,KAAKf,KAAL,CAAWK,IAAX,CAAgBW,UAAhB,EAAN,EAAoC,KAAKC,YAAzC,CAAnB,CADD,EAECvB,oBAACP,CAAC,CAAC0B,cAAH,EAAiB,IAAjB,EAAmBC,CAAC,CAACC,GAAF,CAAM,KAAKf,KAAL,CAAWK,IAAX,CAAgBa,WAAhB,EAAN,EAAqC,KAAKD,YAA1C,CAAnB,CAFD,CAPD,CADD;AAcA;;AApBsE;;AAAxEE","names":["S","styled_1","div","p","background","selected","DefaultNodeWidget","React","Component","constructor","port","DefaultPortLabelWidget_1","engine","props","key","getID","render","Node","node","getOptions","name","isSelected","color","Title","TitleName","Ports","PortsContainer","_","map","getInPorts","generatePort","getOutPorts","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-defaults\\src\\node\\DefaultNodeWidget.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport { DefaultNodeModel } from './DefaultNodeModel';\nimport { DefaultPortLabel } from '../port/DefaultPortLabelWidget';\nimport styled from '@emotion/styled';\n\nnamespace S {\n\texport const Node = styled.div<{ background: string; selected: boolean }>`\n\t\tbackground-color: ${(p) => p.background};\n\t\tborder-radius: 5px;\n\t\tfont-family: sans-serif;\n\t\tcolor: white;\n\t\tborder: solid 2px black;\n\t\toverflow: visible;\n\t\tfont-size: 11px;\n\t\tborder: solid 2px ${(p) => (p.selected ? 'rgb(0,192,255)' : 'black')};\n\t`;\n\n\texport const Title = styled.div`\n\t\tbackground: rgba(0, 0, 0, 0.3);\n\t\tdisplay: flex;\n\t\twhite-space: nowrap;\n\t\tjustify-items: center;\n\t`;\n\n\texport const TitleName = styled.div`\n\t\tflex-grow: 1;\n\t\tpadding: 5px 5px;\n\t`;\n\n\texport const Ports = styled.div`\n\t\tdisplay: flex;\n\t\tbackground-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\n\t`;\n\n\texport const PortsContainer = styled.div`\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\n\t\t&:first-of-type {\n\t\t\tmargin-right: 10px;\n\t\t}\n\n\t\t&:only-child {\n\t\t\tmargin-right: 0px;\n\t\t}\n\t`;\n}\n\nexport interface DefaultNodeProps {\n\tnode: DefaultNodeModel;\n\tengine: DiagramEngine;\n}\n\n/**\n * Default node that models the DefaultNodeModel. It creates two columns\n * for both all the input ports on the left, and the output ports on the right.\n */\nexport class DefaultNodeWidget extends React.Component<DefaultNodeProps> {\n\tgeneratePort = (port) => {\n\t\treturn <DefaultPortLabel engine={this.props.engine} port={port} key={port.getID()} />;\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<S.Node\n\t\t\t\tdata-default-node-name={this.props.node.getOptions().name}\n\t\t\t\tselected={this.props.node.isSelected()}\n\t\t\t\tbackground={this.props.node.getOptions().color}>\n\t\t\t\t<S.Title>\n\t\t\t\t\t<S.TitleName>{this.props.node.getOptions().name}</S.TitleName>\n\t\t\t\t</S.Title>\n\t\t\t\t<S.Ports>\n\t\t\t\t\t<S.PortsContainer>{_.map(this.props.node.getInPorts(), this.generatePort)}</S.PortsContainer>\n\t\t\t\t\t<S.PortsContainer>{_.map(this.props.node.getOutPorts(), this.generatePort)}</S.PortsContainer>\n\t\t\t\t</S.Ports>\n\t\t\t</S.Node>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}