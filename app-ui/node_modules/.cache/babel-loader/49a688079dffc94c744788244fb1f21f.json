{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LayerModel = void 0;\n\nconst BaseModel_1 = require(\"../../core-models/BaseModel\");\n\nconst _ = require(\"lodash\");\n\nclass LayerModel extends BaseModel_1.BaseModel {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options);\n    this.models = {};\n    this.repaintEnabled = true;\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.options.isSvg = !!event.data.isSvg;\n    this.options.transformed = !!event.data.transformed;\n\n    _.forEach(event.data.models, model => {\n      const modelOb = this.getChildModelFactoryBank(event.engine).getFactory(model.type).generateModel({\n        initialConfig: model\n      });\n      modelOb.deserialize(Object.assign(Object.assign({}, event), {\n        data: model\n      }));\n      this.addModel(modelOb);\n    });\n  }\n\n  serialize() {\n    return Object.assign(Object.assign({}, super.serialize()), {\n      isSvg: this.options.isSvg,\n      transformed: this.options.transformed,\n      models: _.mapValues(this.models, model => {\n        return model.serialize();\n      })\n    });\n  }\n\n  isRepaintEnabled() {\n    return this.repaintEnabled;\n  }\n\n  allowRepaint() {\n    let allow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.repaintEnabled = allow;\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeLayer(this);\n    }\n\n    super.remove();\n  }\n\n  addModel(model) {\n    model.setParent(this);\n    this.models[model.getID()] = model;\n  }\n\n  getSelectionEntities() {\n    return _.flatMap(this.models, model => {\n      return model.getSelectionEntities();\n    });\n  }\n\n  getModels() {\n    return this.models;\n  }\n\n  getModel(id) {\n    return this.models[id];\n  }\n\n  removeModel(id) {\n    const _id = typeof id === 'string' ? id : id.getID();\n\n    if (this.models[_id]) {\n      delete this.models[_id];\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexports.LayerModel = LayerModel;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;AAkBA,MAAsBA,UAAtB,SAA4FC,qBAA5F,CAAwG;AAIvGC,gBAAsC;AAAA,QAA1BC,OAA0B,uEAAF,EAAE;AACrC,UAAMA,OAAN;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA;;AAODC,aAAW,CAACC,KAAD,EAA8B;AACxC,UAAMD,WAAN,CAAkBC,KAAlB;AACA,SAAKJ,OAAL,CAAaK,KAAb,GAAqB,CAAC,CAACD,KAAK,CAACE,IAAN,CAAWD,KAAlC;AACA,SAAKL,OAAL,CAAaO,WAAb,GAA2B,CAAC,CAACH,KAAK,CAACE,IAAN,CAAWC,WAAxC;;AACAC,KAAC,CAACC,OAAF,CAAUL,KAAK,CAACE,IAAN,CAAWL,MAArB,EAA8BS,KAAD,IAAU;AACtC,YAAMC,OAAO,GAAG,KAAKC,wBAAL,CAA8BR,KAAK,CAACS,MAApC,EAA4CC,UAA5C,CAAuDJ,KAAK,CAACK,IAA7D,EAAmEC,aAAnE,CAAiF;AAChGC,qBAAa,EAAEP;AADiF,OAAjF,CAAhB;AAGAC,aAAO,CAACR,WAAR,CAAmBe,gCACfd,KADe,GACV;AACRE,YAAI,EAAEI;AADE,OADU,CAAnB;AAIA,WAAKS,QAAL,CAAcR,OAAd;AACA,KATD;AAUA;;AAEDS,WAAS;AACR,2CACI,MAAMA,SAAN,EADJ,GACqB;AACpBf,WAAK,EAAE,KAAKL,OAAL,CAAaK,KADA;AAEpBE,iBAAW,EAAE,KAAKP,OAAL,CAAaO,WAFN;AAGpBN,YAAM,EAAEO,CAAC,CAACa,SAAF,CAAY,KAAKpB,MAAjB,EAA0BS,KAAD,IAAU;AAC1C,eAAOA,KAAK,CAACU,SAAN,EAAP;AACA,OAFO;AAHY,KADrB;AAQA;;AAEDE,kBAAgB;AACf,WAAO,KAAKpB,cAAZ;AACA;;AAEDqB,cAAY,GAAsB;AAAA,QAArBC,KAAqB,uEAAJ,IAAI;AACjC,SAAKtB,cAAL,GAAsBsB,KAAtB;AACA;;AAEDC,QAAM;AACL,QAAI,KAAKC,MAAT,EAAiB;AAChB,WAAKA,MAAL,CAAYC,WAAZ,CAAwB,IAAxB;AACA;;AACD,UAAMF,MAAN;AACA;;AAEDN,UAAQ,CAACT,KAAD,EAAqB;AAC5BA,SAAK,CAACkB,SAAN,CAAgB,IAAhB;AACA,SAAK3B,MAAL,CAAYS,KAAK,CAACmB,KAAN,EAAZ,IAA6BnB,KAA7B;AACA;;AAEDoB,sBAAoB;AACnB,WAAOtB,CAAC,CAACuB,OAAF,CAAU,KAAK9B,MAAf,EAAwBS,KAAD,IAAU;AACvC,aAAOA,KAAK,CAACoB,oBAAN,EAAP;AACA,KAFM,CAAP;AAGA;;AAEDE,WAAS;AACR,WAAO,KAAK/B,MAAZ;AACA;;AAEDgC,UAAQ,CAACC,EAAD,EAAW;AAClB,WAAO,KAAKjC,MAAL,CAAYiC,EAAZ,CAAP;AACA;;AAEDC,aAAW,CAACD,EAAD,EAA2B;AACrC,UAAME,GAAG,GAAG,OAAOF,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BA,EAAE,CAACL,KAAH,EAA1C;;AACA,QAAI,KAAK5B,MAAL,CAAYmC,GAAZ,CAAJ,EAAsB;AACrB,aAAO,KAAKnC,MAAL,CAAYmC,GAAZ,CAAP;AACA,aAAO,IAAP;AACA;;AACD,WAAO,KAAP;AACA;;AAnFsG;;AAAxGC","names":["LayerModel","BaseModel_1","constructor","options","models","repaintEnabled","deserialize","event","isSvg","data","transformed","_","forEach","model","modelOb","getChildModelFactoryBank","engine","getFactory","type","generateModel","initialConfig","Object","addModel","serialize","mapValues","isRepaintEnabled","allowRepaint","allow","remove","parent","removeLayer","setParent","getID","getSelectionEntities","flatMap","getModels","getModel","id","removeModel","_id","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-canvas-core\\src\\entities\\layer\\LayerModel.ts"],"sourcesContent":["import { BaseModel, BaseModelGenerics, BaseModelOptions } from '../../core-models/BaseModel';\nimport { CanvasModel } from '../canvas/CanvasModel';\nimport * as _ from 'lodash';\nimport { CanvasEngine } from '../../CanvasEngine';\nimport { FactoryBank } from '../../core/FactoryBank';\nimport { AbstractModelFactory } from '../../core/AbstractModelFactory';\nimport { DeserializeEvent } from '../../core-models/BaseEntity';\n\nexport interface LayerModelOptions extends BaseModelOptions {\n\tisSvg?: boolean;\n\ttransformed?: boolean;\n}\n\nexport interface LayerModelGenerics extends BaseModelGenerics {\n\tOPTIONS: LayerModelOptions;\n\tPARENT: CanvasModel;\n\tCHILDREN: BaseModel;\n\tENGINE: CanvasEngine;\n}\n\nexport abstract class LayerModel<G extends LayerModelGenerics = LayerModelGenerics> extends BaseModel<G> {\n\tprotected models: { [id: string]: G['CHILDREN'] };\n\tprotected repaintEnabled: boolean;\n\n\tconstructor(options: G['OPTIONS'] = {}) {\n\t\tsuper(options);\n\t\tthis.models = {};\n\t\tthis.repaintEnabled = true;\n\t}\n\n\t/**\n\t * This is used for deserialization\n\t */\n\tabstract getChildModelFactoryBank(engine: G['ENGINE']): FactoryBank<AbstractModelFactory<BaseModel>>;\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.isSvg = !!event.data.isSvg;\n\t\tthis.options.transformed = !!event.data.transformed;\n\t\t_.forEach(event.data.models, (model) => {\n\t\t\tconst modelOb = this.getChildModelFactoryBank(event.engine).getFactory(model.type).generateModel({\n\t\t\t\tinitialConfig: model\n\t\t\t});\n\t\t\tmodelOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: model\n\t\t\t});\n\t\t\tthis.addModel(modelOb);\n\t\t});\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tisSvg: this.options.isSvg,\n\t\t\ttransformed: this.options.transformed,\n\t\t\tmodels: _.mapValues(this.models, (model) => {\n\t\t\t\treturn model.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tisRepaintEnabled() {\n\t\treturn this.repaintEnabled;\n\t}\n\n\tallowRepaint(allow: boolean = true) {\n\t\tthis.repaintEnabled = allow;\n\t}\n\n\tremove() {\n\t\tif (this.parent) {\n\t\t\tthis.parent.removeLayer(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\taddModel(model: G['CHILDREN']) {\n\t\tmodel.setParent(this);\n\t\tthis.models[model.getID()] = model;\n\t}\n\n\tgetSelectionEntities(): Array<BaseModel> {\n\t\treturn _.flatMap(this.models, (model) => {\n\t\t\treturn model.getSelectionEntities();\n\t\t});\n\t}\n\n\tgetModels() {\n\t\treturn this.models;\n\t}\n\n\tgetModel(id: string) {\n\t\treturn this.models[id];\n\t}\n\n\tremoveModel(id: string | G['CHILDREN']): boolean {\n\t\tconst _id = typeof id === 'string' ? id : id.getID();\n\t\tif (this.models[_id]) {\n\t\t\tdelete this.models[_id];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}