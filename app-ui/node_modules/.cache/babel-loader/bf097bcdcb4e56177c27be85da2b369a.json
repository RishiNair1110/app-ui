{"ast":null,"code":"var Heap = require('heap');\n\nvar Util = require('../core/Util');\n\nvar Heuristic = require('../core/Heuristic');\n\nvar DiagonalMovement = require('../core/DiagonalMovement');\n/**\r\n * A* path-finder. Based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching \r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\n\n\nfunction AStarFinder(opt) {\n  opt = opt || {};\n  this.allowDiagonal = opt.allowDiagonal;\n  this.dontCrossCorners = opt.dontCrossCorners;\n  this.heuristic = opt.heuristic || Heuristic.manhattan;\n  this.weight = opt.weight || 1;\n  this.diagonalMovement = opt.diagonalMovement;\n\n  if (!this.diagonalMovement) {\n    if (!this.allowDiagonal) {\n      this.diagonalMovement = DiagonalMovement.Never;\n    } else {\n      if (this.dontCrossCorners) {\n        this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\n      } else {\n        this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\n      }\n    }\n  } // When diagonal movement is allowed the manhattan heuristic is not\n  //admissible. It should be octile instead\n\n\n  if (this.diagonalMovement === DiagonalMovement.Never) {\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\n  } else {\n    this.heuristic = opt.heuristic || Heuristic.octile;\n  }\n}\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\n\n\nAStarFinder.prototype.findPath = function (startX, startY, endX, endY, grid) {\n  var openList = new Heap(function (nodeA, nodeB) {\n    return nodeA.f - nodeB.f;\n  }),\n      startNode = grid.getNodeAt(startX, startY),\n      endNode = grid.getNodeAt(endX, endY),\n      heuristic = this.heuristic,\n      diagonalMovement = this.diagonalMovement,\n      weight = this.weight,\n      abs = Math.abs,\n      SQRT2 = Math.SQRT2,\n      node,\n      neighbors,\n      neighbor,\n      i,\n      l,\n      x,\n      y,\n      ng; // set the `g` and `f` value of the start node to be 0\n\n  startNode.g = 0;\n  startNode.f = 0; // push the start node into the open list\n\n  openList.push(startNode);\n  startNode.opened = true; // while the open list is not empty\n\n  while (!openList.empty()) {\n    // pop the position of node which has the minimum `f` value.\n    node = openList.pop();\n    node.closed = true; // if reached the end position, construct the path and return it\n\n    if (node === endNode) {\n      return Util.backtrace(endNode);\n    } // get neigbours of the current node\n\n\n    neighbors = grid.getNeighbors(node, diagonalMovement);\n\n    for (i = 0, l = neighbors.length; i < l; ++i) {\n      neighbor = neighbors[i];\n\n      if (neighbor.closed) {\n        continue;\n      }\n\n      x = neighbor.x;\n      y = neighbor.y; // get the distance between current node and the neighbor\n      // and calculate the next g score\n\n      ng = node.g + (x - node.x === 0 || y - node.y === 0 ? 1 : SQRT2); // check if the neighbor has not been inspected yet, or\n      // can be reached with smaller cost from the current node\n\n      if (!neighbor.opened || ng < neighbor.g) {\n        neighbor.g = ng;\n        neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\n        neighbor.f = neighbor.g + neighbor.h;\n        neighbor.parent = node;\n\n        if (!neighbor.opened) {\n          openList.push(neighbor);\n          neighbor.opened = true;\n        } else {\n          // the neighbor can be reached with smaller cost.\n          // Since its f value has been updated, we have to\n          // update its position in the open list\n          openList.updateItem(neighbor);\n        }\n      }\n    } // end for each neighbor\n\n  } // end while not open list empty\n  // fail to find the path\n\n\n  return [];\n};\n\nmodule.exports = AStarFinder;","map":{"version":3,"sources":["C:/Users/nairr/app-ui/app-ui/node_modules/pathfinding/src/finders/AStarFinder.js"],"names":["Heap","require","Util","Heuristic","DiagonalMovement","AStarFinder","opt","allowDiagonal","dontCrossCorners","heuristic","manhattan","weight","diagonalMovement","Never","OnlyWhenNoObstacles","IfAtMostOneObstacle","octile","prototype","findPath","startX","startY","endX","endY","grid","openList","nodeA","nodeB","f","startNode","getNodeAt","endNode","abs","Math","SQRT2","node","neighbors","neighbor","i","l","x","y","ng","g","push","opened","empty","pop","closed","backtrace","getNeighbors","length","h","parent","updateItem","module","exports"],"mappings":"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","sourcesContent":["var Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * A* path-finder. Based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching \r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction AStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    //admissible. It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        // if reached the end position, construct the path and return it\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    openList.push(neighbor);\r\n                    neighbor.opened = true;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    openList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = AStarFinder;\r\n"]},"metadata":{},"sourceType":"script"}