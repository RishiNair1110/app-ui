{"ast":null,"code":"var AStarFinder = require('./AStarFinder');\n/**\r\n * Dijkstra path-finder.\r\n * @constructor\r\n * @extends AStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\n\n\nfunction DijkstraFinder(opt) {\n  AStarFinder.call(this, opt);\n\n  this.heuristic = function (dx, dy) {\n    return 0;\n  };\n}\n\nDijkstraFinder.prototype = new AStarFinder();\nDijkstraFinder.prototype.constructor = DijkstraFinder;\nmodule.exports = DijkstraFinder;","map":{"version":3,"sources":["C:/Users/nairr/app-ui/app-ui/node_modules/pathfinding/src/finders/DijkstraFinder.js"],"names":["AStarFinder","require","DijkstraFinder","opt","call","heuristic","dx","dy","prototype","constructor","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AACzBH,EAAAA,WAAW,CAACI,IAAZ,CAAiB,IAAjB,EAAuBD,GAAvB;;AACA,OAAKE,SAAL,GAAiB,UAASC,EAAT,EAAaC,EAAb,EAAiB;AAC9B,WAAO,CAAP;AACH,GAFD;AAGH;;AAEDL,cAAc,CAACM,SAAf,GAA2B,IAAIR,WAAJ,EAA3B;AACAE,cAAc,CAACM,SAAf,CAAyBC,WAAzB,GAAuCP,cAAvC;AAEAQ,MAAM,CAACC,OAAP,GAAiBT,cAAjB","sourcesContent":["var AStarFinder = require('./AStarFinder');\r\n\r\n/**\r\n * Dijkstra path-finder.\r\n * @constructor\r\n * @extends AStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction DijkstraFinder(opt) {\r\n    AStarFinder.call(this, opt);\r\n    this.heuristic = function(dx, dy) {\r\n        return 0;\r\n    };\r\n}\r\n\r\nDijkstraFinder.prototype = new AStarFinder();\r\nDijkstraFinder.prototype.constructor = DijkstraFinder;\r\n\r\nmodule.exports = DijkstraFinder;\r\n"]},"metadata":{},"sourceType":"script"}