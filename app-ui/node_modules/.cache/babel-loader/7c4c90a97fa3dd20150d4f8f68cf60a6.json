{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StateMachine = void 0;\n\nconst _ = require(\"lodash\");\n\nconst BaseObserver_1 = require(\"../core/BaseObserver\");\n\nclass StateMachine extends BaseObserver_1.BaseObserver {\n  constructor(engine) {\n    super();\n    this.engine = engine;\n    this.stateStack = [];\n  }\n\n  getCurrentState() {\n    return this.currentState;\n  }\n\n  pushState(state) {\n    this.stateStack.push(state);\n    this.setState(state);\n  }\n\n  popState() {\n    this.stateStack.pop();\n    this.setState(_.last(this.stateStack));\n  }\n\n  setState(state) {\n    state.setEngine(this.engine); // if no state object, get the initial state\n\n    if (this.currentState) {\n      this.currentState.deactivated(state);\n    }\n\n    const old = this.currentState;\n    this.currentState = state;\n\n    if (this.currentState) {\n      this.currentState.activated(old);\n      this.fireEvent({\n        newState: state\n      }, 'stateChanged');\n    }\n  }\n\n}\n\nexports.StateMachine = StateMachine;","map":{"version":3,"mappings":";;;;;;;AACA;;AAEA;;AAMA,MAAaA,YAAb,SAAkCC,2BAAlC,CAAoE;AAKnEC,cAAYC,MAAZ,EAAgC;AAC/B;AACA,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA;;AAEDC,iBAAe;AACd,WAAO,KAAKC,YAAZ;AACA;;AAEDC,WAAS,CAACC,KAAD,EAAa;AACrB,SAAKJ,UAAL,CAAgBK,IAAhB,CAAqBD,KAArB;AACA,SAAKE,QAAL,CAAcF,KAAd;AACA;;AAEDG,UAAQ;AACP,SAAKP,UAAL,CAAgBQ,GAAhB;AACA,SAAKF,QAAL,CAAcG,CAAC,CAACC,IAAF,CAAO,KAAKV,UAAZ,CAAd;AACA;;AAEDM,UAAQ,CAACF,KAAD,EAAa;AACpBA,SAAK,CAACO,SAAN,CAAgB,KAAKZ,MAArB,EADoB,CAGpB;;AACA,QAAI,KAAKG,YAAT,EAAuB;AACtB,WAAKA,YAAL,CAAkBU,WAAlB,CAA8BR,KAA9B;AACA;;AACD,UAAMS,GAAG,GAAG,KAAKX,YAAjB;AACA,SAAKA,YAAL,GAAoBE,KAApB;;AACA,QAAI,KAAKF,YAAT,EAAuB;AACtB,WAAKA,YAAL,CAAkBY,SAAlB,CAA4BD,GAA5B;AACA,WAAKE,SAAL,CACC;AACCC,gBAAQ,EAAEZ;AADX,OADD,EAIC,cAJD;AAMA;AACD;;AA3CkE;;AAApEa","names":["StateMachine","BaseObserver_1","constructor","engine","stateStack","getCurrentState","currentState","pushState","state","push","setState","popState","pop","_","last","setEngine","deactivated","old","activated","fireEvent","newState","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-canvas-core\\src\\core-state\\StateMachine.ts"],"sourcesContent":["import { State } from './State';\nimport * as _ from 'lodash';\nimport { CanvasEngine } from '../CanvasEngine';\nimport { BaseEvent, BaseListener, BaseObserver } from '../core/BaseObserver';\n\nexport interface StateMachineListener extends BaseListener {\n\tstateChanged?: (event: BaseEvent & { newState: State }) => any;\n}\n\nexport class StateMachine extends BaseObserver<StateMachineListener> {\n\tprotected currentState: State;\n\tprotected stateStack: State[];\n\tprotected engine: CanvasEngine;\n\n\tconstructor(engine: CanvasEngine) {\n\t\tsuper();\n\t\tthis.engine = engine;\n\t\tthis.stateStack = [];\n\t}\n\n\tgetCurrentState() {\n\t\treturn this.currentState;\n\t}\n\n\tpushState(state: State) {\n\t\tthis.stateStack.push(state);\n\t\tthis.setState(state);\n\t}\n\n\tpopState() {\n\t\tthis.stateStack.pop();\n\t\tthis.setState(_.last(this.stateStack));\n\t}\n\n\tsetState(state: State) {\n\t\tstate.setEngine(this.engine);\n\n\t\t// if no state object, get the initial state\n\t\tif (this.currentState) {\n\t\t\tthis.currentState.deactivated(state);\n\t\t}\n\t\tconst old = this.currentState;\n\t\tthis.currentState = state;\n\t\tif (this.currentState) {\n\t\t\tthis.currentState.activated(old);\n\t\t\tthis.fireEvent<'stateChanged'>(\n\t\t\t\t{\n\t\t\t\t\tnewState: state\n\t\t\t\t},\n\t\t\t\t'stateChanged'\n\t\t\t);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}