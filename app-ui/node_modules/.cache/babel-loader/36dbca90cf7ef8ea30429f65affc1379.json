{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PortWidget = void 0;\n\nconst React = require(\"react\");\n\nconst _ = require(\"lodash\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nclass PortWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  report() {\n    this.props.port.updateCoords(this.props.engine.getPortCoords(this.props.port, this.ref.current));\n  }\n\n  componentWillUnmount() {\n    this.engineListenerHandle && this.engineListenerHandle.deregister();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (!this.props.port.reportedPosition) {\n      this.report();\n    }\n  }\n\n  componentDidMount() {\n    this.engineListenerHandle = this.props.engine.registerListener({\n      canvasReady: () => {\n        this.report();\n      }\n    });\n\n    if (this.props.engine.getCanvas()) {\n      this.report();\n    }\n  }\n\n  getExtraProps() {\n    if (react_canvas_core_1.Toolkit.TESTING) {\n      const links = _.keys(this.props.port.getNode().getPort(this.props.port.getName()).links).join(',');\n\n      return {\n        'data-links': links\n      };\n    }\n\n    return {};\n  }\n\n  render() {\n    return React.createElement(\"div\", Object.assign({\n      style: this.props.style,\n      ref: this.ref,\n      className: `port ${this.props.className || ''}`,\n      \"data-name\": this.props.port.getName(),\n      \"data-nodeid\": this.props.port.getNode().getID()\n    }, this.getExtraProps()), this.props.children);\n  }\n\n}\n\nexports.PortWidget = PortWidget;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAGA;;AASA,MAAaA,UAAb,SAAgCC,KAAK,CAACC,SAAtC,CAA0D;AAIzDC,cAAYC,KAAZ,EAA4B;AAC3B,UAAMA,KAAN;AACA,SAAKC,GAAL,GAAWJ,KAAK,CAACK,SAAN,EAAX;AACA;;AAEDC,QAAM;AACL,SAAKH,KAAL,CAAWI,IAAX,CAAgBC,YAAhB,CAA6B,KAAKL,KAAL,CAAWM,MAAX,CAAkBC,aAAlB,CAAgC,KAAKP,KAAL,CAAWI,IAA3C,EAAiD,KAAKH,GAAL,CAASO,OAA1D,CAA7B;AACA;;AAEDC,sBAAoB;AACnB,SAAKC,oBAAL,IAA6B,KAAKA,oBAAL,CAA0BC,UAA1B,EAA7B;AACA;;AAEDC,oBAAkB,CAACC,SAAD,EAAiCC,SAAjC,EAA4CC,QAA5C,EAA0D;AAC3E,QAAI,CAAC,KAAKf,KAAL,CAAWI,IAAX,CAAgBY,gBAArB,EAAuC;AACtC,WAAKb,MAAL;AACA;AACD;;AAEDc,mBAAiB;AAChB,SAAKP,oBAAL,GAA4B,KAAKV,KAAL,CAAWM,MAAX,CAAkBY,gBAAlB,CAAmC;AAC9DC,iBAAW,EAAE,MAAK;AACjB,aAAKhB,MAAL;AACA;AAH6D,KAAnC,CAA5B;;AAKA,QAAI,KAAKH,KAAL,CAAWM,MAAX,CAAkBc,SAAlB,EAAJ,EAAmC;AAClC,WAAKjB,MAAL;AACA;AACD;;AAEDkB,eAAa;AACZ,QAAIC,4BAAQC,OAAZ,EAAqB;AACpB,YAAMC,KAAK,GAAGC,CAAC,CAACC,IAAF,CAAO,KAAK1B,KAAL,CAAWI,IAAX,CAAgBuB,OAAhB,GAA0BC,OAA1B,CAAkC,KAAK5B,KAAL,CAAWI,IAAX,CAAgByB,OAAhB,EAAlC,EAA6DL,KAApE,EAA2EM,IAA3E,CAAgF,GAAhF,CAAd;;AACA,aAAO;AACN,sBAAcN;AADR,OAAP;AAGA;;AACD,WAAO,EAAP;AACA;;AAEDO,QAAM;AACL,WACClC;AACCmC,WAAK,EAAE,KAAKhC,KAAL,CAAWgC,KADnB;AAEC/B,SAAG,EAAE,KAAKA,GAFX;AAGCgC,eAAS,EAAE,QAAQ,KAAKjC,KAAL,CAAWiC,SAAX,IAAwB,EAAE,EAH9C;AAGgD,mBACpC,KAAKjC,KAAL,CAAWI,IAAX,CAAgByB,OAAhB,EAJZ;AAIqC,qBACvB,KAAK7B,KAAL,CAAWI,IAAX,CAAgBuB,OAAhB,GAA0BO,KAA1B;AALd,OAMK,KAAKb,aAAL,EANL,GAOE,KAAKrB,KAAL,CAAWmC,QAPb,CADD;AAWA;;AAxDwD;;AAA1DC","names":["PortWidget","React","Component","constructor","props","ref","createRef","report","port","updateCoords","engine","getPortCoords","current","componentWillUnmount","engineListenerHandle","deregister","componentDidUpdate","prevProps","prevState","snapshot","reportedPosition","componentDidMount","registerListener","canvasReady","getCanvas","getExtraProps","react_canvas_core_1","TESTING","links","_","keys","getNode","getPort","getName","join","render","style","className","getID","children","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-core\\src\\entities\\port\\PortWidget.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { PortModel } from './PortModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { ListenerHandle, Toolkit } from '@projectstorm/react-canvas-core';\n\nexport interface PortProps {\n\tport: PortModel;\n\tengine: DiagramEngine;\n\tclassName?;\n\tstyle?;\n}\n\nexport class PortWidget extends React.Component<PortProps> {\n\tref: React.RefObject<HTMLDivElement>;\n\tengineListenerHandle: ListenerHandle;\n\n\tconstructor(props: PortProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\treport() {\n\t\tthis.props.port.updateCoords(this.props.engine.getPortCoords(this.props.port, this.ref.current));\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.engineListenerHandle && this.engineListenerHandle.deregister();\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<PortProps>, prevState, snapshot?: any): void {\n\t\tif (!this.props.port.reportedPosition) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tcomponentDidMount(): void {\n\t\tthis.engineListenerHandle = this.props.engine.registerListener({\n\t\t\tcanvasReady: () => {\n\t\t\t\tthis.report();\n\t\t\t}\n\t\t});\n\t\tif (this.props.engine.getCanvas()) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tgetExtraProps() {\n\t\tif (Toolkit.TESTING) {\n\t\t\tconst links = _.keys(this.props.port.getNode().getPort(this.props.port.getName()).links).join(',');\n\t\t\treturn {\n\t\t\t\t'data-links': links\n\t\t\t};\n\t\t}\n\t\treturn {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={this.props.style}\n\t\t\t\tref={this.ref}\n\t\t\t\tclassName={`port ${this.props.className || ''}`}\n\t\t\t\tdata-name={this.props.port.getName()}\n\t\t\t\tdata-nodeid={this.props.port.getNode().getID()}\n\t\t\t\t{...this.getExtraProps()}>\n\t\t\t\t{this.props.children}\n\t\t\t</div>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}