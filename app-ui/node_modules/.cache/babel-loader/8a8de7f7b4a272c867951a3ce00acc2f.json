{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FactoryBank = void 0;\n\nconst BaseObserver_1 = require(\"./BaseObserver\");\n\nconst _ = require(\"lodash\");\n/**\n * Store and managed Factories that extend from Abstractfactory\n */\n\n\nclass FactoryBank extends BaseObserver_1.BaseObserver {\n  constructor() {\n    super();\n    this.factories = {};\n  }\n\n  getFactories() {\n    return _.values(this.factories);\n  }\n\n  clearFactories() {\n    for (let factory in this.factories) {\n      this.deregisterFactory(factory);\n    }\n  }\n\n  getFactory(type) {\n    if (!this.factories[type]) {\n      throw new Error(`Cannot find factory with type [${type}]`);\n    }\n\n    return this.factories[type];\n  }\n\n  registerFactory(factory) {\n    factory.setFactoryBank(this);\n    this.factories[factory.getType()] = factory; // todo fixme\n\n    this.fireEvent({\n      factory\n    }, 'factoryAdded');\n  }\n\n  deregisterFactory(type) {\n    const factory = this.factories[type];\n    factory.setFactoryBank(null);\n    delete this.factories[type]; // todo fixme\n\n    this.fireEvent({\n      factory\n    }, 'factoryRemoved');\n  }\n\n}\n\nexports.FactoryBank = FactoryBank;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;AAcA;;;;;AAGA,MAAaA,WAAb,SAGUC,2BAHV,CAGyB;AAGxBC;AACC;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA;;AAEDC,cAAY;AACX,WAAOC,CAAC,CAACC,MAAF,CAAS,KAAKH,SAAd,CAAP;AACA;;AAEDI,gBAAc;AACb,SAAK,IAAIC,OAAT,IAAoB,KAAKL,SAAzB,EAAoC;AACnC,WAAKM,iBAAL,CAAuBD,OAAvB;AACA;AACD;;AAEDE,YAAU,CAAkBC,IAAlB,EAA8B;AACvC,QAAI,CAAC,KAAKR,SAAL,CAAeQ,IAAf,CAAL,EAA2B;AAC1B,YAAM,IAAIC,KAAJ,CAAU,kCAAkCD,IAAI,GAAhD,CAAN;AACA;;AACD,WAAO,KAAKR,SAAL,CAAeQ,IAAf,CAAP;AACA;;AAEDE,iBAAe,CAACL,OAAD,EAAW;AACzBA,WAAO,CAACM,cAAR,CAAuB,IAAvB;AACA,SAAKX,SAAL,CAAeK,OAAO,CAACO,OAAR,EAAf,IAAoCP,OAApC,CAFyB,CAGzB;;AACA,SAAKQ,SAAL,CAA+B;AAAER;AAAF,KAA/B,EAAmD,cAAnD;AACA;;AAEDC,mBAAiB,CAACE,IAAD,EAAa;AAC7B,UAAMH,OAAO,GAAG,KAAKL,SAAL,CAAeQ,IAAf,CAAhB;AACAH,WAAO,CAACM,cAAR,CAAuB,IAAvB;AACA,WAAO,KAAKX,SAAL,CAAeQ,IAAf,CAAP,CAH6B,CAI7B;;AACA,SAAKK,SAAL,CAAiC;AAAER;AAAF,KAAjC,EAAqD,gBAArD;AACA;;AAtCuB;;AAHzBS","names":["FactoryBank","BaseObserver_1","constructor","factories","getFactories","_","values","clearFactories","factory","deregisterFactory","getFactory","type","Error","registerFactory","setFactoryBank","getType","fireEvent","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-canvas-core\\src\\core\\FactoryBank.ts"],"sourcesContent":["import { BaseEvent, BaseListener, BaseObserver } from './BaseObserver';\nimport { AbstractFactory } from './AbstractFactory';\nimport * as _ from 'lodash';\n\nexport interface FactoryBankListener<F extends AbstractFactory = AbstractFactory> extends BaseListener {\n\t/**\n\t * Factory as added to rhe bank\n\t */\n\tfactoryAdded?: (event: BaseEvent & { factory: F }) => any;\n\n\t/**\n\t * Factory was removed from the bank\n\t */\n\tfactoryRemoved?: (event: BaseEvent & { factory: F }) => any;\n}\n\n/**\n * Store and managed Factories that extend from Abstractfactory\n */\nexport class FactoryBank<\n\tF extends AbstractFactory = AbstractFactory,\n\tL extends FactoryBankListener<F> = FactoryBankListener<F>\n> extends BaseObserver<L> {\n\tprotected factories: { [type: string]: F };\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.factories = {};\n\t}\n\n\tgetFactories(): F[] {\n\t\treturn _.values(this.factories);\n\t}\n\n\tclearFactories() {\n\t\tfor (let factory in this.factories) {\n\t\t\tthis.deregisterFactory(factory);\n\t\t}\n\t}\n\n\tgetFactory<T extends F = F>(type: string): T {\n\t\tif (!this.factories[type]) {\n\t\t\tthrow new Error(`Cannot find factory with type [${type}]`);\n\t\t}\n\t\treturn this.factories[type] as T;\n\t}\n\n\tregisterFactory(factory: F) {\n\t\tfactory.setFactoryBank(this);\n\t\tthis.factories[factory.getType()] = factory;\n\t\t// todo fixme\n\t\tthis.fireEvent<'factoryAdded'>({ factory } as any, 'factoryAdded');\n\t}\n\n\tderegisterFactory(type: string) {\n\t\tconst factory = this.factories[type];\n\t\tfactory.setFactoryBank(null);\n\t\tdelete this.factories[type];\n\t\t// todo fixme\n\t\tthis.fireEvent<'factoryRemoved'>({ factory } as any, 'factoryRemoved');\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}