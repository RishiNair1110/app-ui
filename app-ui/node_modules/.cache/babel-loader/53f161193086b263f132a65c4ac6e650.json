{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseEntity = void 0;\n\nconst Toolkit_1 = require(\"../Toolkit\");\n\nconst _ = require(\"lodash\");\n\nconst BaseObserver_1 = require(\"../core/BaseObserver\");\n\nclass BaseEntity extends BaseObserver_1.BaseObserver {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.options = Object.assign({\n      id: Toolkit_1.Toolkit.UID()\n    }, options);\n  }\n\n  getOptions() {\n    return this.options;\n  }\n\n  getID() {\n    return this.options.id;\n  }\n\n  doClone() {\n    /*noop*/\n\n    let lookupTable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let clone = arguments.length > 1 ? arguments[1] : undefined;\n  }\n\n  clone() {\n    let lookupTable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    // try and use an existing clone first\n    if (lookupTable[this.options.id]) {\n      return lookupTable[this.options.id];\n    }\n\n    let clone = _.cloneDeep(this);\n\n    clone.options = Object.assign(Object.assign({}, this.options), {\n      id: Toolkit_1.Toolkit.UID()\n    });\n    clone.clearListeners();\n    lookupTable[this.options.id] = clone;\n    this.doClone(lookupTable, clone);\n    return clone;\n  }\n\n  clearListeners() {\n    this.listeners = {};\n  }\n\n  deserialize(event) {\n    this.options.id = event.data.id;\n    this.options.locked = event.data.locked;\n  }\n\n  serialize() {\n    return {\n      id: this.options.id,\n      locked: this.options.locked\n    };\n  }\n\n  fireEvent(event, k) {\n    super.fireEvent(Object.assign({\n      entity: this\n    }, event), k);\n  }\n\n  isLocked() {\n    return this.options.locked;\n  }\n\n  setLocked() {\n    let locked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.options.locked = locked;\n    this.fireEvent({\n      locked: locked\n    }, 'lockChanged');\n  }\n\n}\n\nexports.BaseEntity = BaseEntity;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AA+BA,MAAaA,UAAb,SAAmFC,2BAAnF,CAA8G;AAG7GC,gBAAsC;AAAA,QAA1BC,OAA0B,uEAAF,EAAE;AACrC;AACA,SAAKA,OAAL,GAAYC;AACXC,QAAE,EAAEC,kBAAQC,GAAR;AADO,OAERJ,OAFQ,CAAZ;AAIA;;AAEDK,YAAU;AACT,WAAO,KAAKL,OAAZ;AACA;;AAEDM,OAAK;AACJ,WAAO,KAAKN,OAAL,CAAaE,EAApB;AACA;;AAEDK,SAAO,GAAmD;AACzD;;AADyD,QAAlDC,WAAkD,uEAAd,EAAc;AAAA,QAAVC,KAAU;AAEzD;;AAEDA,OAAK,GAAuC;AAAA,QAAtCD,WAAsC,uEAAF,EAAE;;AAC3C;AACA,QAAIA,WAAW,CAAC,KAAKR,OAAL,CAAaE,EAAd,CAAf,EAAkC;AACjC,aAAOM,WAAW,CAAC,KAAKR,OAAL,CAAaE,EAAd,CAAlB;AACA;;AACD,QAAIO,KAAK,GAAGC,CAAC,CAACC,SAAF,CAAY,IAAZ,CAAZ;;AACAF,SAAK,CAACT,OAAN,GAAaC,gCACT,KAAKD,OADI,GACG;AACfE,QAAE,EAAEC,kBAAQC,GAAR;AADW,KADH,CAAb;AAIAK,SAAK,CAACG,cAAN;AACAJ,eAAW,CAAC,KAAKR,OAAL,CAAaE,EAAd,CAAX,GAA+BO,KAA/B;AAEA,SAAKF,OAAL,CAAaC,WAAb,EAA0BC,KAA1B;AACA,WAAOA,KAAP;AACA;;AAEDG,gBAAc;AACb,SAAKC,SAAL,GAAiB,EAAjB;AACA;;AAEDC,aAAW,CAACC,KAAD,EAA8B;AACxC,SAAKf,OAAL,CAAaE,EAAb,GAAkBa,KAAK,CAACC,IAAN,CAAWd,EAA7B;AACA,SAAKF,OAAL,CAAaiB,MAAb,GAAsBF,KAAK,CAACC,IAAN,CAAWC,MAAjC;AACA;;AAEDC,WAAS;AACR,WAAO;AACNhB,QAAE,EAAE,KAAKF,OAAL,CAAaE,EADX;AAENe,YAAM,EAAE,KAAKjB,OAAL,CAAaiB;AAFf,KAAP;AAIA;;AAEDE,WAAS,CAA8CJ,KAA9C,EAAwDK,CAAxD,EAA8E;AACtF,UAAMD,SAAN,CAAelB;AAEboB,YAAM,EAAE;AAFK,OAGVN,KAHU,CAAf,EAKCK,CALD;AAOA;;AAEME,UAAQ;AACd,WAAO,KAAKtB,OAAL,CAAaiB,MAApB;AACA;;AAEMM,WAAS,GAAuB;AAAA,QAAtBN,MAAsB,uEAAJ,IAAI;AACtC,SAAKjB,OAAL,CAAaiB,MAAb,GAAsBA,MAAtB;AACA,SAAKE,SAAL,CACC;AACCF,YAAM,EAAEA;AADT,KADD,EAIC,aAJD;AAMA;;AA9E4G;;AAA9GO","names":["BaseEntity","BaseObserver_1","constructor","options","Object","id","Toolkit_1","UID","getOptions","getID","doClone","lookupTable","clone","_","cloneDeep","clearListeners","listeners","deserialize","event","data","locked","serialize","fireEvent","k","entity","isLocked","setLocked","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-canvas-core\\src\\core-models\\BaseEntity.ts"],"sourcesContent":["import { Toolkit } from '../Toolkit';\nimport * as _ from 'lodash';\nimport { CanvasEngine } from '../CanvasEngine';\nimport { BaseEvent, BaseListener, BaseObserver } from '../core/BaseObserver';\nimport { AbstractModelFactory } from '../core/AbstractModelFactory';\nimport { BaseModel } from './BaseModel';\n\nexport interface BaseEntityEvent<T extends BaseEntity = BaseEntity> extends BaseEvent {\n\tentity: T;\n}\n\nexport interface BaseEntityListener<T extends BaseEntity = BaseEntity> extends BaseListener {\n\tlockChanged?(event: BaseEntityEvent<T> & { locked: boolean }): void;\n}\n\nexport type BaseEntityType = 'node' | 'link' | 'port' | 'point';\n\nexport interface BaseEntityOptions {\n\tid?: string;\n\tlocked?: boolean;\n}\n\nexport type BaseEntityGenerics = {\n\tLISTENER: BaseEntityListener;\n\tOPTIONS: BaseEntityOptions;\n};\n\nexport interface DeserializeEvent<T extends BaseEntity = BaseEntity> {\n\tengine: CanvasEngine;\n\tdata: ReturnType<T['serialize']>;\n\tregisterModel(model: BaseModel);\n\tgetModel<T extends BaseModel>(id: string): Promise<T>;\n}\n\nexport class BaseEntity<T extends BaseEntityGenerics = BaseEntityGenerics> extends BaseObserver<T['LISTENER']> {\n\tprotected options: T['OPTIONS'];\n\n\tconstructor(options: T['OPTIONS'] = {}) {\n\t\tsuper();\n\t\tthis.options = {\n\t\t\tid: Toolkit.UID(),\n\t\t\t...options\n\t\t};\n\t}\n\n\tgetOptions() {\n\t\treturn this.options;\n\t}\n\n\tgetID() {\n\t\treturn this.options.id;\n\t}\n\n\tdoClone(lookupTable: { [s: string]: any } = {}, clone: any) {\n\t\t/*noop*/\n\t}\n\n\tclone(lookupTable: { [s: string]: any } = {}) {\n\t\t// try and use an existing clone first\n\t\tif (lookupTable[this.options.id]) {\n\t\t\treturn lookupTable[this.options.id];\n\t\t}\n\t\tlet clone = _.cloneDeep(this);\n\t\tclone.options = {\n\t\t\t...this.options,\n\t\t\tid: Toolkit.UID()\n\t\t};\n\t\tclone.clearListeners();\n\t\tlookupTable[this.options.id] = clone;\n\n\t\tthis.doClone(lookupTable, clone);\n\t\treturn clone;\n\t}\n\n\tclearListeners() {\n\t\tthis.listeners = {};\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tthis.options.id = event.data.id;\n\t\tthis.options.locked = event.data.locked;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\tid: this.options.id,\n\t\t\tlocked: this.options.locked\n\t\t};\n\t}\n\n\tfireEvent<L extends Partial<BaseEntityEvent> & object>(event: L, k: keyof T['LISTENER']) {\n\t\tsuper.fireEvent(\n\t\t\t{\n\t\t\t\tentity: this,\n\t\t\t\t...event\n\t\t\t},\n\t\t\tk\n\t\t);\n\t}\n\n\tpublic isLocked(): boolean {\n\t\treturn this.options.locked;\n\t}\n\n\tpublic setLocked(locked: boolean = true) {\n\t\tthis.options.locked = locked;\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tlocked: locked\n\t\t\t},\n\t\t\t'lockChanged'\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}