{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SelectionBoxState = void 0;\n\nconst AbstractDisplacementState_1 = require(\"../core-state/AbstractDisplacementState\");\n\nconst SelectionLayerModel_1 = require(\"../entities/selection/SelectionLayerModel\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nclass SelectionBoxState extends AbstractDisplacementState_1.AbstractDisplacementState {\n  constructor() {\n    super({\n      name: 'selection-box'\n    });\n  }\n\n  activated(previous) {\n    super.activated(previous);\n    this.layer = new SelectionLayerModel_1.SelectionLayerModel();\n    this.engine.getModel().addLayer(this.layer);\n  }\n\n  deactivated(next) {\n    super.deactivated(next);\n    this.layer.remove();\n    this.engine.repaintCanvas();\n  }\n\n  getBoxDimensions(event) {\n    let rel;\n\n    if ('touches' in event.event) {\n      const touch = event.event.touches[0];\n      rel = this.engine.getRelativePoint(touch.clientX, touch.clientY);\n    } else {\n      rel = this.engine.getRelativePoint(event.event.clientX, event.event.clientY);\n    }\n\n    return {\n      left: rel.x > this.initialXRelative ? this.initialXRelative : rel.x,\n      top: rel.y > this.initialYRelative ? this.initialYRelative : rel.y,\n      width: Math.abs(rel.x - this.initialXRelative),\n      height: Math.abs(rel.y - this.initialYRelative),\n      right: rel.x < this.initialXRelative ? this.initialXRelative : rel.x,\n      bottom: rel.y < this.initialYRelative ? this.initialYRelative : rel.y\n    };\n  }\n\n  fireMouseMoved(event) {\n    this.layer.setBox(this.getBoxDimensions(event));\n    const relative = this.engine.getRelativeMousePoint({\n      clientX: this.initialX,\n      clientY: this.initialY\n    });\n\n    if (event.virtualDisplacementX < 0) {\n      relative.x -= Math.abs(event.virtualDisplacementX);\n    }\n\n    if (event.virtualDisplacementY < 0) {\n      relative.y -= Math.abs(event.virtualDisplacementY);\n    }\n\n    const rect = new geometry_1.Rectangle(relative, Math.abs(event.virtualDisplacementX), Math.abs(event.virtualDisplacementY));\n\n    for (let model of this.engine.getModel().getSelectionEntities()) {\n      if (model.getBoundingBox) {\n        const bounds = model.getBoundingBox();\n\n        if (rect.containsPoint(bounds.getTopLeft()) && rect.containsPoint(bounds.getBottomRight())) {\n          model.setSelected(true);\n        } else {\n          model.setSelected(false);\n        }\n      }\n    }\n\n    this.engine.repaintCanvas();\n  }\n\n}\n\nexports.SelectionBoxState = SelectionBoxState;","map":{"version":3,"mappings":"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","names":["SelectionBoxState","AbstractDisplacementState_1","constructor","name","activated","previous","layer","SelectionLayerModel_1","engine","getModel","addLayer","deactivated","next","remove","repaintCanvas","getBoxDimensions","event","rel","touch","touches","getRelativePoint","clientX","clientY","left","x","initialXRelative","top","y","initialYRelative","width","Math","abs","height","right","bottom","fireMouseMoved","setBox","relative","getRelativeMousePoint","initialX","initialY","virtualDisplacementX","virtualDisplacementY","rect","geometry_1","model","getSelectionEntities","getBoundingBox","bounds","containsPoint","getTopLeft","getBottomRight","setSelected","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-canvas-core\\src\\states\\SelectionBoxState.ts"],"sourcesContent":["import { AbstractDisplacementState, AbstractDisplacementStateEvent } from '../core-state/AbstractDisplacementState';\nimport { State } from '../core-state/State';\nimport { SelectionLayerModel } from '../entities/selection/SelectionLayerModel';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport { ModelGeometryInterface } from '../core/ModelGeometryInterface';\n\nexport class SelectionBoxState extends AbstractDisplacementState {\n\tlayer: SelectionLayerModel;\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'selection-box'\n\t\t});\n\t}\n\n\tactivated(previous: State) {\n\t\tsuper.activated(previous);\n\t\tthis.layer = new SelectionLayerModel();\n\t\tthis.engine.getModel().addLayer(this.layer);\n\t}\n\n\tdeactivated(next: State) {\n\t\tsuper.deactivated(next);\n\t\tthis.layer.remove();\n\t\tthis.engine.repaintCanvas();\n\t}\n\n\tgetBoxDimensions(event: AbstractDisplacementStateEvent): ClientRect {\n\t\tlet rel: Point;\n\n\t\tif ('touches' in event.event) {\n\t\t\tconst touch = event.event.touches[0];\n\t\t\trel = this.engine.getRelativePoint(touch.clientX, touch.clientY);\n\t\t} else {\n\t\t\trel = this.engine.getRelativePoint(event.event.clientX, event.event.clientY);\n\t\t}\n\n\t\treturn {\n\t\t\tleft: rel.x > this.initialXRelative ? this.initialXRelative : rel.x,\n\t\t\ttop: rel.y > this.initialYRelative ? this.initialYRelative : rel.y,\n\t\t\twidth: Math.abs(rel.x - this.initialXRelative),\n\t\t\theight: Math.abs(rel.y - this.initialYRelative),\n\t\t\tright: rel.x < this.initialXRelative ? this.initialXRelative : rel.x,\n\t\t\tbottom: rel.y < this.initialYRelative ? this.initialYRelative : rel.y\n\t\t};\n\t}\n\n\tfireMouseMoved(event: AbstractDisplacementStateEvent) {\n\t\tthis.layer.setBox(this.getBoxDimensions(event));\n\n\t\tconst relative = this.engine.getRelativeMousePoint({\n\t\t\tclientX: this.initialX,\n\t\t\tclientY: this.initialY\n\t\t});\n\t\tif (event.virtualDisplacementX < 0) {\n\t\t\trelative.x -= Math.abs(event.virtualDisplacementX);\n\t\t}\n\t\tif (event.virtualDisplacementY < 0) {\n\t\t\trelative.y -= Math.abs(event.virtualDisplacementY);\n\t\t}\n\t\tconst rect = new Rectangle(relative, Math.abs(event.virtualDisplacementX), Math.abs(event.virtualDisplacementY));\n\n\t\tfor (let model of this.engine.getModel().getSelectionEntities()) {\n\t\t\tif ((model as unknown as ModelGeometryInterface).getBoundingBox) {\n\t\t\t\tconst bounds = (model as unknown as ModelGeometryInterface).getBoundingBox();\n\t\t\t\tif (rect.containsPoint(bounds.getTopLeft()) && rect.containsPoint(bounds.getBottomRight())) {\n\t\t\t\t\tmodel.setSelected(true);\n\t\t\t\t} else {\n\t\t\t\t\tmodel.setSelected(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.engine.repaintCanvas();\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}