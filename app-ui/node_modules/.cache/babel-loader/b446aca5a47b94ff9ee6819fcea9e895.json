{"ast":null,"code":"var Heap = require('heap');\n\nvar Util = require('../core/Util');\n\nvar Heuristic = require('../core/Heuristic');\n\nvar DiagonalMovement = require('../core/DiagonalMovement');\n/**\r\n * A* path-finder.\r\n * based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\n\n\nfunction BiAStarFinder(opt) {\n  opt = opt || {};\n  this.allowDiagonal = opt.allowDiagonal;\n  this.dontCrossCorners = opt.dontCrossCorners;\n  this.diagonalMovement = opt.diagonalMovement;\n  this.heuristic = opt.heuristic || Heuristic.manhattan;\n  this.weight = opt.weight || 1;\n\n  if (!this.diagonalMovement) {\n    if (!this.allowDiagonal) {\n      this.diagonalMovement = DiagonalMovement.Never;\n    } else {\n      if (this.dontCrossCorners) {\n        this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\n      } else {\n        this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\n      }\n    }\n  } //When diagonal movement is allowed the manhattan heuristic is not admissible\n  //It should be octile instead\n\n\n  if (this.diagonalMovement === DiagonalMovement.Never) {\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\n  } else {\n    this.heuristic = opt.heuristic || Heuristic.octile;\n  }\n}\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\n\n\nBiAStarFinder.prototype.findPath = function (startX, startY, endX, endY, grid) {\n  var cmp = function (nodeA, nodeB) {\n    return nodeA.f - nodeB.f;\n  },\n      startOpenList = new Heap(cmp),\n      endOpenList = new Heap(cmp),\n      startNode = grid.getNodeAt(startX, startY),\n      endNode = grid.getNodeAt(endX, endY),\n      heuristic = this.heuristic,\n      diagonalMovement = this.diagonalMovement,\n      weight = this.weight,\n      abs = Math.abs,\n      SQRT2 = Math.SQRT2,\n      node,\n      neighbors,\n      neighbor,\n      i,\n      l,\n      x,\n      y,\n      ng,\n      BY_START = 1,\n      BY_END = 2; // set the `g` and `f` value of the start node to be 0\n  // and push it into the start open list\n\n\n  startNode.g = 0;\n  startNode.f = 0;\n  startOpenList.push(startNode);\n  startNode.opened = BY_START; // set the `g` and `f` value of the end node to be 0\n  // and push it into the open open list\n\n  endNode.g = 0;\n  endNode.f = 0;\n  endOpenList.push(endNode);\n  endNode.opened = BY_END; // while both the open lists are not empty\n\n  while (!startOpenList.empty() && !endOpenList.empty()) {\n    // pop the position of start node which has the minimum `f` value.\n    node = startOpenList.pop();\n    node.closed = true; // get neigbours of the current node\n\n    neighbors = grid.getNeighbors(node, diagonalMovement);\n\n    for (i = 0, l = neighbors.length; i < l; ++i) {\n      neighbor = neighbors[i];\n\n      if (neighbor.closed) {\n        continue;\n      }\n\n      if (neighbor.opened === BY_END) {\n        return Util.biBacktrace(node, neighbor);\n      }\n\n      x = neighbor.x;\n      y = neighbor.y; // get the distance between current node and the neighbor\n      // and calculate the next g score\n\n      ng = node.g + (x - node.x === 0 || y - node.y === 0 ? 1 : SQRT2); // check if the neighbor has not been inspected yet, or\n      // can be reached with smaller cost from the current node\n\n      if (!neighbor.opened || ng < neighbor.g) {\n        neighbor.g = ng;\n        neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\n        neighbor.f = neighbor.g + neighbor.h;\n        neighbor.parent = node;\n\n        if (!neighbor.opened) {\n          startOpenList.push(neighbor);\n          neighbor.opened = BY_START;\n        } else {\n          // the neighbor can be reached with smaller cost.\n          // Since its f value has been updated, we have to\n          // update its position in the open list\n          startOpenList.updateItem(neighbor);\n        }\n      }\n    } // end for each neighbor\n    // pop the position of end node which has the minimum `f` value.\n\n\n    node = endOpenList.pop();\n    node.closed = true; // get neigbours of the current node\n\n    neighbors = grid.getNeighbors(node, diagonalMovement);\n\n    for (i = 0, l = neighbors.length; i < l; ++i) {\n      neighbor = neighbors[i];\n\n      if (neighbor.closed) {\n        continue;\n      }\n\n      if (neighbor.opened === BY_START) {\n        return Util.biBacktrace(neighbor, node);\n      }\n\n      x = neighbor.x;\n      y = neighbor.y; // get the distance between current node and the neighbor\n      // and calculate the next g score\n\n      ng = node.g + (x - node.x === 0 || y - node.y === 0 ? 1 : SQRT2); // check if the neighbor has not been inspected yet, or\n      // can be reached with smaller cost from the current node\n\n      if (!neighbor.opened || ng < neighbor.g) {\n        neighbor.g = ng;\n        neighbor.h = neighbor.h || weight * heuristic(abs(x - startX), abs(y - startY));\n        neighbor.f = neighbor.g + neighbor.h;\n        neighbor.parent = node;\n\n        if (!neighbor.opened) {\n          endOpenList.push(neighbor);\n          neighbor.opened = BY_END;\n        } else {\n          // the neighbor can be reached with smaller cost.\n          // Since its f value has been updated, we have to\n          // update its position in the open list\n          endOpenList.updateItem(neighbor);\n        }\n      }\n    } // end for each neighbor\n\n  } // end while not open list empty\n  // fail to find the path\n\n\n  return [];\n};\n\nmodule.exports = BiAStarFinder;","map":{"version":3,"sources":["C:/Users/nairr/app-ui/app-ui/node_modules/pathfinding/src/finders/BiAStarFinder.js"],"names":["Heap","require","Util","Heuristic","DiagonalMovement","BiAStarFinder","opt","allowDiagonal","dontCrossCorners","diagonalMovement","heuristic","manhattan","weight","Never","OnlyWhenNoObstacles","IfAtMostOneObstacle","octile","prototype","findPath","startX","startY","endX","endY","grid","cmp","nodeA","nodeB","f","startOpenList","endOpenList","startNode","getNodeAt","endNode","abs","Math","SQRT2","node","neighbors","neighbor","i","l","x","y","ng","BY_START","BY_END","g","push","opened","empty","pop","closed","getNeighbors","length","biBacktrace","h","parent","updateItem","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAASC,OAAO,CAAC,MAAD,CAAxB;;AACA,IAAIC,IAAI,GAASD,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIE,SAAS,GAAIF,OAAO,CAAC,mBAAD,CAAxB;;AACA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,0BAAD,CAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,aAAT,CAAuBC,GAAvB,EAA4B;AACxBA,EAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AACA,OAAKC,aAAL,GAAqBD,GAAG,CAACC,aAAzB;AACA,OAAKC,gBAAL,GAAwBF,GAAG,CAACE,gBAA5B;AACA,OAAKC,gBAAL,GAAwBH,GAAG,CAACG,gBAA5B;AACA,OAAKC,SAAL,GAAiBJ,GAAG,CAACI,SAAJ,IAAiBP,SAAS,CAACQ,SAA5C;AACA,OAAKC,MAAL,GAAcN,GAAG,CAACM,MAAJ,IAAc,CAA5B;;AAEA,MAAI,CAAC,KAAKH,gBAAV,EAA4B;AACxB,QAAI,CAAC,KAAKF,aAAV,EAAyB;AACrB,WAAKE,gBAAL,GAAwBL,gBAAgB,CAACS,KAAzC;AACH,KAFD,MAEO;AACH,UAAI,KAAKL,gBAAT,EAA2B;AACvB,aAAKC,gBAAL,GAAwBL,gBAAgB,CAACU,mBAAzC;AACH,OAFD,MAEO;AACH,aAAKL,gBAAL,GAAwBL,gBAAgB,CAACW,mBAAzC;AACH;AACJ;AACJ,GAlBuB,CAoBxB;AACA;;;AACA,MAAI,KAAKN,gBAAL,KAA0BL,gBAAgB,CAACS,KAA/C,EAAsD;AAClD,SAAKH,SAAL,GAAiBJ,GAAG,CAACI,SAAJ,IAAiBP,SAAS,CAACQ,SAA5C;AACH,GAFD,MAEO;AACH,SAAKD,SAAL,GAAiBJ,GAAG,CAACI,SAAJ,IAAiBP,SAAS,CAACa,MAA5C;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;;;AACAX,aAAa,CAACY,SAAd,CAAwBC,QAAxB,GAAmC,UAASC,MAAT,EAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2C;AAC1E,MAAIC,GAAG,GAAG,UAASC,KAAT,EAAgBC,KAAhB,EAAuB;AACzB,WAAOD,KAAK,CAACE,CAAN,GAAUD,KAAK,CAACC,CAAvB;AACH,GAFL;AAAA,MAGIC,aAAa,GAAG,IAAI5B,IAAJ,CAASwB,GAAT,CAHpB;AAAA,MAIIK,WAAW,GAAG,IAAI7B,IAAJ,CAASwB,GAAT,CAJlB;AAAA,MAKIM,SAAS,GAAGP,IAAI,CAACQ,SAAL,CAAeZ,MAAf,EAAuBC,MAAvB,CALhB;AAAA,MAMIY,OAAO,GAAGT,IAAI,CAACQ,SAAL,CAAeV,IAAf,EAAqBC,IAArB,CANd;AAAA,MAOIZ,SAAS,GAAG,KAAKA,SAPrB;AAAA,MAQID,gBAAgB,GAAG,KAAKA,gBAR5B;AAAA,MASIG,MAAM,GAAG,KAAKA,MATlB;AAAA,MAUIqB,GAAG,GAAGC,IAAI,CAACD,GAVf;AAAA,MAUoBE,KAAK,GAAGD,IAAI,CAACC,KAVjC;AAAA,MAWIC,IAXJ;AAAA,MAWUC,SAXV;AAAA,MAWqBC,QAXrB;AAAA,MAW+BC,CAX/B;AAAA,MAWkCC,CAXlC;AAAA,MAWqCC,CAXrC;AAAA,MAWwCC,CAXxC;AAAA,MAW2CC,EAX3C;AAAA,MAYIC,QAAQ,GAAG,CAZf;AAAA,MAYkBC,MAAM,GAAG,CAZ3B,CAD0E,CAe1E;AACA;;;AACAf,EAAAA,SAAS,CAACgB,CAAV,GAAc,CAAd;AACAhB,EAAAA,SAAS,CAACH,CAAV,GAAc,CAAd;AACAC,EAAAA,aAAa,CAACmB,IAAd,CAAmBjB,SAAnB;AACAA,EAAAA,SAAS,CAACkB,MAAV,GAAmBJ,QAAnB,CApB0E,CAsB1E;AACA;;AACAZ,EAAAA,OAAO,CAACc,CAAR,GAAY,CAAZ;AACAd,EAAAA,OAAO,CAACL,CAAR,GAAY,CAAZ;AACAE,EAAAA,WAAW,CAACkB,IAAZ,CAAiBf,OAAjB;AACAA,EAAAA,OAAO,CAACgB,MAAR,GAAiBH,MAAjB,CA3B0E,CA6B1E;;AACA,SAAO,CAACjB,aAAa,CAACqB,KAAd,EAAD,IAA0B,CAACpB,WAAW,CAACoB,KAAZ,EAAlC,EAAuD;AAEnD;AACAb,IAAAA,IAAI,GAAGR,aAAa,CAACsB,GAAd,EAAP;AACAd,IAAAA,IAAI,CAACe,MAAL,GAAc,IAAd,CAJmD,CAMnD;;AACAd,IAAAA,SAAS,GAAGd,IAAI,CAAC6B,YAAL,CAAkBhB,IAAlB,EAAwB3B,gBAAxB,CAAZ;;AACA,SAAK8B,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGH,SAAS,CAACgB,MAA1B,EAAkCd,CAAC,GAAGC,CAAtC,EAAyC,EAAED,CAA3C,EAA8C;AAC1CD,MAAAA,QAAQ,GAAGD,SAAS,CAACE,CAAD,CAApB;;AAEA,UAAID,QAAQ,CAACa,MAAb,EAAqB;AACjB;AACH;;AACD,UAAIb,QAAQ,CAACU,MAAT,KAAoBH,MAAxB,EAAgC;AAC5B,eAAO3C,IAAI,CAACoD,WAAL,CAAiBlB,IAAjB,EAAuBE,QAAvB,CAAP;AACH;;AAEDG,MAAAA,CAAC,GAAGH,QAAQ,CAACG,CAAb;AACAC,MAAAA,CAAC,GAAGJ,QAAQ,CAACI,CAAb,CAX0C,CAa1C;AACA;;AACAC,MAAAA,EAAE,GAAGP,IAAI,CAACU,CAAL,IAAWL,CAAC,GAAGL,IAAI,CAACK,CAAT,KAAe,CAAf,IAAoBC,CAAC,GAAGN,IAAI,CAACM,CAAT,KAAe,CAApC,GAAyC,CAAzC,GAA6CP,KAAvD,CAAL,CAf0C,CAiB1C;AACA;;AACA,UAAI,CAACG,QAAQ,CAACU,MAAV,IAAoBL,EAAE,GAAGL,QAAQ,CAACQ,CAAtC,EAAyC;AACrCR,QAAAA,QAAQ,CAACQ,CAAT,GAAaH,EAAb;AACAL,QAAAA,QAAQ,CAACiB,CAAT,GAAajB,QAAQ,CAACiB,CAAT,IACT3C,MAAM,GAAGF,SAAS,CAACuB,GAAG,CAACQ,CAAC,GAAGpB,IAAL,CAAJ,EAAgBY,GAAG,CAACS,CAAC,GAAGpB,IAAL,CAAnB,CADtB;AAEAgB,QAAAA,QAAQ,CAACX,CAAT,GAAaW,QAAQ,CAACQ,CAAT,GAAaR,QAAQ,CAACiB,CAAnC;AACAjB,QAAAA,QAAQ,CAACkB,MAAT,GAAkBpB,IAAlB;;AAEA,YAAI,CAACE,QAAQ,CAACU,MAAd,EAAsB;AAClBpB,UAAAA,aAAa,CAACmB,IAAd,CAAmBT,QAAnB;AACAA,UAAAA,QAAQ,CAACU,MAAT,GAAkBJ,QAAlB;AACH,SAHD,MAGO;AACH;AACA;AACA;AACAhB,UAAAA,aAAa,CAAC6B,UAAd,CAAyBnB,QAAzB;AACH;AACJ;AACJ,KA5CkD,CA4CjD;AAGF;;;AACAF,IAAAA,IAAI,GAAGP,WAAW,CAACqB,GAAZ,EAAP;AACAd,IAAAA,IAAI,CAACe,MAAL,GAAc,IAAd,CAjDmD,CAmDnD;;AACAd,IAAAA,SAAS,GAAGd,IAAI,CAAC6B,YAAL,CAAkBhB,IAAlB,EAAwB3B,gBAAxB,CAAZ;;AACA,SAAK8B,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGH,SAAS,CAACgB,MAA1B,EAAkCd,CAAC,GAAGC,CAAtC,EAAyC,EAAED,CAA3C,EAA8C;AAC1CD,MAAAA,QAAQ,GAAGD,SAAS,CAACE,CAAD,CAApB;;AAEA,UAAID,QAAQ,CAACa,MAAb,EAAqB;AACjB;AACH;;AACD,UAAIb,QAAQ,CAACU,MAAT,KAAoBJ,QAAxB,EAAkC;AAC9B,eAAO1C,IAAI,CAACoD,WAAL,CAAiBhB,QAAjB,EAA2BF,IAA3B,CAAP;AACH;;AAEDK,MAAAA,CAAC,GAAGH,QAAQ,CAACG,CAAb;AACAC,MAAAA,CAAC,GAAGJ,QAAQ,CAACI,CAAb,CAX0C,CAa1C;AACA;;AACAC,MAAAA,EAAE,GAAGP,IAAI,CAACU,CAAL,IAAWL,CAAC,GAAGL,IAAI,CAACK,CAAT,KAAe,CAAf,IAAoBC,CAAC,GAAGN,IAAI,CAACM,CAAT,KAAe,CAApC,GAAyC,CAAzC,GAA6CP,KAAvD,CAAL,CAf0C,CAiB1C;AACA;;AACA,UAAI,CAACG,QAAQ,CAACU,MAAV,IAAoBL,EAAE,GAAGL,QAAQ,CAACQ,CAAtC,EAAyC;AACrCR,QAAAA,QAAQ,CAACQ,CAAT,GAAaH,EAAb;AACAL,QAAAA,QAAQ,CAACiB,CAAT,GAAajB,QAAQ,CAACiB,CAAT,IACT3C,MAAM,GAAGF,SAAS,CAACuB,GAAG,CAACQ,CAAC,GAAGtB,MAAL,CAAJ,EAAkBc,GAAG,CAACS,CAAC,GAAGtB,MAAL,CAArB,CADtB;AAEAkB,QAAAA,QAAQ,CAACX,CAAT,GAAaW,QAAQ,CAACQ,CAAT,GAAaR,QAAQ,CAACiB,CAAnC;AACAjB,QAAAA,QAAQ,CAACkB,MAAT,GAAkBpB,IAAlB;;AAEA,YAAI,CAACE,QAAQ,CAACU,MAAd,EAAsB;AAClBnB,UAAAA,WAAW,CAACkB,IAAZ,CAAiBT,QAAjB;AACAA,UAAAA,QAAQ,CAACU,MAAT,GAAkBH,MAAlB;AACH,SAHD,MAGO;AACH;AACA;AACA;AACAhB,UAAAA,WAAW,CAAC4B,UAAZ,CAAuBnB,QAAvB;AACH;AACJ;AACJ,KAzFkD,CAyFjD;;AACL,GAxHyE,CAwHxE;AAEF;;;AACA,SAAO,EAAP;AACH,CA5HD;;AA8HAoB,MAAM,CAACC,OAAP,GAAiBtD,aAAjB","sourcesContent":["var Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * A* path-finder.\r\n * based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction BiAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    //When diagonal movement is allowed the manhattan heuristic is not admissible\r\n    //It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBiAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var cmp = function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        },\r\n        startOpenList = new Heap(cmp),\r\n        endOpenList = new Heap(cmp),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng,\r\n        BY_START = 1, BY_END = 2;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    // and push it into the start open list\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n    startOpenList.push(startNode);\r\n    startNode.opened = BY_START;\r\n\r\n    // set the `g` and `f` value of the end node to be 0\r\n    // and push it into the open open list\r\n    endNode.g = 0;\r\n    endNode.f = 0;\r\n    endOpenList.push(endNode);\r\n    endNode.opened = BY_END;\r\n\r\n    // while both the open lists are not empty\r\n    while (!startOpenList.empty() && !endOpenList.empty()) {\r\n\r\n        // pop the position of start node which has the minimum `f` value.\r\n        node = startOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_END) {\r\n                return Util.biBacktrace(node, neighbor);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    startOpenList.push(neighbor);\r\n                    neighbor.opened = BY_START;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    startOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n\r\n\r\n        // pop the position of end node which has the minimum `f` value.\r\n        node = endOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_START) {\r\n                return Util.biBacktrace(neighbor, node);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - startX), abs(y - startY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    endOpenList.push(neighbor);\r\n                    neighbor.opened = BY_END;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    endOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BiAStarFinder;\r\n"]},"metadata":{},"sourceType":"script"}