{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultLinkFactory = void 0;\n\nconst React = require(\"react\");\n\nconst DefaultLinkModel_1 = require(\"./DefaultLinkModel\");\n\nconst DefaultLinkWidget_1 = require(\"./DefaultLinkWidget\");\n\nconst styled_1 = require(\"@emotion/styled\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nconst react_1 = require(\"@emotion/react\");\n\nvar S;\n\n(function (S) {\n  S.Keyframes = react_1.keyframes`\n\t\tfrom {\n\t\t\tstroke-dashoffset: 24;\n\t\t}\n\t\tto {\n\t\t\tstroke-dashoffset: 0;\n\t\t}\n\t`;\n  const selected = react_1.css`\n\t\tstroke-dasharray: 10, 2;\n\t\tanimation: ${S.Keyframes} 1s linear infinite;\n\t`;\n  S.Path = styled_1.default.path`\n\t\t${p => p.selected && selected};\n\t\tfill: none;\n\t\tpointer-events: auto;\n\t`;\n})(S || (S = {}));\n\nclass DefaultLinkFactory extends react_canvas_core_1.AbstractReactFactory {\n  constructor() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n    super(type);\n  }\n\n  generateReactWidget(event) {\n    return React.createElement(DefaultLinkWidget_1.DefaultLinkWidget, {\n      link: event.model,\n      diagramEngine: this.engine\n    });\n  }\n\n  generateModel(event) {\n    return new DefaultLinkModel_1.DefaultLinkModel();\n  }\n\n  generateLinkSegment(model, selected, path) {\n    return React.createElement(S.Path, {\n      selected: selected,\n      stroke: selected ? model.getOptions().selectedColor : model.getOptions().color,\n      strokeWidth: model.getOptions().width,\n      d: path\n    });\n  }\n\n}\n\nexports.DefaultLinkFactory = DefaultLinkFactory;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAEA,IAAUA,CAAV;;AAAA,WAAUA,CAAV,EAAW;AACGA,gBAAYC,iBAAS;;;;;;;EAArB;AASb,QAAMC,QAAQ,GAAGD,WAAG;;eAEND,WAAS;EAFvB;AAKaA,WAAOG,iBAAOC,IAA2B;IAClDC,CAAD,IAAOA,CAAC,CAACH,QAAF,IAAcA,QAAQ;;;EADnB;AAKb,CApBD,EAAUF,CAAC,KAADA,CAAC,MAAX;;AAsBA,MAAaM,kBAAb,SAA0FC,wCAA1F,CAGC;AACAC,gBAA4B;AAAA,QAAhBC,IAAgB,uEAAT,SAAS;AAC3B,UAAMA,IAAN;AACA;;AAEDC,qBAAmB,CAACC,KAAD,EAAM;AACxB,WAAOC,oBAACC,qCAAD,EAAkB;AAACC,UAAI,EAAEH,KAAK,CAACI,KAAb;AAAoBC,mBAAa,EAAE,KAAKC;AAAxC,KAAlB,CAAP;AACA;;AAEDC,eAAa,CAACP,KAAD,EAAM;AAClB,WAAO,IAAIQ,mCAAJ,EAAP;AACA;;AAEDC,qBAAmB,CAACL,KAAD,EAAcb,QAAd,EAAiCE,IAAjC,EAA6C;AAC/D,WACCQ,oBAACZ,CAAC,CAACqB,IAAH,EAAO;AACNnB,cAAQ,EAAEA,QADJ;AAENoB,YAAM,EAAEpB,QAAQ,GAAGa,KAAK,CAACQ,UAAN,GAAmBC,aAAtB,GAAsCT,KAAK,CAACQ,UAAN,GAAmBE,KAFnE;AAGNC,iBAAW,EAAEX,KAAK,CAACQ,UAAN,GAAmBI,KAH1B;AAINC,OAAC,EAAExB;AAJG,KAAP,CADD;AAQA;;AAtBD;;AAHDyB","names":["S","react_1","selected","styled_1","path","p","DefaultLinkFactory","react_canvas_core_1","constructor","type","generateReactWidget","event","React","DefaultLinkWidget_1","link","model","diagramEngine","engine","generateModel","DefaultLinkModel_1","generateLinkSegment","Path","stroke","getOptions","selectedColor","color","strokeWidth","width","d","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-defaults\\src\\link\\DefaultLinkFactory.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DefaultLinkModel } from './DefaultLinkModel';\nimport { DefaultLinkWidget } from './DefaultLinkWidget';\nimport styled from '@emotion/styled';\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport { css, keyframes } from '@emotion/react';\n\nnamespace S {\n\texport const Keyframes = keyframes`\n\t\tfrom {\n\t\t\tstroke-dashoffset: 24;\n\t\t}\n\t\tto {\n\t\t\tstroke-dashoffset: 0;\n\t\t}\n\t`;\n\n\tconst selected = css`\n\t\tstroke-dasharray: 10, 2;\n\t\tanimation: ${Keyframes} 1s linear infinite;\n\t`;\n\n\texport const Path = styled.path<{ selected: boolean }>`\n\t\t${(p) => p.selected && selected};\n\t\tfill: none;\n\t\tpointer-events: auto;\n\t`;\n}\n\nexport class DefaultLinkFactory<Link extends DefaultLinkModel = DefaultLinkModel> extends AbstractReactFactory<\n\tLink,\n\tDiagramEngine\n> {\n\tconstructor(type = 'default') {\n\t\tsuper(type);\n\t}\n\n\tgenerateReactWidget(event): JSX.Element {\n\t\treturn <DefaultLinkWidget link={event.model} diagramEngine={this.engine} />;\n\t}\n\n\tgenerateModel(event): Link {\n\t\treturn new DefaultLinkModel() as Link;\n\t}\n\n\tgenerateLinkSegment(model: Link, selected: boolean, path: string) {\n\t\treturn (\n\t\t\t<S.Path\n\t\t\t\tselected={selected}\n\t\t\t\tstroke={selected ? model.getOptions().selectedColor : model.getOptions().color}\n\t\t\t\tstrokeWidth={model.getOptions().width}\n\t\t\t\td={path}\n\t\t\t/>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}