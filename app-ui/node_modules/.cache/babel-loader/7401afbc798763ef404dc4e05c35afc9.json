{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CanvasModel = void 0;\n\nconst _ = require(\"lodash\");\n\nconst BaseEntity_1 = require(\"../../core-models/BaseEntity\");\n\nclass CanvasModel extends BaseEntity_1.BaseEntity {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(Object.assign({\n      zoom: 100,\n      gridSize: 0,\n      offsetX: 0,\n      offsetY: 0\n    }, options));\n    this.layers = [];\n  }\n\n  getSelectionEntities() {\n    return _.flatMap(this.layers, layer => {\n      return layer.getSelectionEntities();\n    });\n  }\n\n  getSelectedEntities() {\n    return _.filter(this.getSelectionEntities(), ob => {\n      return ob.isSelected();\n    });\n  }\n\n  clearSelection() {\n    _.forEach(this.getSelectedEntities(), element => {\n      element.setSelected(false);\n    });\n  }\n\n  getModels() {\n    return _.flatMap(this.layers, layer => {\n      return _.values(layer.getModels());\n    });\n  }\n\n  addLayer(layer) {\n    layer.setParent(this);\n    layer.registerListener({\n      entityRemoved: event => {}\n    });\n    this.layers.push(layer);\n  }\n\n  removeLayer(layer) {\n    const index = this.layers.indexOf(layer);\n\n    if (index !== -1) {\n      this.layers.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  getLayers() {\n    return this.layers;\n  }\n\n  setGridSize() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this.options.gridSize = size;\n    this.fireEvent({\n      size: size\n    }, 'gridUpdated');\n  }\n\n  getGridPosition(pos) {\n    if (this.options.gridSize === 0) {\n      return pos;\n    }\n\n    return this.options.gridSize * Math.floor((pos + this.options.gridSize / 2) / this.options.gridSize);\n  }\n\n  deserializeModel(data, engine) {\n    const models = {};\n    const promises = {};\n    const resolvers = {};\n    const event = {\n      data: data,\n      engine: engine,\n      registerModel: model => {\n        models[model.getID()] = model;\n\n        if (resolvers[model.getID()]) {\n          resolvers[model.getID()](model);\n        }\n      },\n\n      getModel(id) {\n        if (models[id]) {\n          return Promise.resolve(models[id]);\n        }\n\n        if (!promises[id]) {\n          promises[id] = new Promise(resolve => {\n            resolvers[id] = resolve;\n          });\n        }\n\n        return promises[id];\n      }\n\n    };\n    this.deserialize(event);\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.options.offsetX = event.data.offsetX;\n    this.options.offsetY = event.data.offsetY;\n    this.options.zoom = event.data.zoom;\n    this.options.gridSize = event.data.gridSize;\n\n    _.forEach(event.data.layers, layer => {\n      const layerOb = event.engine.getFactoryForLayer(layer.type).generateModel({\n        initialConfig: layer\n      });\n      layerOb.deserialize(Object.assign(Object.assign({}, event), {\n        data: layer\n      }));\n      this.addLayer(layerOb);\n    });\n  }\n\n  serialize() {\n    return Object.assign(Object.assign({}, super.serialize()), {\n      offsetX: this.options.offsetX,\n      offsetY: this.options.offsetY,\n      zoom: this.options.zoom,\n      gridSize: this.options.gridSize,\n      layers: _.map(this.layers, layer => {\n        return layer.serialize();\n      })\n    });\n  }\n\n  setZoomLevel(zoom) {\n    this.options.zoom = zoom;\n    this.fireEvent({\n      zoom\n    }, 'zoomUpdated');\n  }\n\n  setOffset(offsetX, offsetY) {\n    this.options.offsetX = offsetX;\n    this.options.offsetY = offsetY;\n    this.fireEvent({\n      offsetX,\n      offsetY\n    }, 'offsetUpdated');\n  }\n\n  setOffsetX(offsetX) {\n    this.setOffset(offsetX, this.options.offsetY);\n  }\n\n  setOffsetY(offsetY) {\n    this.setOffset(this.options.offsetX, offsetY);\n  }\n\n  getOffsetY() {\n    return this.options.offsetY;\n  }\n\n  getOffsetX() {\n    return this.options.offsetX;\n  }\n\n  getZoomLevel() {\n    return this.options.zoom;\n  }\n\n}\n\nexports.CanvasModel = CanvasModel;","map":{"version":3,"mappings":"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","names":["CanvasModel","BaseEntity_1","constructor","options","Object","zoom","gridSize","offsetX","offsetY","layers","getSelectionEntities","_","flatMap","layer","getSelectedEntities","filter","ob","isSelected","clearSelection","forEach","element","setSelected","getModels","values","addLayer","setParent","registerListener","entityRemoved","event","push","removeLayer","index","indexOf","splice","getLayers","setGridSize","size","fireEvent","getGridPosition","pos","Math","floor","deserializeModel","data","engine","models","promises","resolvers","registerModel","model","getID","getModel","id","Promise","resolve","deserialize","layerOb","getFactoryForLayer","type","generateModel","initialConfig","serialize","map","setZoomLevel","setOffset","setOffsetX","setOffsetY","getOffsetY","getOffsetX","getZoomLevel","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-canvas-core\\src\\entities\\canvas\\CanvasModel.ts"],"sourcesContent":["import * as _ from 'lodash';\nimport {\n\tBaseEntity,\n\tBaseEntityEvent,\n\tBaseEntityGenerics,\n\tBaseEntityListener,\n\tBaseEntityOptions,\n\tDeserializeEvent\n} from '../../core-models/BaseEntity';\nimport { LayerModel } from '../layer/LayerModel';\nimport { BaseModel } from '../../core-models/BaseModel';\nimport { CanvasEngine } from '../../CanvasEngine';\n\nexport interface DiagramListener extends BaseEntityListener {\n\toffsetUpdated?(event: BaseEntityEvent<CanvasModel> & { offsetX: number; offsetY: number }): void;\n\n\tzoomUpdated?(event: BaseEntityEvent<CanvasModel> & { zoom: number }): void;\n\n\tgridUpdated?(event: BaseEntityEvent<CanvasModel> & { size: number }): void;\n}\n\nexport interface DiagramModelOptions extends BaseEntityOptions {\n\toffsetX?: number;\n\toffsetY?: number;\n\tzoom?: number;\n\tgridSize?: number;\n}\n\nexport interface CanvasModelGenerics extends BaseEntityGenerics {\n\tLISTENER: DiagramListener;\n\tOPTIONS: DiagramModelOptions;\n\tLAYER: LayerModel;\n}\n\nexport class CanvasModel<G extends CanvasModelGenerics = CanvasModelGenerics> extends BaseEntity<G> {\n\tprotected layers: G['LAYER'][];\n\n\tconstructor(options: G['OPTIONS'] = {}) {\n\t\tsuper({\n\t\t\tzoom: 100,\n\t\t\tgridSize: 0,\n\t\t\toffsetX: 0,\n\t\t\toffsetY: 0,\n\t\t\t...options\n\t\t});\n\t\tthis.layers = [];\n\t}\n\n\tgetSelectionEntities(): BaseModel[] {\n\t\treturn _.flatMap(this.layers, (layer) => {\n\t\t\treturn layer.getSelectionEntities();\n\t\t});\n\t}\n\n\tgetSelectedEntities(): BaseModel[] {\n\t\treturn _.filter(this.getSelectionEntities(), (ob) => {\n\t\t\treturn ob.isSelected();\n\t\t});\n\t}\n\n\tclearSelection() {\n\t\t_.forEach(this.getSelectedEntities(), (element) => {\n\t\t\telement.setSelected(false);\n\t\t});\n\t}\n\n\tgetModels(): BaseModel[] {\n\t\treturn _.flatMap(this.layers, (layer) => {\n\t\t\treturn _.values(layer.getModels());\n\t\t});\n\t}\n\n\taddLayer(layer: LayerModel) {\n\t\tlayer.setParent(this);\n\t\tlayer.registerListener({\n\t\t\tentityRemoved: (event: BaseEntityEvent<BaseModel>): void => {}\n\t\t});\n\t\tthis.layers.push(layer);\n\t}\n\n\tremoveLayer(layer: LayerModel) {\n\t\tconst index = this.layers.indexOf(layer);\n\t\tif (index !== -1) {\n\t\t\tthis.layers.splice(index, 1);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tgetLayers() {\n\t\treturn this.layers;\n\t}\n\n\tsetGridSize(size: number = 0) {\n\t\tthis.options.gridSize = size;\n\t\tthis.fireEvent({ size: size }, 'gridUpdated');\n\t}\n\n\tgetGridPosition(pos: number) {\n\t\tif (this.options.gridSize === 0) {\n\t\t\treturn pos;\n\t\t}\n\t\treturn this.options.gridSize * Math.floor((pos + this.options.gridSize / 2) / this.options.gridSize);\n\t}\n\n\tdeserializeModel(data: ReturnType<this['serialize']>, engine: CanvasEngine) {\n\t\tconst models: {\n\t\t\t[id: string]: BaseModel;\n\t\t} = {};\n\t\tconst promises: {\n\t\t\t[id: string]: Promise<BaseModel>;\n\t\t} = {};\n\t\tconst resolvers: {\n\t\t\t[id: string]: (model: BaseModel) => any;\n\t\t} = {};\n\n\t\tconst event: DeserializeEvent = {\n\t\t\tdata: data,\n\t\t\tengine: engine,\n\t\t\tregisterModel: (model: BaseModel) => {\n\t\t\t\tmodels[model.getID()] = model;\n\t\t\t\tif (resolvers[model.getID()]) {\n\t\t\t\t\tresolvers[model.getID()](model);\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetModel<T extends BaseModel>(id: string): Promise<T> {\n\t\t\t\tif (models[id]) {\n\t\t\t\t\treturn Promise.resolve(models[id]) as Promise<T>;\n\t\t\t\t}\n\t\t\t\tif (!promises[id]) {\n\t\t\t\t\tpromises[id] = new Promise((resolve) => {\n\t\t\t\t\t\tresolvers[id] = resolve;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn promises[id] as Promise<T>;\n\t\t\t}\n\t\t};\n\t\tthis.deserialize(event);\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.offsetX = event.data.offsetX;\n\t\tthis.options.offsetY = event.data.offsetY;\n\t\tthis.options.zoom = event.data.zoom;\n\t\tthis.options.gridSize = event.data.gridSize;\n\t\t_.forEach(event.data.layers, (layer) => {\n\t\t\tconst layerOb = event.engine.getFactoryForLayer(layer.type).generateModel({\n\t\t\t\tinitialConfig: layer\n\t\t\t});\n\t\t\tlayerOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: layer\n\t\t\t});\n\t\t\tthis.addLayer(layerOb);\n\t\t});\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\toffsetX: this.options.offsetX,\n\t\t\toffsetY: this.options.offsetY,\n\t\t\tzoom: this.options.zoom,\n\t\t\tgridSize: this.options.gridSize,\n\t\t\tlayers: _.map(this.layers, (layer) => {\n\t\t\t\treturn layer.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tsetZoomLevel(zoom: number) {\n\t\tthis.options.zoom = zoom;\n\t\tthis.fireEvent({ zoom }, 'zoomUpdated');\n\t}\n\n\tsetOffset(offsetX: number, offsetY: number) {\n\t\tthis.options.offsetX = offsetX;\n\t\tthis.options.offsetY = offsetY;\n\t\tthis.fireEvent({ offsetX, offsetY }, 'offsetUpdated');\n\t}\n\n\tsetOffsetX(offsetX: number) {\n\t\tthis.setOffset(offsetX, this.options.offsetY);\n\t}\n\n\tsetOffsetY(offsetY: number) {\n\t\tthis.setOffset(this.options.offsetX, offsetY);\n\t}\n\n\tgetOffsetY() {\n\t\treturn this.options.offsetY;\n\t}\n\n\tgetOffsetX() {\n\t\treturn this.options.offsetX;\n\t}\n\n\tgetZoomLevel() {\n\t\treturn this.options.zoom;\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}