{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DiagramModel = void 0;\n\nconst _ = require(\"lodash\");\n\nconst LinkModel_1 = require(\"../entities/link/LinkModel\");\n\nconst NodeModel_1 = require(\"../entities/node/NodeModel\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nconst NodeLayerModel_1 = require(\"../entities/node-layer/NodeLayerModel\");\n\nconst LinkLayerModel_1 = require(\"../entities/link-layer/LinkLayerModel\");\n\nclass DiagramModel extends react_canvas_core_1.CanvasModel {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options);\n    this.addLayer(new LinkLayerModel_1.LinkLayerModel());\n    this.addLayer(new NodeLayerModel_1.NodeLayerModel());\n  }\n\n  deserialize(event) {\n    this.layers = [];\n    super.deserialize(event);\n  }\n\n  addLayer(layer) {\n    super.addLayer(layer);\n\n    if (layer instanceof NodeLayerModel_1.NodeLayerModel) {\n      this.activeNodeLayer = layer;\n    }\n\n    if (layer instanceof LinkLayerModel_1.LinkLayerModel) {\n      this.activeLinkLayer = layer;\n    }\n  }\n\n  getLinkLayers() {\n    return _.filter(this.layers, layer => {\n      return layer instanceof LinkLayerModel_1.LinkLayerModel;\n    });\n  }\n\n  getNodeLayers() {\n    return _.filter(this.layers, layer => {\n      return layer instanceof NodeLayerModel_1.NodeLayerModel;\n    });\n  }\n\n  getActiveNodeLayer() {\n    if (!this.activeNodeLayer) {\n      const layers = this.getNodeLayers();\n\n      if (layers.length === 0) {\n        this.addLayer(new NodeLayerModel_1.NodeLayerModel());\n      } else {\n        this.activeNodeLayer = layers[0];\n      }\n    }\n\n    return this.activeNodeLayer;\n  }\n\n  getActiveLinkLayer() {\n    if (!this.activeLinkLayer) {\n      const layers = this.getLinkLayers();\n\n      if (layers.length === 0) {\n        this.addLayer(new LinkLayerModel_1.LinkLayerModel());\n      } else {\n        this.activeLinkLayer = layers[0];\n      }\n    }\n\n    return this.activeLinkLayer;\n  }\n\n  getNode(node) {\n    for (const layer of this.getNodeLayers()) {\n      const model = layer.getModel(node);\n\n      if (model) {\n        return model;\n      }\n    }\n  }\n\n  getLink(link) {\n    for (const layer of this.getLinkLayers()) {\n      const model = layer.getModel(link);\n\n      if (model) {\n        return model;\n      }\n    }\n  }\n\n  addAll() {\n    for (var _len = arguments.length, models = new Array(_len), _key = 0; _key < _len; _key++) {\n      models[_key] = arguments[_key];\n    }\n\n    _.forEach(models, model => {\n      if (model instanceof LinkModel_1.LinkModel) {\n        this.addLink(model);\n      } else if (model instanceof NodeModel_1.NodeModel) {\n        this.addNode(model);\n      }\n    });\n\n    return models;\n  }\n\n  addLink(link) {\n    this.getActiveLinkLayer().addModel(link);\n    this.fireEvent({\n      link,\n      isCreated: true\n    }, 'linksUpdated');\n    return link;\n  }\n\n  addNode(node) {\n    this.getActiveNodeLayer().addModel(node);\n    this.fireEvent({\n      node,\n      isCreated: true\n    }, 'nodesUpdated');\n    return node;\n  }\n\n  removeLink(link) {\n    const removed = _.some(this.getLinkLayers(), layer => {\n      return layer.removeModel(link);\n    });\n\n    if (removed) {\n      this.fireEvent({\n        link,\n        isCreated: false\n      }, 'linksUpdated');\n    }\n  }\n\n  removeNode(node) {\n    const removed = _.some(this.getNodeLayers(), layer => {\n      return layer.removeModel(node);\n    });\n\n    if (removed) {\n      this.fireEvent({\n        node,\n        isCreated: false\n      }, 'nodesUpdated');\n    }\n  }\n\n  getLinks() {\n    return _.flatMap(this.getLinkLayers(), layer => {\n      return _.values(layer.getModels());\n    });\n  }\n\n  getNodes() {\n    return _.flatMap(this.getNodeLayers(), layer => {\n      return _.values(layer.getModels());\n    });\n  }\n\n}\n\nexports.DiagramModel = DiagramModel;","map":{"version":3,"mappings":"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","names":["DiagramModel","react_canvas_core_1","constructor","options","addLayer","LinkLayerModel_1","NodeLayerModel_1","deserialize","event","layers","layer","activeNodeLayer","activeLinkLayer","getLinkLayers","_","filter","getNodeLayers","getActiveNodeLayer","length","getActiveLinkLayer","getNode","node","model","getModel","getLink","link","addAll","models","forEach","LinkModel_1","addLink","NodeModel_1","addNode","addModel","fireEvent","isCreated","removeLink","removed","some","removeModel","removeNode","getLinks","flatMap","values","getModels","getNodes","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-core\\src\\models\\DiagramModel.ts"],"sourcesContent":["import * as _ from 'lodash';\nimport { LinkModel } from '../entities/link/LinkModel';\nimport { NodeModel } from '../entities/node/NodeModel';\nimport {\n\tBaseEntityEvent,\n\tBaseEntityListener,\n\tBaseModel,\n\tCanvasModel,\n\tCanvasModelGenerics,\n\tLayerModel,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { NodeLayerModel } from '../entities/node-layer/NodeLayerModel';\nimport { LinkLayerModel } from '../entities/link-layer/LinkLayerModel';\n\nexport interface DiagramListener extends BaseEntityListener {\n\tnodesUpdated?(event: BaseEntityEvent & { node: NodeModel; isCreated: boolean }): void;\n\n\tlinksUpdated?(event: BaseEntityEvent & { link: LinkModel; isCreated: boolean }): void;\n}\n\nexport interface DiagramModelGenerics extends CanvasModelGenerics {\n\tLISTENER: DiagramListener;\n}\n\nexport class DiagramModel<G extends DiagramModelGenerics = DiagramModelGenerics> extends CanvasModel<G> {\n\tprotected activeNodeLayer: NodeLayerModel;\n\tprotected activeLinkLayer: LinkLayerModel;\n\n\tconstructor(options: G['OPTIONS'] = {}) {\n\t\tsuper(options);\n\t\tthis.addLayer(new LinkLayerModel());\n\t\tthis.addLayer(new NodeLayerModel());\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tthis.layers = [];\n\t\tsuper.deserialize(event);\n\t}\n\n\taddLayer(layer: LayerModel): void {\n\t\tsuper.addLayer(layer);\n\t\tif (layer instanceof NodeLayerModel) {\n\t\t\tthis.activeNodeLayer = layer;\n\t\t}\n\t\tif (layer instanceof LinkLayerModel) {\n\t\t\tthis.activeLinkLayer = layer;\n\t\t}\n\t}\n\n\tgetLinkLayers(): LinkLayerModel[] {\n\t\treturn _.filter(this.layers, (layer) => {\n\t\t\treturn layer instanceof LinkLayerModel;\n\t\t}) as LinkLayerModel[];\n\t}\n\n\tgetNodeLayers(): NodeLayerModel[] {\n\t\treturn _.filter(this.layers, (layer) => {\n\t\t\treturn layer instanceof NodeLayerModel;\n\t\t}) as NodeLayerModel[];\n\t}\n\n\tgetActiveNodeLayer(): NodeLayerModel {\n\t\tif (!this.activeNodeLayer) {\n\t\t\tconst layers = this.getNodeLayers();\n\t\t\tif (layers.length === 0) {\n\t\t\t\tthis.addLayer(new NodeLayerModel());\n\t\t\t} else {\n\t\t\t\tthis.activeNodeLayer = layers[0];\n\t\t\t}\n\t\t}\n\t\treturn this.activeNodeLayer;\n\t}\n\n\tgetActiveLinkLayer(): LinkLayerModel {\n\t\tif (!this.activeLinkLayer) {\n\t\t\tconst layers = this.getLinkLayers();\n\t\t\tif (layers.length === 0) {\n\t\t\t\tthis.addLayer(new LinkLayerModel());\n\t\t\t} else {\n\t\t\t\tthis.activeLinkLayer = layers[0];\n\t\t\t}\n\t\t}\n\t\treturn this.activeLinkLayer;\n\t}\n\n\tgetNode(node: string): NodeModel {\n\t\tfor (const layer of this.getNodeLayers()) {\n\t\t\tconst model = layer.getModel(node);\n\t\t\tif (model) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetLink(link: string): LinkModel {\n\t\tfor (const layer of this.getLinkLayers()) {\n\t\t\tconst model = layer.getModel(link);\n\t\t\tif (model) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\t}\n\n\taddAll(...models: BaseModel[]): BaseModel[] {\n\t\t_.forEach(models, (model) => {\n\t\t\tif (model instanceof LinkModel) {\n\t\t\t\tthis.addLink(model);\n\t\t\t} else if (model instanceof NodeModel) {\n\t\t\t\tthis.addNode(model);\n\t\t\t}\n\t\t});\n\t\treturn models;\n\t}\n\n\taddLink(link: LinkModel): LinkModel {\n\t\tthis.getActiveLinkLayer().addModel(link);\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tlink,\n\t\t\t\tisCreated: true\n\t\t\t},\n\t\t\t'linksUpdated'\n\t\t);\n\t\treturn link;\n\t}\n\n\taddNode(node: NodeModel): NodeModel {\n\t\tthis.getActiveNodeLayer().addModel(node);\n\t\tthis.fireEvent({ node, isCreated: true }, 'nodesUpdated');\n\t\treturn node;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tconst removed = _.some(this.getLinkLayers(), (layer) => {\n\t\t\treturn layer.removeModel(link);\n\t\t});\n\t\tif (removed) {\n\t\t\tthis.fireEvent({ link, isCreated: false }, 'linksUpdated');\n\t\t}\n\t}\n\n\tremoveNode(node: NodeModel) {\n\t\tconst removed = _.some(this.getNodeLayers(), (layer) => {\n\t\t\treturn layer.removeModel(node);\n\t\t});\n\t\tif (removed) {\n\t\t\tthis.fireEvent({ node, isCreated: false }, 'nodesUpdated');\n\t\t}\n\t}\n\n\tgetLinks(): LinkModel[] {\n\t\treturn _.flatMap(this.getLinkLayers(), (layer) => {\n\t\t\treturn _.values(layer.getModels());\n\t\t});\n\t}\n\n\tgetNodes(): NodeModel[] {\n\t\treturn _.flatMap(this.getNodeLayers(), (layer) => {\n\t\t\treturn _.values(layer.getModels());\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}