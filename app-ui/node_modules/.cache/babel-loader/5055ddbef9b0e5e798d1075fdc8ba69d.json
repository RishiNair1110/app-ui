{"ast":null,"code":"var Util = require('../core/Util');\n\nvar DiagonalMovement = require('../core/DiagonalMovement');\n/**\r\n * Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\n\n\nfunction BreadthFirstFinder(opt) {\n  opt = opt || {};\n  this.allowDiagonal = opt.allowDiagonal;\n  this.dontCrossCorners = opt.dontCrossCorners;\n  this.diagonalMovement = opt.diagonalMovement;\n\n  if (!this.diagonalMovement) {\n    if (!this.allowDiagonal) {\n      this.diagonalMovement = DiagonalMovement.Never;\n    } else {\n      if (this.dontCrossCorners) {\n        this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\n      } else {\n        this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\n      }\n    }\n  }\n}\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\n\n\nBreadthFirstFinder.prototype.findPath = function (startX, startY, endX, endY, grid) {\n  var openList = [],\n      diagonalMovement = this.diagonalMovement,\n      startNode = grid.getNodeAt(startX, startY),\n      endNode = grid.getNodeAt(endX, endY),\n      neighbors,\n      neighbor,\n      node,\n      i,\n      l; // push the start pos into the queue\n\n  openList.push(startNode);\n  startNode.opened = true; // while the queue is not empty\n\n  while (openList.length) {\n    // take the front node from the queue\n    node = openList.shift();\n    node.closed = true; // reached the end position\n\n    if (node === endNode) {\n      return Util.backtrace(endNode);\n    }\n\n    neighbors = grid.getNeighbors(node, diagonalMovement);\n\n    for (i = 0, l = neighbors.length; i < l; ++i) {\n      neighbor = neighbors[i]; // skip this neighbor if it has been inspected before\n\n      if (neighbor.closed || neighbor.opened) {\n        continue;\n      }\n\n      openList.push(neighbor);\n      neighbor.opened = true;\n      neighbor.parent = node;\n    }\n  } // fail to find the path\n\n\n  return [];\n};\n\nmodule.exports = BreadthFirstFinder;","map":{"version":3,"sources":["C:/Users/nairr/app-ui/app-ui/node_modules/pathfinding/src/finders/BreadthFirstFinder.js"],"names":["Util","require","DiagonalMovement","BreadthFirstFinder","opt","allowDiagonal","dontCrossCorners","diagonalMovement","Never","OnlyWhenNoObstacles","IfAtMostOneObstacle","prototype","findPath","startX","startY","endX","endY","grid","openList","startNode","getNodeAt","endNode","neighbors","neighbor","node","i","l","push","opened","length","shift","closed","backtrace","getNeighbors","parent","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAAlB;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,0BAAD,CAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,kBAAT,CAA4BC,GAA5B,EAAiC;AAC7BA,EAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AACA,OAAKC,aAAL,GAAqBD,GAAG,CAACC,aAAzB;AACA,OAAKC,gBAAL,GAAwBF,GAAG,CAACE,gBAA5B;AACA,OAAKC,gBAAL,GAAwBH,GAAG,CAACG,gBAA5B;;AAEA,MAAI,CAAC,KAAKA,gBAAV,EAA4B;AACxB,QAAI,CAAC,KAAKF,aAAV,EAAyB;AACrB,WAAKE,gBAAL,GAAwBL,gBAAgB,CAACM,KAAzC;AACH,KAFD,MAEO;AACH,UAAI,KAAKF,gBAAT,EAA2B;AACvB,aAAKC,gBAAL,GAAwBL,gBAAgB,CAACO,mBAAzC;AACH,OAFD,MAEO;AACH,aAAKF,gBAAL,GAAwBL,gBAAgB,CAACQ,mBAAzC;AACH;AACJ;AACJ;AACJ;AAED;AACA;AACA;AACA;AACA;;;AACAP,kBAAkB,CAACQ,SAAnB,CAA6BC,QAA7B,GAAwC,UAASC,MAAT,EAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2C;AAC/E,MAAIC,QAAQ,GAAG,EAAf;AAAA,MACIX,gBAAgB,GAAG,KAAKA,gBAD5B;AAAA,MAEIY,SAAS,GAAGF,IAAI,CAACG,SAAL,CAAeP,MAAf,EAAuBC,MAAvB,CAFhB;AAAA,MAGIO,OAAO,GAAGJ,IAAI,CAACG,SAAL,CAAeL,IAAf,EAAqBC,IAArB,CAHd;AAAA,MAIIM,SAJJ;AAAA,MAIeC,QAJf;AAAA,MAIyBC,IAJzB;AAAA,MAI+BC,CAJ/B;AAAA,MAIkCC,CAJlC,CAD+E,CAO/E;;AACAR,EAAAA,QAAQ,CAACS,IAAT,CAAcR,SAAd;AACAA,EAAAA,SAAS,CAACS,MAAV,GAAmB,IAAnB,CAT+E,CAW/E;;AACA,SAAOV,QAAQ,CAACW,MAAhB,EAAwB;AACpB;AACAL,IAAAA,IAAI,GAAGN,QAAQ,CAACY,KAAT,EAAP;AACAN,IAAAA,IAAI,CAACO,MAAL,GAAc,IAAd,CAHoB,CAKpB;;AACA,QAAIP,IAAI,KAAKH,OAAb,EAAsB;AAClB,aAAOrB,IAAI,CAACgC,SAAL,CAAeX,OAAf,CAAP;AACH;;AAEDC,IAAAA,SAAS,GAAGL,IAAI,CAACgB,YAAL,CAAkBT,IAAlB,EAAwBjB,gBAAxB,CAAZ;;AACA,SAAKkB,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGJ,SAAS,CAACO,MAA1B,EAAkCJ,CAAC,GAAGC,CAAtC,EAAyC,EAAED,CAA3C,EAA8C;AAC1CF,MAAAA,QAAQ,GAAGD,SAAS,CAACG,CAAD,CAApB,CAD0C,CAG1C;;AACA,UAAIF,QAAQ,CAACQ,MAAT,IAAmBR,QAAQ,CAACK,MAAhC,EAAwC;AACpC;AACH;;AAEDV,MAAAA,QAAQ,CAACS,IAAT,CAAcJ,QAAd;AACAA,MAAAA,QAAQ,CAACK,MAAT,GAAkB,IAAlB;AACAL,MAAAA,QAAQ,CAACW,MAAT,GAAkBV,IAAlB;AACH;AACJ,GAnC8E,CAqC/E;;;AACA,SAAO,EAAP;AACH,CAvCD;;AAyCAW,MAAM,CAACC,OAAP,GAAiBjC,kBAAjB","sourcesContent":["var Util = require('../core/Util');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BreadthFirstFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = [],\r\n        diagonalMovement = this.diagonalMovement,\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        neighbors, neighbor, node, i, l;\r\n\r\n    // push the start pos into the queue\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the queue is not empty\r\n    while (openList.length) {\r\n        // take the front node from the queue\r\n        node = openList.shift();\r\n        node.closed = true;\r\n\r\n        // reached the end position\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            // skip this neighbor if it has been inspected before\r\n            if (neighbor.closed || neighbor.opened) {\r\n                continue;\r\n            }\r\n\r\n            openList.push(neighbor);\r\n            neighbor.opened = true;\r\n            neighbor.parent = node;\r\n        }\r\n    }\r\n    \r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BreadthFirstFinder;\r\n"]},"metadata":{},"sourceType":"script"}