{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CanvasEngine = void 0;\n\nconst lodash_1 = require(\"lodash\");\n\nconst FactoryBank_1 = require(\"./core/FactoryBank\");\n\nconst BaseObserver_1 = require(\"./core/BaseObserver\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nconst ActionEventBus_1 = require(\"./core-actions/ActionEventBus\");\n\nconst PanAndZoomCanvasAction_1 = require(\"./actions/PanAndZoomCanvasAction\");\n\nconst ZoomCanvasAction_1 = require(\"./actions/ZoomCanvasAction\");\n\nconst DeleteItemsAction_1 = require(\"./actions/DeleteItemsAction\");\n\nconst StateMachine_1 = require(\"./core-state/StateMachine\");\n\nclass CanvasEngine extends BaseObserver_1.BaseObserver {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.model = null;\n    this.eventBus = new ActionEventBus_1.ActionEventBus(this);\n    this.stateMachine = new StateMachine_1.StateMachine(this);\n    this.layerFactories = new FactoryBank_1.FactoryBank();\n    this.registerFactoryBank(this.layerFactories);\n    /**\n     * Overrides the standard options with the possible given options\n     */\n\n    this.options = Object.assign({\n      registerDefaultDeleteItemsAction: true,\n      registerDefaultZoomCanvasAction: true,\n      repaintDebounceMs: 0\n    }, options);\n\n    if (this.options.registerDefaultZoomCanvasAction === true) {\n      this.eventBus.registerAction(new ZoomCanvasAction_1.ZoomCanvasAction());\n    } else if (this.options.registerDefaultPanAndZoomCanvasAction === true) {\n      this.eventBus.registerAction(new PanAndZoomCanvasAction_1.PanAndZoomCanvasAction());\n    }\n\n    if (this.options.registerDefaultDeleteItemsAction === true) {\n      this.eventBus.registerAction(new DeleteItemsAction_1.DeleteItemsAction());\n    }\n  }\n\n  getStateMachine() {\n    return this.stateMachine;\n  }\n\n  getRelativeMousePoint(event) {\n    const point = this.getRelativePoint(event.clientX, event.clientY);\n    return new geometry_1.Point((point.x - this.model.getOffsetX()) / (this.model.getZoomLevel() / 100.0), (point.y - this.model.getOffsetY()) / (this.model.getZoomLevel() / 100.0));\n  }\n\n  getRelativePoint(x, y) {\n    const canvasRect = this.canvas.getBoundingClientRect();\n    return new geometry_1.Point(x - canvasRect.left, y - canvasRect.top);\n  }\n\n  registerFactoryBank(factory) {\n    factory.registerListener({\n      factoryAdded: event => {\n        event.factory.setDiagramEngine(this);\n      },\n      factoryRemoved: event => {\n        event.factory.setDiagramEngine(null);\n      }\n    });\n  }\n\n  getActionEventBus() {\n    return this.eventBus;\n  }\n\n  getLayerFactories() {\n    return this.layerFactories;\n  }\n\n  getFactoryForLayer(layer) {\n    if (typeof layer === 'string') {\n      return this.layerFactories.getFactory(layer);\n    }\n\n    return this.layerFactories.getFactory(layer.getType());\n  }\n\n  setModel(model) {\n    this.model = model;\n\n    if (this.canvas) {\n      requestAnimationFrame(() => {\n        this.repaintCanvas();\n      });\n    }\n  }\n\n  getModel() {\n    return this.model;\n  }\n\n  repaintCanvas(promise) {\n    const {\n      repaintDebounceMs\n    } = this.options;\n    /**\n     * The actual repaint function\n     */\n\n    const repaint = () => {\n      this.iterateListeners(listener => {\n        if (listener.repaintCanvas) {\n          listener.repaintCanvas();\n        }\n      });\n    }; // if the `repaintDebounceMs` option is > 0, then apply the debounce\n\n\n    let repaintFn = repaint;\n\n    if (repaintDebounceMs > 0) {\n      repaintFn = lodash_1.debounce(repaint, repaintDebounceMs);\n    }\n\n    if (promise) {\n      return new Promise(resolve => {\n        const l = this.registerListener({\n          rendered: () => {\n            resolve();\n            l.deregister();\n          }\n        });\n        repaintFn();\n      });\n    }\n\n    repaintFn();\n  }\n\n  setCanvas(canvas) {\n    if (this.canvas !== canvas) {\n      this.canvas = canvas;\n\n      if (canvas) {\n        this.fireEvent({}, 'canvasReady');\n      }\n    }\n  }\n\n  getCanvas() {\n    return this.canvas;\n  }\n\n  getMouseElement(event) {\n    return null;\n  }\n\n  zoomToFit() {\n    const xFactor = this.canvas.clientWidth / this.canvas.scrollWidth;\n    const yFactor = this.canvas.clientHeight / this.canvas.scrollHeight;\n    const zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n    this.model.setZoomLevel(this.model.getZoomLevel() * zoomFactor);\n    this.model.setOffset(0, 0);\n    this.repaintCanvas();\n  }\n\n}\n\nexports.CanvasEngine = CanvasEngine;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;AAGA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAuBA,MAAaA,YAAb,SAGUC,2BAHV,CAGyB;AAQxBC,gBAA6C;AAAA,QAAjCC,OAAiC,uEAAF,EAAE;AAC5C;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,QAAL,GAAgB,IAAIC,+BAAJ,CAAmB,IAAnB,CAAhB;AACA,SAAKC,YAAL,GAAoB,IAAIC,2BAAJ,CAAiB,IAAjB,CAApB;AACA,SAAKC,cAAL,GAAsB,IAAIC,yBAAJ,EAAtB;AACA,SAAKC,mBAAL,CAAyB,KAAKF,cAA9B;AAEA;;;;AAGA,SAAKN,OAAL,GAAYS;AACXC,sCAAgC,EAAE,IADvB;AAEXC,qCAA+B,EAAE,IAFtB;AAGXC,uBAAiB,EAAE;AAHR,OAIRZ,OAJQ,CAAZ;;AAMA,QAAI,KAAKA,OAAL,CAAaW,+BAAb,KAAiD,IAArD,EAA2D;AAC1D,WAAKT,QAAL,CAAcW,cAAd,CAA6B,IAAIC,mCAAJ,EAA7B;AACA,KAFD,MAEO,IAAI,KAAKd,OAAL,CAAae,qCAAb,KAAuD,IAA3D,EAAiE;AACvE,WAAKb,QAAL,CAAcW,cAAd,CAA6B,IAAIG,+CAAJ,EAA7B;AACA;;AACD,QAAI,KAAKhB,OAAL,CAAaU,gCAAb,KAAkD,IAAtD,EAA4D;AAC3D,WAAKR,QAAL,CAAcW,cAAd,CAA6B,IAAII,qCAAJ,EAA7B;AACA;AACD;;AAEDC,iBAAe;AACd,WAAO,KAAKd,YAAZ;AACA;;AAEDe,uBAAqB,CAACC,KAAD,EAA4C;AAChE,UAAMC,KAAK,GAAG,KAAKC,gBAAL,CAAsBF,KAAK,CAACG,OAA5B,EAAqCH,KAAK,CAACI,OAA3C,CAAd;AACA,WAAO,IAAIC,gBAAJ,CACN,CAACJ,KAAK,CAACK,CAAN,GAAU,KAAKzB,KAAL,CAAW0B,UAAX,EAAX,KAAuC,KAAK1B,KAAL,CAAW2B,YAAX,KAA4B,KAAnE,CADM,EAEN,CAACP,KAAK,CAACQ,CAAN,GAAU,KAAK5B,KAAL,CAAW6B,UAAX,EAAX,KAAuC,KAAK7B,KAAL,CAAW2B,YAAX,KAA4B,KAAnE,CAFM,CAAP;AAIA;;AAEDN,kBAAgB,CAACI,CAAD,EAAIG,CAAJ,EAAK;AACpB,UAAME,UAAU,GAAG,KAAKC,MAAL,CAAYC,qBAAZ,EAAnB;AACA,WAAO,IAAIR,gBAAJ,CAAUC,CAAC,GAAGK,UAAU,CAACG,IAAzB,EAA+BL,CAAC,GAAGE,UAAU,CAACI,GAA9C,CAAP;AACA;;AAED3B,qBAAmB,CAAC4B,OAAD,EAAqB;AACvCA,WAAO,CAACC,gBAAR,CAAyB;AACxBC,kBAAY,EAAGlB,KAAD,IAAU;AACvBA,aAAK,CAACgB,OAAN,CAAcG,gBAAd,CAA+B,IAA/B;AACA,OAHuB;AAIxBC,oBAAc,EAAGpB,KAAD,IAAU;AACzBA,aAAK,CAACgB,OAAN,CAAcG,gBAAd,CAA+B,IAA/B;AACA;AANuB,KAAzB;AAQA;;AAEDE,mBAAiB;AAChB,WAAO,KAAKvC,QAAZ;AACA;;AAEDwC,mBAAiB;AAChB,WAAO,KAAKpC,cAAZ;AACA;;AAEDqC,oBAAkB,CAA6CC,KAA7C,EAAuE;AACxF,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC9B,aAAO,KAAKtC,cAAL,CAAoBuC,UAApB,CAA+BD,KAA/B,CAAP;AACA;;AACD,WAAO,KAAKtC,cAAL,CAAoBuC,UAApB,CAA+BD,KAAK,CAACE,OAAN,EAA/B,CAAP;AACA;;AAEDC,UAAQ,CAAC9C,KAAD,EAAS;AAChB,SAAKA,KAAL,GAAaA,KAAb;;AACA,QAAI,KAAK+B,MAAT,EAAiB;AAChBgB,2BAAqB,CAAC,MAAK;AAC1B,aAAKC,aAAL;AACA,OAFoB,CAArB;AAGA;AACD;;AAEDC,UAAQ;AACP,WAAO,KAAKjD,KAAZ;AACA;;AAIDgD,eAAa,CAACE,OAAD,EAAS;AACrB,UAAM;AAAEvC;AAAF,QAAwB,KAAKZ,OAAnC;AAEA;;;;AAGA,UAAMoD,OAAO,GAAG,MAAK;AACpB,WAAKC,gBAAL,CAAuBC,QAAD,IAAa;AAClC,YAAIA,QAAQ,CAACL,aAAb,EAA4B;AAC3BK,kBAAQ,CAACL,aAAT;AACA;AACD,OAJD;AAKA,KAND,CANqB,CAcrB;;;AACA,QAAIM,SAAS,GAAGH,OAAhB;;AAEA,QAAIxC,iBAAiB,GAAG,CAAxB,EAA2B;AAC1B2C,eAAS,GAAGC,kBAASJ,OAAT,EAAkBxC,iBAAlB,CAAZ;AACA;;AAED,QAAIuC,OAAJ,EAAa;AACZ,aAAO,IAAIM,OAAJ,CAAmBC,OAAD,IAAY;AACpC,cAAMC,CAAC,GAAG,KAAKtB,gBAAL,CAAsB;AAC/BuB,kBAAQ,EAAE,MAAK;AACdF,mBAAO;AACPC,aAAC,CAACE,UAAF;AACA;AAJ8B,SAAtB,CAAV;AAMAN,iBAAS;AACT,OARM,CAAP;AASA;;AAEDA,aAAS;AACT;;AAEDO,WAAS,CAAC9B,MAAD,EAAwB;AAChC,QAAI,KAAKA,MAAL,KAAgBA,MAApB,EAA4B;AAC3B,WAAKA,MAAL,GAAcA,MAAd;;AACA,UAAIA,MAAJ,EAAY;AACX,aAAK+B,SAAL,CAAe,EAAf,EAAmB,aAAnB;AACA;AACD;AACD;;AAEDC,WAAS;AACR,WAAO,KAAKhC,MAAZ;AACA;;AAEDiC,iBAAe,CAAC7C,KAAD,EAAkB;AAChC,WAAO,IAAP;AACA;;AAED8C,WAAS;AACR,UAAMC,OAAO,GAAG,KAAKnC,MAAL,CAAYoC,WAAZ,GAA0B,KAAKpC,MAAL,CAAYqC,WAAtD;AACA,UAAMC,OAAO,GAAG,KAAKtC,MAAL,CAAYuC,YAAZ,GAA2B,KAAKvC,MAAL,CAAYwC,YAAvD;AACA,UAAMC,UAAU,GAAGN,OAAO,GAAGG,OAAV,GAAoBH,OAApB,GAA8BG,OAAjD;AAEA,SAAKrE,KAAL,CAAWyE,YAAX,CAAwB,KAAKzE,KAAL,CAAW2B,YAAX,KAA4B6C,UAApD;AACA,SAAKxE,KAAL,CAAW0E,SAAX,CAAqB,CAArB,EAAwB,CAAxB;AACA,SAAK1B,aAAL;AACA;;AA1JuB;;AAHzB2B","names":["CanvasEngine","BaseObserver_1","constructor","options","model","eventBus","ActionEventBus_1","stateMachine","StateMachine_1","layerFactories","FactoryBank_1","registerFactoryBank","Object","registerDefaultDeleteItemsAction","registerDefaultZoomCanvasAction","repaintDebounceMs","registerAction","ZoomCanvasAction_1","registerDefaultPanAndZoomCanvasAction","PanAndZoomCanvasAction_1","DeleteItemsAction_1","getStateMachine","getRelativeMousePoint","event","point","getRelativePoint","clientX","clientY","geometry_1","x","getOffsetX","getZoomLevel","y","getOffsetY","canvasRect","canvas","getBoundingClientRect","left","top","factory","registerListener","factoryAdded","setDiagramEngine","factoryRemoved","getActionEventBus","getLayerFactories","getFactoryForLayer","layer","getFactory","getType","setModel","requestAnimationFrame","repaintCanvas","getModel","promise","repaint","iterateListeners","listener","repaintFn","lodash_1","Promise","resolve","l","rendered","deregister","setCanvas","fireEvent","getCanvas","getMouseElement","zoomToFit","xFactor","clientWidth","scrollWidth","yFactor","clientHeight","scrollHeight","zoomFactor","setZoomLevel","setOffset","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-canvas-core\\src\\CanvasEngine.ts"],"sourcesContent":["import { debounce } from 'lodash';\nimport { CanvasModel } from './entities/canvas/CanvasModel';\nimport { FactoryBank } from './core/FactoryBank';\nimport { AbstractReactFactory } from './core/AbstractReactFactory';\nimport { LayerModel } from './entities/layer/LayerModel';\nimport { BaseListener, BaseObserver } from './core/BaseObserver';\nimport { MouseEvent } from 'react';\nimport { BaseModel } from './core-models/BaseModel';\nimport { Point } from '@projectstorm/geometry';\nimport { ActionEventBus } from './core-actions/ActionEventBus';\nimport { PanAndZoomCanvasAction } from './actions/PanAndZoomCanvasAction';\nimport { ZoomCanvasAction } from './actions/ZoomCanvasAction';\nimport { DeleteItemsAction } from './actions/DeleteItemsAction';\nimport { StateMachine } from './core-state/StateMachine';\n\nexport interface CanvasEngineListener extends BaseListener {\n\tcanvasReady?(): void;\n\n\trepaintCanvas?(): void;\n\n\trendered?(): void;\n}\n\n/**\n * Defines the CanvasEngine options\n */\nexport interface CanvasEngineOptions {\n\tregisterDefaultDeleteItemsAction?: boolean;\n\tregisterDefaultPanAndZoomCanvasAction?: boolean;\n\tregisterDefaultZoomCanvasAction?: boolean;\n\t/**\n\t * Defines the debounce wait time in milliseconds if > 0\n\t */\n\trepaintDebounceMs?: number;\n}\n\nexport class CanvasEngine<\n\tL extends CanvasEngineListener = CanvasEngineListener,\n\tM extends CanvasModel = CanvasModel\n> extends BaseObserver<L> {\n\tprotected model: M;\n\tprotected layerFactories: FactoryBank<AbstractReactFactory<LayerModel>>;\n\tprotected canvas: HTMLDivElement;\n\tprotected eventBus: ActionEventBus;\n\tprotected stateMachine: StateMachine;\n\tprotected options: CanvasEngineOptions;\n\n\tconstructor(options: CanvasEngineOptions = {}) {\n\t\tsuper();\n\t\tthis.model = null;\n\t\tthis.eventBus = new ActionEventBus(this);\n\t\tthis.stateMachine = new StateMachine(this);\n\t\tthis.layerFactories = new FactoryBank();\n\t\tthis.registerFactoryBank(this.layerFactories);\n\n\t\t/**\n\t\t * Overrides the standard options with the possible given options\n\t\t */\n\t\tthis.options = {\n\t\t\tregisterDefaultDeleteItemsAction: true,\n\t\t\tregisterDefaultZoomCanvasAction: true,\n\t\t\trepaintDebounceMs: 0,\n\t\t\t...options\n\t\t};\n\t\tif (this.options.registerDefaultZoomCanvasAction === true) {\n\t\t\tthis.eventBus.registerAction(new ZoomCanvasAction());\n\t\t} else if (this.options.registerDefaultPanAndZoomCanvasAction === true) {\n\t\t\tthis.eventBus.registerAction(new PanAndZoomCanvasAction());\n\t\t}\n\t\tif (this.options.registerDefaultDeleteItemsAction === true) {\n\t\t\tthis.eventBus.registerAction(new DeleteItemsAction());\n\t\t}\n\t}\n\n\tgetStateMachine() {\n\t\treturn this.stateMachine;\n\t}\n\n\tgetRelativeMousePoint(event: { clientX: number; clientY: number }): Point {\n\t\tconst point = this.getRelativePoint(event.clientX, event.clientY);\n\t\treturn new Point(\n\t\t\t(point.x - this.model.getOffsetX()) / (this.model.getZoomLevel() / 100.0),\n\t\t\t(point.y - this.model.getOffsetY()) / (this.model.getZoomLevel() / 100.0)\n\t\t);\n\t}\n\n\tgetRelativePoint(x, y): Point {\n\t\tconst canvasRect = this.canvas.getBoundingClientRect();\n\t\treturn new Point(x - canvasRect.left, y - canvasRect.top);\n\t}\n\n\tregisterFactoryBank(factory: FactoryBank) {\n\t\tfactory.registerListener({\n\t\t\tfactoryAdded: (event) => {\n\t\t\t\tevent.factory.setDiagramEngine(this);\n\t\t\t},\n\t\t\tfactoryRemoved: (event) => {\n\t\t\t\tevent.factory.setDiagramEngine(null);\n\t\t\t}\n\t\t});\n\t}\n\n\tgetActionEventBus() {\n\t\treturn this.eventBus;\n\t}\n\n\tgetLayerFactories() {\n\t\treturn this.layerFactories;\n\t}\n\n\tgetFactoryForLayer<F extends AbstractReactFactory<LayerModel>>(layer: LayerModel | string) {\n\t\tif (typeof layer === 'string') {\n\t\t\treturn this.layerFactories.getFactory(layer);\n\t\t}\n\t\treturn this.layerFactories.getFactory(layer.getType());\n\t}\n\n\tsetModel(model: M) {\n\t\tthis.model = model;\n\t\tif (this.canvas) {\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis.repaintCanvas();\n\t\t\t});\n\t\t}\n\t}\n\n\tgetModel(): M {\n\t\treturn this.model;\n\t}\n\n\trepaintCanvas(promise: true): Promise<any>;\n\trepaintCanvas(): void;\n\trepaintCanvas(promise?): Promise<any> | void {\n\t\tconst { repaintDebounceMs } = this.options;\n\n\t\t/**\n\t\t * The actual repaint function\n\t\t */\n\t\tconst repaint = () => {\n\t\t\tthis.iterateListeners((listener) => {\n\t\t\t\tif (listener.repaintCanvas) {\n\t\t\t\t\tlistener.repaintCanvas();\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// if the `repaintDebounceMs` option is > 0, then apply the debounce\n\t\tlet repaintFn = repaint;\n\n\t\tif (repaintDebounceMs > 0) {\n\t\t\trepaintFn = debounce(repaint, repaintDebounceMs);\n\t\t}\n\n\t\tif (promise) {\n\t\t\treturn new Promise<void>((resolve) => {\n\t\t\t\tconst l = this.registerListener({\n\t\t\t\t\trendered: () => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\tl.deregister();\n\t\t\t\t\t}\n\t\t\t\t} as L);\n\t\t\t\trepaintFn();\n\t\t\t});\n\t\t}\n\n\t\trepaintFn();\n\t}\n\n\tsetCanvas(canvas?: HTMLDivElement) {\n\t\tif (this.canvas !== canvas) {\n\t\t\tthis.canvas = canvas;\n\t\t\tif (canvas) {\n\t\t\t\tthis.fireEvent({}, 'canvasReady');\n\t\t\t}\n\t\t}\n\t}\n\n\tgetCanvas() {\n\t\treturn this.canvas;\n\t}\n\n\tgetMouseElement(event: MouseEvent): BaseModel {\n\t\treturn null;\n\t}\n\n\tzoomToFit() {\n\t\tconst xFactor = this.canvas.clientWidth / this.canvas.scrollWidth;\n\t\tconst yFactor = this.canvas.clientHeight / this.canvas.scrollHeight;\n\t\tconst zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n\n\t\tthis.model.setZoomLevel(this.model.getZoomLevel() * zoomFactor);\n\t\tthis.model.setOffset(0, 0);\n\t\tthis.repaintCanvas();\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}