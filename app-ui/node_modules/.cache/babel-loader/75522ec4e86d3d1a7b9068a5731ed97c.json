{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractDisplacementState = void 0;\n\nconst State_1 = require(\"./State\");\n\nconst Action_1 = require(\"../core-actions/Action\");\n\nclass AbstractDisplacementState extends State_1.State {\n  constructor(options) {\n    super(options);\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.MOUSE_DOWN,\n      fire: actionEvent => {\n        const {\n          clientX,\n          clientY\n        } = actionEvent.event;\n        this.handleMoveStart(clientX, clientY);\n      }\n    }));\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.MOUSE_MOVE,\n      fire: actionEvent => {\n        const {\n          event\n        } = actionEvent;\n\n        if (event.buttons === 0) {\n          // If buttons is 0, it means the mouse is not down, the user may have released it\n          // outside of the canvas, then we eject the state\n          this.eject();\n          return;\n        }\n\n        const {\n          clientX,\n          clientY\n        } = event;\n        this.handleMove(clientX, clientY, event);\n      }\n    }));\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.MOUSE_UP,\n      fire: () => this.handleMoveEnd()\n    }));\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.TOUCH_START,\n      fire: actionEvent => {\n        const {\n          clientX,\n          clientY\n        } = actionEvent.event.touches[0];\n        this.handleMoveStart(clientX, clientY);\n      }\n    }));\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.TOUCH_MOVE,\n      fire: actionEvent => {\n        const {\n          event\n        } = actionEvent;\n        const {\n          clientX,\n          clientY\n        } = event.touches[0];\n        this.handleMove(clientX, clientY, event);\n      }\n    }));\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.TOUCH_END,\n      fire: () => this.handleMoveEnd()\n    }));\n  }\n\n  handleMoveStart(x, y) {\n    this.initialX = x;\n    this.initialY = y;\n    const rel = this.engine.getRelativePoint(x, y);\n    this.initialXRelative = rel.x;\n    this.initialYRelative = rel.y;\n  }\n\n  handleMove(x, y, event) {\n    this.fireMouseMoved({\n      displacementX: x - this.initialX,\n      displacementY: y - this.initialY,\n      virtualDisplacementX: (x - this.initialX) / (this.engine.getModel().getZoomLevel() / 100.0),\n      virtualDisplacementY: (y - this.initialY) / (this.engine.getModel().getZoomLevel() / 100.0),\n      event\n    });\n  }\n\n  handleMoveEnd() {\n    this.eject();\n  }\n\n}\n\nexports.AbstractDisplacementState = AbstractDisplacementState;","map":{"version":3,"mappings":"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","names":["AbstractDisplacementState","State_1","constructor","options","registerAction","Action_1","type","MOUSE_DOWN","fire","actionEvent","clientX","clientY","event","handleMoveStart","MOUSE_MOVE","buttons","eject","handleMove","MOUSE_UP","handleMoveEnd","TOUCH_START","touches","TOUCH_MOVE","TOUCH_END","x","y","initialX","initialY","rel","engine","getRelativePoint","initialXRelative","initialYRelative","fireMouseMoved","displacementX","displacementY","virtualDisplacementX","getModel","getZoomLevel","virtualDisplacementY","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-canvas-core\\src\\core-state\\AbstractDisplacementState.ts"],"sourcesContent":["import { State, StateOptions } from './State';\nimport { Action, ActionEvent, InputType } from '../core-actions/Action';\nimport { CanvasEngine } from '../CanvasEngine';\n\nexport interface AbstractDisplacementStateEvent {\n\tdisplacementX: number;\n\tdisplacementY: number;\n\tvirtualDisplacementX: number;\n\tvirtualDisplacementY: number;\n\tevent: React.MouseEvent | React.TouchEvent;\n}\n\nexport abstract class AbstractDisplacementState<E extends CanvasEngine = CanvasEngine> extends State<E> {\n\tinitialX: number;\n\tinitialY: number;\n\tinitialXRelative: number;\n\tinitialYRelative: number;\n\n\tconstructor(options: StateOptions) {\n\t\tsuper(options);\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (actionEvent: ActionEvent<React.MouseEvent>) => {\n\t\t\t\t\tconst { clientX, clientY } = actionEvent.event;\n\t\t\t\t\tthis.handleMoveStart(clientX, clientY);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_MOVE,\n\t\t\t\tfire: (actionEvent: ActionEvent<React.MouseEvent>) => {\n\t\t\t\t\tconst { event } = actionEvent;\n\n\t\t\t\t\tif (event.buttons === 0) {\n\t\t\t\t\t\t// If buttons is 0, it means the mouse is not down, the user may have released it\n\t\t\t\t\t\t// outside of the canvas, then we eject the state\n\t\t\t\t\t\tthis.eject();\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { clientX, clientY } = event;\n\t\t\t\t\tthis.handleMove(clientX, clientY, event);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\tfire: () => this.handleMoveEnd()\n\t\t\t})\n\t\t);\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.TOUCH_START,\n\t\t\t\tfire: (actionEvent: ActionEvent<React.TouchEvent>) => {\n\t\t\t\t\tconst { clientX, clientY } = actionEvent.event.touches[0];\n\t\t\t\t\tthis.handleMoveStart(clientX, clientY);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.TOUCH_MOVE,\n\t\t\t\tfire: (actionEvent: ActionEvent<React.TouchEvent>) => {\n\t\t\t\t\tconst { event } = actionEvent;\n\t\t\t\t\tconst { clientX, clientY } = event.touches[0];\n\t\t\t\t\tthis.handleMove(clientX, clientY, event);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.TOUCH_END,\n\t\t\t\tfire: () => this.handleMoveEnd()\n\t\t\t})\n\t\t);\n\t}\n\n\tprotected handleMoveStart(x: number, y: number): void {\n\t\tthis.initialX = x;\n\t\tthis.initialY = y;\n\t\tconst rel = this.engine.getRelativePoint(x, y);\n\t\tthis.initialXRelative = rel.x;\n\t\tthis.initialYRelative = rel.y;\n\t}\n\n\tprotected handleMove(x: number, y: number, event: React.MouseEvent | React.TouchEvent): void {\n\t\tthis.fireMouseMoved({\n\t\t\tdisplacementX: x - this.initialX,\n\t\t\tdisplacementY: y - this.initialY,\n\t\t\tvirtualDisplacementX: (x - this.initialX) / (this.engine.getModel().getZoomLevel() / 100.0),\n\t\t\tvirtualDisplacementY: (y - this.initialY) / (this.engine.getModel().getZoomLevel() / 100.0),\n\t\t\tevent\n\t\t});\n\t}\n\n\tprotected handleMoveEnd(): void {\n\t\tthis.eject();\n\t}\n\n\tabstract fireMouseMoved(event: AbstractDisplacementStateEvent);\n}\n"]},"metadata":{},"sourceType":"script"}