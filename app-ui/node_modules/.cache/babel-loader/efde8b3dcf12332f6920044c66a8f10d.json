{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nairr\\\\app-ui\\\\app-ui\\\\src\\\\BasicConnection.jsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DiagramEngine, DiagramModel, DefaultNodeModel, LinkModel, DiagramWidget, DefaultLinkModel } from \"storm-react-diagrams\";\nimport \"./app.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ElmArchitecture = () => {\n  //1) setup the diagram engine\n  var engine = new DiagramEngine();\n  engine.installDefaultFactories(); //2) setup the diagram model\n\n  var model = new DiagramModel(); //3-A) create a default node\n\n  var node1 = new DefaultNodeModel(\"Source\", \"rgb(0,192,255)\");\n  let port1 = node1.addOutPort(\" \");\n  node1.setPosition(100, 100); //3-B) create another default node\n\n  var node2 = new DefaultNodeModel(\"Destination\", \"rgb(192,255,0)\");\n  let port2 = node2.addInPort(\" \");\n  let port3 = node2.addOutPort(\" \");\n  node2.setPosition(400, 100); // link the ports\n\n  let link1 = port1.link(port2); //4) add the models to the root graph\n\n  model.addAll(node1, node2, link1); //5) load model into engine\n\n  engine.setDiagramModel(model); //6) render the diagram!\n\n  return /*#__PURE__*/_jsxDEV(DiagramWidget, {\n    className: \"srd-demo-canvas\",\n    diagramEngine: engine\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 12\n  }, this);\n};\n\n_c = ElmArchitecture;\n\nfunction BasicConnection() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"BasicConnection\",\n    children: /*#__PURE__*/_jsxDEV(ElmArchitecture, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = BasicConnection;\nexport default BasicConnection;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ElmArchitecture\");\n$RefreshReg$(_c2, \"BasicConnection\");","map":{"version":3,"sources":["C:/Users/nairr/app-ui/app-ui/src/BasicConnection.jsx"],"names":["React","ReactDOM","DiagramEngine","DiagramModel","DefaultNodeModel","LinkModel","DiagramWidget","DefaultLinkModel","ElmArchitecture","engine","installDefaultFactories","model","node1","port1","addOutPort","setPosition","node2","port2","addInPort","port3","link1","link","addAll","setDiagramModel","BasicConnection"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SACIC,aADJ,EAEIC,YAFJ,EAGIC,gBAHJ,EAIIC,SAJJ,EAKIC,aALJ,EAMIC,gBANJ,QAOO,sBAPP;AASA,OAAO,WAAP;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC1B;AACA,MAAIC,MAAM,GAAG,IAAIP,aAAJ,EAAb;AACAO,EAAAA,MAAM,CAACC,uBAAP,GAH0B,CAK1B;;AACA,MAAIC,KAAK,GAAG,IAAIR,YAAJ,EAAZ,CAN0B,CAQ1B;;AACA,MAAIS,KAAK,GAAG,IAAIR,gBAAJ,CAAqB,QAArB,EAA+B,gBAA/B,CAAZ;AACA,MAAIS,KAAK,GAAGD,KAAK,CAACE,UAAN,CAAiB,GAAjB,CAAZ;AACAF,EAAAA,KAAK,CAACG,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAX0B,CAa1B;;AACA,MAAIC,KAAK,GAAG,IAAIZ,gBAAJ,CAAqB,aAArB,EAAoC,gBAApC,CAAZ;AACA,MAAIa,KAAK,GAAGD,KAAK,CAACE,SAAN,CAAgB,GAAhB,CAAZ;AACA,MAAIC,KAAK,GAAGH,KAAK,CAACF,UAAN,CAAiB,GAAjB,CAAZ;AACAE,EAAAA,KAAK,CAACD,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAjB0B,CAmB1B;;AACA,MAAIK,KAAK,GAAGP,KAAK,CAACQ,IAAN,CAAWJ,KAAX,CAAZ,CApB0B,CAsB1B;;AACAN,EAAAA,KAAK,CAACW,MAAN,CAAaV,KAAb,EAAoBI,KAApB,EAA2BI,KAA3B,EAvB0B,CAyB1B;;AACAX,EAAAA,MAAM,CAACc,eAAP,CAAuBZ,KAAvB,EA1B0B,CA4B1B;;AACA,sBAAO,QAAC,aAAD;AAAe,IAAA,SAAS,EAAC,iBAAzB;AAA2C,IAAA,aAAa,EAAEF;AAA1D;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CA9BD;;KAAMD,e;;AAgCN,SAASgB,eAAT,GAA2B;AACvB,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,2BACI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;MANQA,e;AAOT,eAAeA,eAAf","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n    DiagramEngine,\r\n    DiagramModel,\r\n    DefaultNodeModel,\r\n    LinkModel,\r\n    DiagramWidget,\r\n    DefaultLinkModel\r\n} from \"storm-react-diagrams\";\r\n\r\nimport \"./app.css\";\r\n\r\nconst ElmArchitecture = () => {\r\n    //1) setup the diagram engine\r\n    var engine = new DiagramEngine();\r\n    engine.installDefaultFactories();\r\n\r\n    //2) setup the diagram model\r\n    var model = new DiagramModel();\r\n\r\n    //3-A) create a default node\r\n    var node1 = new DefaultNodeModel(\"Source\", \"rgb(0,192,255)\");\r\n    let port1 = node1.addOutPort(\" \");\r\n    node1.setPosition(100, 100);\r\n\r\n    //3-B) create another default node\r\n    var node2 = new DefaultNodeModel(\"Destination\", \"rgb(192,255,0)\");\r\n    let port2 = node2.addInPort(\" \");\r\n    let port3 = node2.addOutPort(\" \");\r\n    node2.setPosition(400, 100);\r\n\r\n    // link the ports\r\n    let link1 = port1.link(port2);\r\n\r\n    //4) add the models to the root graph\r\n    model.addAll(node1, node2, link1);\r\n\r\n    //5) load model into engine\r\n    engine.setDiagramModel(model);\r\n\r\n    //6) render the diagram!\r\n    return <DiagramWidget className=\"srd-demo-canvas\" diagramEngine={engine} />;\r\n};\r\n\r\nfunction BasicConnection() {\r\n    return (\r\n        <div className=\"BasicConnection\">\r\n            <ElmArchitecture />\r\n        </div>\r\n    );\r\n}\r\nexport default BasicConnection;"]},"metadata":{},"sourceType":"module"}