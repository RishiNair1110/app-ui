{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeModel = void 0;\n\nconst _ = require(\"lodash\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nclass NodeModel extends react_canvas_core_1.BasePositionModel {\n  constructor(options) {\n    super(options);\n    this.ports = {};\n    this.width = 0;\n    this.height = 0;\n  }\n\n  getBoundingBox() {\n    return new geometry_1.Rectangle(this.getPosition(), this.width, this.height);\n  }\n\n  setPosition(x, y) {\n    const old = this.position;\n\n    if (x instanceof geometry_1.Point) {\n      super.setPosition(x);\n    } else {\n      super.setPosition(x, y);\n    } //also update the port co-ordinates (for make glorious speed)\n\n\n    _.forEach(this.ports, port => {\n      port.setPosition(port.getX() + this.position.x - old.x, port.getY() + this.position.y - old.y);\n    });\n  }\n\n  deserialize(event) {\n    super.deserialize(event); //deserialize ports\n\n    _.forEach(event.data.ports, port => {\n      let portOb = event.engine.getFactoryForPort(port.type).generateModel({});\n      portOb.deserialize(Object.assign(Object.assign({}, event), {\n        data: port\n      })); // the links need these\n\n      event.registerModel(portOb);\n      this.addPort(portOb);\n    });\n  }\n\n  serialize() {\n    return Object.assign(Object.assign({}, super.serialize()), {\n      ports: _.map(this.ports, port => {\n        return port.serialize();\n      })\n    });\n  }\n\n  doClone() {\n    let lookupTable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let clone = arguments.length > 1 ? arguments[1] : undefined;\n    // also clone the ports\n    clone.ports = {};\n\n    _.forEach(this.ports, port => {\n      clone.addPort(port.clone(lookupTable));\n    });\n  }\n\n  remove() {\n    super.remove();\n\n    _.forEach(this.ports, port => {\n      _.forEach(port.getLinks(), link => {\n        link.remove();\n      });\n    });\n  }\n\n  getPortFromID(id) {\n    for (var i in this.ports) {\n      if (this.ports[i].getID() === id) {\n        return this.ports[i];\n      }\n    }\n\n    return null;\n  }\n\n  getLink(id) {\n    for (let portID in this.ports) {\n      const links = this.ports[portID].getLinks();\n\n      if (links[id]) {\n        return links[id];\n      }\n    }\n  }\n\n  getPort(name) {\n    return this.ports[name];\n  }\n\n  getPorts() {\n    return this.ports;\n  }\n\n  removePort(port) {\n    // clear the port from the links\n    for (let link of _.values(port.getLinks())) {\n      link.clearPort(port);\n    } //clear the parent node reference\n\n\n    if (this.ports[port.getName()]) {\n      this.ports[port.getName()].setParent(null);\n      delete this.ports[port.getName()];\n    }\n  }\n\n  addPort(port) {\n    port.setParent(this);\n    this.ports[port.getName()] = port;\n    return port;\n  }\n\n  updateDimensions(_ref) {\n    let {\n      width,\n      height\n    } = _ref;\n    this.width = width;\n    this.height = height;\n  }\n\n}\n\nexports.NodeModel = NodeModel;","map":{"version":3,"mappings":"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","names":["NodeModel","react_canvas_core_1","constructor","options","ports","width","height","getBoundingBox","geometry_1","getPosition","setPosition","x","y","old","position","_","forEach","port","getX","getY","deserialize","event","data","portOb","engine","getFactoryForPort","type","generateModel","Object","registerModel","addPort","serialize","map","doClone","lookupTable","clone","remove","getLinks","link","getPortFromID","id","i","getID","getLink","portID","links","getPort","name","getPorts","removePort","values","clearPort","getName","setParent","updateDimensions","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-core\\src\\entities\\node\\NodeModel.ts"],"sourcesContent":["import * as _ from 'lodash';\nimport { DiagramModel } from '../../models/DiagramModel';\nimport { PortModel } from '../port/PortModel';\nimport { LinkModel } from '../link/LinkModel';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelListener,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface NodeModelListener extends BaseModelListener {\n\tpositionChanged?(event: BaseEntityEvent<NodeModel>): void;\n}\n\nexport interface NodeModelGenerics extends BasePositionModelGenerics {\n\tLISTENER: NodeModelListener;\n\tPARENT: DiagramModel;\n}\n\nexport class NodeModel<G extends NodeModelGenerics = NodeModelGenerics> extends BasePositionModel<G> {\n\tprotected ports: { [s: string]: PortModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.ports = {};\n\t\tthis.width = 0;\n\t\tthis.height = 0;\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn new Rectangle(this.getPosition(), this.width, this.height);\n\t}\n\n\tsetPosition(point: Point): void;\n\tsetPosition(x: number, y: number): void;\n\tsetPosition(x: number | Point, y?: number): void {\n\t\tconst old = this.position;\n\n\t\tif (x instanceof Point) {\n\t\t\tsuper.setPosition(x);\n\t\t} else {\n\t\t\tsuper.setPosition(x, y);\n\t\t}\n\n\t\t//also update the port co-ordinates (for make glorious speed)\n\t\t_.forEach(this.ports, (port) => {\n\t\t\tport.setPosition(port.getX() + this.position.x - old.x, port.getY() + this.position.y - old.y);\n\t\t});\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\n\t\t//deserialize ports\n\t\t_.forEach(event.data.ports, (port: any) => {\n\t\t\tlet portOb = (event.engine as DiagramEngine).getFactoryForPort(port.type).generateModel({});\n\t\t\tportOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: port\n\t\t\t});\n\t\t\t// the links need these\n\t\t\tevent.registerModel(portOb);\n\t\t\tthis.addPort(portOb);\n\t\t});\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tports: _.map(this.ports, (port) => {\n\t\t\t\treturn port.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\t// also clone the ports\n\t\tclone.ports = {};\n\t\t_.forEach(this.ports, (port) => {\n\t\t\tclone.addPort(port.clone(lookupTable));\n\t\t});\n\t}\n\n\tremove() {\n\t\tsuper.remove();\n\t\t_.forEach(this.ports, (port) => {\n\t\t\t_.forEach(port.getLinks(), (link) => {\n\t\t\t\tlink.remove();\n\t\t\t});\n\t\t});\n\t}\n\n\tgetPortFromID(id): PortModel | null {\n\t\tfor (var i in this.ports) {\n\t\t\tif (this.ports[i].getID() === id) {\n\t\t\t\treturn this.ports[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetLink(id: string): LinkModel {\n\t\tfor (let portID in this.ports) {\n\t\t\tconst links = this.ports[portID].getLinks();\n\t\t\tif (links[id]) {\n\t\t\t\treturn links[id];\n\t\t\t}\n\t\t}\n\t}\n\n\tgetPort(name: string): PortModel | null {\n\t\treturn this.ports[name];\n\t}\n\n\tgetPorts(): { [s: string]: PortModel } {\n\t\treturn this.ports;\n\t}\n\n\tremovePort(port: PortModel) {\n\t\t// clear the port from the links\n\t\tfor (let link of _.values(port.getLinks())) {\n\t\t\tlink.clearPort(port);\n\t\t}\n\t\t//clear the parent node reference\n\t\tif (this.ports[port.getName()]) {\n\t\t\tthis.ports[port.getName()].setParent(null);\n\t\t\tdelete this.ports[port.getName()];\n\t\t}\n\t}\n\n\taddPort(port: PortModel): PortModel {\n\t\tport.setParent(this);\n\t\tthis.ports[port.getName()] = port;\n\t\treturn port;\n\t}\n\n\tupdateDimensions({ width, height }: { width: number; height: number }) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}