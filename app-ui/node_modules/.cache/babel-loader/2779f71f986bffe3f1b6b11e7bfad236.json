{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RightAngleLinkModel = void 0;\n\nconst react_diagrams_defaults_1 = require(\"@projectstorm/react-diagrams-defaults\");\n\nconst RightAngleLinkFactory_1 = require(\"./RightAngleLinkFactory\");\n\nclass RightAngleLinkModel extends react_diagrams_defaults_1.DefaultLinkModel {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(Object.assign({\n      type: RightAngleLinkFactory_1.RightAngleLinkFactory.NAME\n    }, options));\n    this.lastHoverIndexOfPath = 0;\n    this._lastPathXdirection = false;\n    this._firstPathXdirection = false;\n  }\n\n  setFirstAndLastPathsDirection() {\n    let points = this.getPoints();\n\n    for (let i = 1; i < points.length; i += points.length - 2) {\n      let dx = Math.abs(points[i].getX() - points[i - 1].getX());\n      let dy = Math.abs(points[i].getY() - points[i - 1].getY());\n\n      if (i - 1 === 0) {\n        this._firstPathXdirection = dx > dy;\n      } else {\n        this._lastPathXdirection = dx > dy;\n      }\n    }\n  } // @ts-ignore\n\n\n  addPoint(pointModel) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    // @ts-ignore\n    super.addPoint(pointModel, index);\n    this.setFirstAndLastPathsDirection();\n    return pointModel;\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.setFirstAndLastPathsDirection();\n  }\n\n  setManuallyFirstAndLastPathsDirection(first, last) {\n    this._firstPathXdirection = first;\n    this._lastPathXdirection = last;\n  }\n\n  getLastPathXdirection() {\n    return this._lastPathXdirection;\n  }\n\n  getFirstPathXdirection() {\n    return this._firstPathXdirection;\n  }\n\n  setWidth(width) {\n    this.options.width = width;\n    this.fireEvent({\n      width\n    }, 'widthChanged');\n  }\n\n  setColor(color) {\n    this.options.color = color;\n    this.fireEvent({\n      color\n    }, 'colorChanged');\n  }\n\n}\n\nexports.RightAngleLinkModel = RightAngleLinkModel;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAIA,MAAaA,mBAAb,SAAyCC,0CAAzC,CAAyD;AAIxDC,gBAAiD;AAAA,QAArCC,OAAqC,uEAAF,EAAE;AAChD,UAAKC;AACJC,UAAI,EAAEC,8CAAsBC;AADxB,OAEDJ,OAFC,CAAL;AAIA,SAAKK,oBAAL,GAA4B,CAA5B;AACA,SAAKC,mBAAL,GAA2B,KAA3B;AACA,SAAKC,oBAAL,GAA4B,KAA5B;AACA;;AAEDC,+BAA6B;AAC5B,QAAIC,MAAM,GAAG,KAAKC,SAAL,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,IAAIF,MAAM,CAACG,MAAP,GAAgB,CAAxD,EAA2D;AAC1D,UAAIC,EAAE,GAAGC,IAAI,CAACC,GAAL,CAASN,MAAM,CAACE,CAAD,CAAN,CAAUK,IAAV,KAAmBP,MAAM,CAACE,CAAC,GAAG,CAAL,CAAN,CAAcK,IAAd,EAA5B,CAAT;AACA,UAAIC,EAAE,GAAGH,IAAI,CAACC,GAAL,CAASN,MAAM,CAACE,CAAD,CAAN,CAAUO,IAAV,KAAmBT,MAAM,CAACE,CAAC,GAAG,CAAL,CAAN,CAAcO,IAAd,EAA5B,CAAT;;AACA,UAAIP,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AAChB,aAAKJ,oBAAL,GAA4BM,EAAE,GAAGI,EAAjC;AACA,OAFD,MAEO;AACN,aAAKX,mBAAL,GAA2BO,EAAE,GAAGI,EAAhC;AACA;AACD;AACD,GAzBuD,CA2BxD;;;AACAE,UAAQ,CAAuBC,UAAvB,EAAuD;AAAA,QAAjBC,KAAiB,uEAAD,CAAC;AAC9D;AACA,UAAMF,QAAN,CAAeC,UAAf,EAA2BC,KAA3B;AACA,SAAKb,6BAAL;AACA,WAAOY,UAAP;AACA;;AAEDE,aAAW,CAACC,KAAD,EAA8B;AACxC,UAAMD,WAAN,CAAkBC,KAAlB;AACA,SAAKf,6BAAL;AACA;;AAEDgB,uCAAqC,CAACC,KAAD,EAAQC,IAAR,EAAY;AAChD,SAAKnB,oBAAL,GAA4BkB,KAA5B;AACA,SAAKnB,mBAAL,GAA2BoB,IAA3B;AACA;;AAEDC,uBAAqB;AACpB,WAAO,KAAKrB,mBAAZ;AACA;;AACDsB,wBAAsB;AACrB,WAAO,KAAKrB,oBAAZ;AACA;;AAEDsB,UAAQ,CAACC,KAAD,EAAc;AACrB,SAAK9B,OAAL,CAAa8B,KAAb,GAAqBA,KAArB;AACA,SAAKC,SAAL,CAAe;AAAED;AAAF,KAAf,EAA0B,cAA1B;AACA;;AAEDE,UAAQ,CAACC,KAAD,EAAc;AACrB,SAAKjC,OAAL,CAAaiC,KAAb,GAAqBA,KAArB;AACA,SAAKF,SAAL,CAAe;AAAEE;AAAF,KAAf,EAA0B,cAA1B;AACA;;AA5DuD;;AAAzDC","names":["RightAngleLinkModel","react_diagrams_defaults_1","constructor","options","Object","type","RightAngleLinkFactory_1","NAME","lastHoverIndexOfPath","_lastPathXdirection","_firstPathXdirection","setFirstAndLastPathsDirection","points","getPoints","i","length","dx","Math","abs","getX","dy","getY","addPoint","pointModel","index","deserialize","event","setManuallyFirstAndLastPathsDirection","first","last","getLastPathXdirection","getFirstPathXdirection","setWidth","width","fireEvent","setColor","color","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-routing\\src\\link\\RightAngleLinkModel.ts"],"sourcesContent":["import { DefaultLinkModel, DefaultLinkModelOptions } from '@projectstorm/react-diagrams-defaults';\nimport { RightAngleLinkFactory } from './RightAngleLinkFactory';\nimport { PointModel } from '@projectstorm/react-diagrams-core';\nimport { DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport class RightAngleLinkModel extends DefaultLinkModel {\n\tlastHoverIndexOfPath: number;\n\tprivate _lastPathXdirection: boolean;\n\tprivate _firstPathXdirection: boolean;\n\tconstructor(options: DefaultLinkModelOptions = {}) {\n\t\tsuper({\n\t\t\ttype: RightAngleLinkFactory.NAME,\n\t\t\t...options\n\t\t});\n\t\tthis.lastHoverIndexOfPath = 0;\n\t\tthis._lastPathXdirection = false;\n\t\tthis._firstPathXdirection = false;\n\t}\n\n\tsetFirstAndLastPathsDirection() {\n\t\tlet points = this.getPoints();\n\t\tfor (let i = 1; i < points.length; i += points.length - 2) {\n\t\t\tlet dx = Math.abs(points[i].getX() - points[i - 1].getX());\n\t\t\tlet dy = Math.abs(points[i].getY() - points[i - 1].getY());\n\t\t\tif (i - 1 === 0) {\n\t\t\t\tthis._firstPathXdirection = dx > dy;\n\t\t\t} else {\n\t\t\t\tthis._lastPathXdirection = dx > dy;\n\t\t\t}\n\t\t}\n\t}\n\n\t// @ts-ignore\n\taddPoint<P extends PointModel>(pointModel: P, index: number = 1): P {\n\t\t// @ts-ignore\n\t\tsuper.addPoint(pointModel, index);\n\t\tthis.setFirstAndLastPathsDirection();\n\t\treturn pointModel;\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.setFirstAndLastPathsDirection();\n\t}\n\n\tsetManuallyFirstAndLastPathsDirection(first, last) {\n\t\tthis._firstPathXdirection = first;\n\t\tthis._lastPathXdirection = last;\n\t}\n\n\tgetLastPathXdirection(): boolean {\n\t\treturn this._lastPathXdirection;\n\t}\n\tgetFirstPathXdirection(): boolean {\n\t\treturn this._firstPathXdirection;\n\t}\n\n\tsetWidth(width: number) {\n\t\tthis.options.width = width;\n\t\tthis.fireEvent({ width }, 'widthChanged');\n\t}\n\n\tsetColor(color: string) {\n\t\tthis.options.color = color;\n\t\tthis.fireEvent({ color }, 'colorChanged');\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}