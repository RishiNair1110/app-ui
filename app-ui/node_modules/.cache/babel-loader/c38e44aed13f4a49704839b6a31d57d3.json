{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LinkWidget = void 0;\n\nconst React = require(\"react\");\n\nconst _ = require(\"lodash\");\n\nconst LabelWidget_1 = require(\"../label/LabelWidget\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nclass LinkWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sourcePort: null,\n      targetPort: null\n    };\n  }\n\n  componentWillUnmount() {\n    if (this.sourceListener) {\n      this.sourceListener.deregister();\n    }\n\n    if (this.targetListener) {\n      this.targetListener.deregister();\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    return {\n      sourcePort: nextProps.link.getSourcePort(),\n      targetPort: nextProps.link.getTargetPort()\n    };\n  }\n\n  installTarget() {\n    this.targetListener && this.targetListener.deregister();\n    if (!this.props.link.getTargetPort()) return;\n    this.targetListener = this.props.link.getTargetPort().registerListener({\n      reportInitialPosition: event => {\n        this.forceUpdate();\n      }\n    });\n  }\n\n  installSource() {\n    this.sourceListener && this.sourceListener.deregister();\n    if (!this.props.link.getSourcePort()) return;\n    this.sourceListener = this.props.link.getSourcePort().registerListener({\n      reportInitialPosition: event => {\n        this.forceUpdate();\n      }\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.sourcePort !== this.state.sourcePort) {\n      this.installSource();\n    }\n\n    if (prevState.targetPort !== this.state.targetPort) {\n      this.installTarget();\n    }\n  }\n\n  static generateLinePath(firstPoint, lastPoint) {\n    return `M${firstPoint.getX()},${firstPoint.getY()} L ${lastPoint.getX()},${lastPoint.getY()}`;\n  }\n\n  componentDidMount() {\n    if (this.props.link.getSourcePort()) {\n      this.installSource();\n    }\n\n    if (this.props.link.getTargetPort()) {\n      this.installTarget();\n    }\n  }\n\n  render() {\n    const {\n      link\n    } = this.props; // only draw the link when we have reported positions\n\n    if (link.getSourcePort() && !link.getSourcePort().reportedPosition) {\n      return null;\n    }\n\n    if (link.getTargetPort() && !link.getTargetPort().reportedPosition) {\n      return null;\n    } //generate links\n\n\n    return React.createElement(react_canvas_core_1.PeformanceWidget, {\n      model: this.props.link,\n      serialized: this.props.link.serialize()\n    }, () => {\n      return React.createElement(\"g\", {\n        \"data-linkid\": this.props.link.getID()\n      }, this.props.diagramEngine.generateWidgetForLink(link), _.map(this.props.link.getLabels(), (labelModel, index) => {\n        return React.createElement(LabelWidget_1.LabelWidget, {\n          key: labelModel.getID(),\n          engine: this.props.diagramEngine,\n          label: labelModel,\n          index: index\n        });\n      }));\n    });\n  }\n\n}\n\nexports.LinkWidget = LinkWidget;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAIA;;AACA;;AACA;;AAaA,MAAaA,UAAb,SAAgCC,KAAK,CAACC,SAAtC,CAAqE;AAIpEC,cAAYC,KAAZ,EAAiB;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,gBAAU,EAAE,IADA;AAEZC,gBAAU,EAAE;AAFA,KAAb;AAIA;;AAEDC,sBAAoB;AACnB,QAAI,KAAKC,cAAT,EAAyB;AACxB,WAAKA,cAAL,CAAoBC,UAApB;AACA;;AACD,QAAI,KAAKC,cAAT,EAAyB;AACxB,WAAKA,cAAL,CAAoBD,UAApB;AACA;AACD;;AAE8B,SAAxBE,wBAAwB,CAACC,SAAD,EAAuBC,SAAvB,EAA2C;AACzE,WAAO;AACNR,gBAAU,EAAEO,SAAS,CAACE,IAAV,CAAeC,aAAf,EADN;AAENT,gBAAU,EAAEM,SAAS,CAACE,IAAV,CAAeE,aAAf;AAFN,KAAP;AAIA;;AAEDC,eAAa;AACZ,SAAKP,cAAL,IAAuB,KAAKA,cAAL,CAAoBD,UAApB,EAAvB;AAEA,QAAI,CAAC,KAAKN,KAAL,CAAWW,IAAX,CAAgBE,aAAhB,EAAL,EAAsC;AACtC,SAAKN,cAAL,GAAsB,KAAKP,KAAL,CAAWW,IAAX,CAAgBE,aAAhB,GAAgCE,gBAAhC,CAAiD;AACtEC,2BAAqB,EAAGC,KAAD,IAA8C;AACpE,aAAKC,WAAL;AACA;AAHqE,KAAjD,CAAtB;AAKA;;AAEDC,eAAa;AACZ,SAAKd,cAAL,IAAuB,KAAKA,cAAL,CAAoBC,UAApB,EAAvB;AAEA,QAAI,CAAC,KAAKN,KAAL,CAAWW,IAAX,CAAgBC,aAAhB,EAAL,EAAsC;AACtC,SAAKP,cAAL,GAAsB,KAAKL,KAAL,CAAWW,IAAX,CAAgBC,aAAhB,GAAgCG,gBAAhC,CAAiD;AACtEC,2BAAqB,EAAGC,KAAD,IAA8C;AACpE,aAAKC,WAAL;AACA;AAHqE,KAAjD,CAAtB;AAKA;;AAEDE,oBAAkB,CAACC,SAAD,EAAiCX,SAAjC,EAAiEY,QAAjE,EAAyE;AAC1F,QAAIZ,SAAS,CAACR,UAAV,KAAyB,KAAKD,KAAL,CAAWC,UAAxC,EAAoD;AACnD,WAAKiB,aAAL;AACA;;AACD,QAAIT,SAAS,CAACP,UAAV,KAAyB,KAAKF,KAAL,CAAWE,UAAxC,EAAoD;AACnD,WAAKW,aAAL;AACA;AACD;;AAE6B,SAAhBS,gBAAgB,CAACC,UAAD,EAAyBC,SAAzB,EAA8C;AAC3E,WAAO,IAAID,UAAU,CAACE,IAAX,EAAiB,IAAIF,UAAU,CAACG,IAAX,EAAiB,MAAMF,SAAS,CAACC,IAAV,EAAgB,IAAID,SAAS,CAACE,IAAV,EAAgB,EAA3F;AACA;;AAEDC,mBAAiB;AAChB,QAAI,KAAK5B,KAAL,CAAWW,IAAX,CAAgBC,aAAhB,EAAJ,EAAqC;AACpC,WAAKO,aAAL;AACA;;AACD,QAAI,KAAKnB,KAAL,CAAWW,IAAX,CAAgBE,aAAhB,EAAJ,EAAqC;AACpC,WAAKC,aAAL;AACA;AACD;;AAEDe,QAAM;AACL,UAAM;AAAElB;AAAF,QAAW,KAAKX,KAAtB,CADK,CAGL;;AACA,QAAIW,IAAI,CAACC,aAAL,MAAwB,CAACD,IAAI,CAACC,aAAL,GAAqBkB,gBAAlD,EAAoE;AACnE,aAAO,IAAP;AACA;;AACD,QAAInB,IAAI,CAACE,aAAL,MAAwB,CAACF,IAAI,CAACE,aAAL,GAAqBiB,gBAAlD,EAAoE;AACnE,aAAO,IAAP;AACA,KATI,CAWL;;;AACA,WACCjC,oBAACkC,oCAAD,EAAiB;AAACC,WAAK,EAAE,KAAKhC,KAAL,CAAWW,IAAnB;AAAyBsB,gBAAU,EAAE,KAAKjC,KAAL,CAAWW,IAAX,CAAgBuB,SAAhB;AAArC,KAAjB,EACE,MAAK;AACL,aACCrC;AAAA,uBAAgB,KAAKG,KAAL,CAAWW,IAAX,CAAgBwB,KAAhB;AAAhB,SACE,KAAKnC,KAAL,CAAWoC,aAAX,CAAyBC,qBAAzB,CAA+C1B,IAA/C,CADF,EAEE2B,CAAC,CAACC,GAAF,CAAM,KAAKvC,KAAL,CAAWW,IAAX,CAAgB6B,SAAhB,EAAN,EAAmC,CAACC,UAAD,EAAaC,KAAb,KAAsB;AACzD,eACC7C,oBAAC8C,yBAAD,EAAY;AACXC,aAAG,EAAEH,UAAU,CAACN,KAAX,EADM;AAEXU,gBAAM,EAAE,KAAK7C,KAAL,CAAWoC,aAFR;AAGXU,eAAK,EAAEL,UAHI;AAIXC,eAAK,EAAEA;AAJI,SAAZ,CADD;AAQA,OATA,CAFF,CADD;AAeA,KAjBF,CADD;AAqBA;;AAzGmE;;AAArEK","names":["LinkWidget","React","Component","constructor","props","state","sourcePort","targetPort","componentWillUnmount","sourceListener","deregister","targetListener","getDerivedStateFromProps","nextProps","prevState","link","getSourcePort","getTargetPort","installTarget","registerListener","reportInitialPosition","event","forceUpdate","installSource","componentDidUpdate","prevProps","snapshot","generateLinePath","firstPoint","lastPoint","getX","getY","componentDidMount","render","reportedPosition","react_canvas_core_1","model","serialized","serialize","getID","diagramEngine","generateWidgetForLink","_","map","getLabels","labelModel","index","LabelWidget_1","key","engine","label","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-core\\src\\entities\\link\\LinkWidget.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LinkModel } from './LinkModel';\nimport { PointModel } from './PointModel';\nimport * as _ from 'lodash';\nimport { LabelWidget } from '../label/LabelWidget';\nimport { BaseEntityEvent, BasePositionModel, ListenerHandle, PeformanceWidget } from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../port/PortModel';\n\nexport interface LinkProps {\n\tlink: LinkModel;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface LinkState {\n\tsourcePort: PortModel;\n\ttargetPort: PortModel;\n}\n\nexport class LinkWidget extends React.Component<LinkProps, LinkState> {\n\tsourceListener: ListenerHandle;\n\ttargetListener: ListenerHandle;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsourcePort: null,\n\t\t\ttargetPort: null\n\t\t};\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tif (this.sourceListener) {\n\t\t\tthis.sourceListener.deregister();\n\t\t}\n\t\tif (this.targetListener) {\n\t\t\tthis.targetListener.deregister();\n\t\t}\n\t}\n\n\tstatic getDerivedStateFromProps(nextProps: LinkProps, prevState: LinkState): LinkState {\n\t\treturn {\n\t\t\tsourcePort: nextProps.link.getSourcePort(),\n\t\t\ttargetPort: nextProps.link.getTargetPort()\n\t\t};\n\t}\n\n\tinstallTarget() {\n\t\tthis.targetListener && this.targetListener.deregister();\n\n\t\tif (!this.props.link.getTargetPort()) return;\n\t\tthis.targetListener = this.props.link.getTargetPort().registerListener({\n\t\t\treportInitialPosition: (event: BaseEntityEvent<BasePositionModel>) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tinstallSource() {\n\t\tthis.sourceListener && this.sourceListener.deregister();\n\n\t\tif (!this.props.link.getSourcePort()) return;\n\t\tthis.sourceListener = this.props.link.getSourcePort().registerListener({\n\t\t\treportInitialPosition: (event: BaseEntityEvent<BasePositionModel>) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<LinkProps>, prevState: Readonly<LinkState>, snapshot) {\n\t\tif (prevState.sourcePort !== this.state.sourcePort) {\n\t\t\tthis.installSource();\n\t\t}\n\t\tif (prevState.targetPort !== this.state.targetPort) {\n\t\t\tthis.installTarget();\n\t\t}\n\t}\n\n\tpublic static generateLinePath(firstPoint: PointModel, lastPoint: PointModel): string {\n\t\treturn `M${firstPoint.getX()},${firstPoint.getY()} L ${lastPoint.getX()},${lastPoint.getY()}`;\n\t}\n\n\tcomponentDidMount(): void {\n\t\tif (this.props.link.getSourcePort()) {\n\t\t\tthis.installSource();\n\t\t}\n\t\tif (this.props.link.getTargetPort()) {\n\t\t\tthis.installTarget();\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { link } = this.props;\n\n\t\t// only draw the link when we have reported positions\n\t\tif (link.getSourcePort() && !link.getSourcePort().reportedPosition) {\n\t\t\treturn null;\n\t\t}\n\t\tif (link.getTargetPort() && !link.getTargetPort().reportedPosition) {\n\t\t\treturn null;\n\t\t}\n\n\t\t//generate links\n\t\treturn (\n\t\t\t<PeformanceWidget model={this.props.link} serialized={this.props.link.serialize()}>\n\t\t\t\t{() => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<g data-linkid={this.props.link.getID()}>\n\t\t\t\t\t\t\t{this.props.diagramEngine.generateWidgetForLink(link)}\n\t\t\t\t\t\t\t{_.map(this.props.link.getLabels(), (labelModel, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<LabelWidget\n\t\t\t\t\t\t\t\t\t\tkey={labelModel.getID()}\n\t\t\t\t\t\t\t\t\t\tengine={this.props.diagramEngine}\n\t\t\t\t\t\t\t\t\t\tlabel={labelModel}\n\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</PeformanceWidget>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}