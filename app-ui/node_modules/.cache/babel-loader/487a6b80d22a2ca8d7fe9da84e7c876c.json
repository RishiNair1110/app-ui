{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Rectangle = void 0;\n\nconst Point_1 = require(\"./Point\");\n\nconst Polygon_1 = require(\"./Polygon\");\n\nclass Rectangle extends Polygon_1.Polygon {\n  constructor() {\n    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    if (a instanceof Point_1.Point && b instanceof Point_1.Point && c instanceof Point_1.Point && d instanceof Point_1.Point) {\n      super([a, b, c, d]);\n    } else if (a instanceof Point_1.Point) {\n      super([a, new Point_1.Point(a.x + b, a.y), new Point_1.Point(a.x + b, a.y + c), new Point_1.Point(a.x, a.y + c)]);\n    } else {\n      super(Rectangle.pointsFromBounds(a, b, c, d));\n    }\n  }\n\n  static pointsFromBounds(x, y, width, height) {\n    return [new Point_1.Point(x, y), new Point_1.Point(x + width, y), new Point_1.Point(x + width, y + height), new Point_1.Point(x, y + height)];\n  }\n\n  updateDimensions(x, y, width, height) {\n    this.points = Rectangle.pointsFromBounds(x, y, width, height);\n  }\n\n  setPoints(points) {\n    if (points.length !== 4) {\n      throw 'Rectangles must always have 4 points';\n    }\n\n    super.setPoints(points);\n  }\n\n  containsPoint(point) {\n    const tl = this.getTopLeft();\n    const br = this.getBottomRight();\n    return point.x >= tl.x && point.x <= br.x && point.y >= tl.y && point.y <= br.y;\n  }\n\n  getWidth() {\n    return Math.sqrt(Math.pow(this.getTopLeft().x - this.getTopRight().x, 2) + Math.pow(this.getTopLeft().y - this.getTopRight().y, 2));\n  }\n\n  getHeight() {\n    return Math.sqrt(Math.pow(this.getBottomLeft().x - this.getTopLeft().x, 2) + Math.pow(this.getBottomLeft().y - this.getTopLeft().y, 2));\n  }\n\n  getTopMiddle() {\n    return Point_1.Point.middlePoint(this.getTopLeft(), this.getTopRight());\n  }\n\n  getBottomMiddle() {\n    return Point_1.Point.middlePoint(this.getBottomLeft(), this.getBottomRight());\n  }\n\n  getLeftMiddle() {\n    return Point_1.Point.middlePoint(this.getBottomLeft(), this.getTopLeft());\n  }\n\n  getRightMiddle() {\n    return Point_1.Point.middlePoint(this.getBottomRight(), this.getTopRight());\n  }\n\n  getTopLeft() {\n    return this.points[0];\n  }\n\n  getTopRight() {\n    return this.points[1];\n  }\n\n  getBottomRight() {\n    return this.points[2];\n  }\n\n  getBottomLeft() {\n    return this.points[3];\n  }\n\n}\n\nexports.Rectangle = Rectangle;","map":{"version":3,"mappings":"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","names":["Rectangle","Polygon_1","constructor","a","b","c","d","Point_1","x","y","pointsFromBounds","width","height","updateDimensions","points","setPoints","length","containsPoint","point","tl","getTopLeft","br","getBottomRight","getWidth","Math","sqrt","pow","getTopRight","getHeight","getBottomLeft","getTopMiddle","middlePoint","getBottomMiddle","getLeftMiddle","getRightMiddle","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\geometry\\src\\Rectangle.ts"],"sourcesContent":["import { Point } from './Point';\nimport { Polygon } from './Polygon';\n\nexport class Rectangle extends Polygon {\n\tconstructor(tl: Point, tr: Point, br: Point, bl: Point);\n\tconstructor(position: Point, width: number, height: number);\n\tconstructor(x?: number, y?: number, width?: number, height?: number);\n\n\tconstructor(a: any = 0, b: any = 0, c: any = 0, d: any = 0) {\n\t\tif (a instanceof Point && b instanceof Point && c instanceof Point && d instanceof Point) {\n\t\t\tsuper([a, b, c, d]);\n\t\t} else if (a instanceof Point) {\n\t\t\tsuper([a, new Point(a.x + b, a.y), new Point(a.x + b, a.y + c), new Point(a.x, a.y + c)]);\n\t\t} else {\n\t\t\tsuper(Rectangle.pointsFromBounds(a, b, c, d));\n\t\t}\n\t}\n\n\tstatic pointsFromBounds(x: number, y: number, width: number, height: number): Point[] {\n\t\treturn [new Point(x, y), new Point(x + width, y), new Point(x + width, y + height), new Point(x, y + height)];\n\t}\n\n\tupdateDimensions(x: number, y: number, width: number, height: number) {\n\t\tthis.points = Rectangle.pointsFromBounds(x, y, width, height);\n\t}\n\n\tsetPoints(points: Point[]) {\n\t\tif (points.length !== 4) {\n\t\t\tthrow 'Rectangles must always have 4 points';\n\t\t}\n\t\tsuper.setPoints(points);\n\t}\n\n\tcontainsPoint(point: Point) {\n\t\tconst tl = this.getTopLeft();\n\t\tconst br = this.getBottomRight();\n\n\t\treturn point.x >= tl.x && point.x <= br.x && point.y >= tl.y && point.y <= br.y;\n\t}\n\n\tgetWidth(): number {\n\t\treturn Math.sqrt(\n\t\t\tMath.pow(this.getTopLeft().x - this.getTopRight().x, 2) + Math.pow(this.getTopLeft().y - this.getTopRight().y, 2)\n\t\t);\n\t}\n\n\tgetHeight(): number {\n\t\treturn Math.sqrt(\n\t\t\tMath.pow(this.getBottomLeft().x - this.getTopLeft().x, 2) +\n\t\t\t\tMath.pow(this.getBottomLeft().y - this.getTopLeft().y, 2)\n\t\t);\n\t}\n\n\tgetTopMiddle(): Point {\n\t\treturn Point.middlePoint(this.getTopLeft(), this.getTopRight());\n\t}\n\n\tgetBottomMiddle(): Point {\n\t\treturn Point.middlePoint(this.getBottomLeft(), this.getBottomRight());\n\t}\n\n\tgetLeftMiddle(): Point {\n\t\treturn Point.middlePoint(this.getBottomLeft(), this.getTopLeft());\n\t}\n\n\tgetRightMiddle(): Point {\n\t\treturn Point.middlePoint(this.getBottomRight(), this.getTopRight());\n\t}\n\n\tgetTopLeft(): Point {\n\t\treturn this.points[0];\n\t}\n\n\tgetTopRight(): Point {\n\t\treturn this.points[1];\n\t}\n\n\tgetBottomRight(): Point {\n\t\treturn this.points[2];\n\t}\n\n\tgetBottomLeft(): Point {\n\t\treturn this.points[3];\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}