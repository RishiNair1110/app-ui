{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseObserver = void 0;\n\nconst Toolkit_1 = require(\"../Toolkit\");\n/**\n * Base observer pattern class for working with listeners\n */\n\n\nclass BaseObserver {\n  constructor() {\n    this.listeners = {};\n  }\n\n  fireEventInternal(fire, k, event) {\n    this.iterateListeners(listener => {\n      // returning false here will instruct itteration to stop\n      if (!fire && !event.firing) {\n        return false;\n      } // fire selected listener\n\n\n      if (listener[k]) {\n        listener[k](event);\n      }\n    });\n  }\n\n  fireEvent(event, k) {\n    event = Object.assign({\n      firing: true,\n      stopPropagation: () => {\n        event.firing = false;\n      }\n    }, event); // fire pre\n\n    this.fireEventInternal(true, 'eventWillFire', Object.assign(Object.assign({}, event), {\n      function: k\n    })); // fire main event\n\n    this.fireEventInternal(false, k, event); // fire post\n\n    this.fireEventInternal(true, 'eventDidFire', Object.assign(Object.assign({}, event), {\n      function: k\n    }));\n  }\n\n  iterateListeners(cb) {\n    for (let id in this.listeners) {\n      const res = cb(this.listeners[id]); // cancel itteration on false\n\n      if (res === false) {\n        return;\n      }\n    }\n  }\n\n  getListenerHandle(listener) {\n    for (let id in this.listeners) {\n      if (this.listeners[id] === listener) {\n        return {\n          id: id,\n          listener: listener,\n          deregister: () => {\n            delete this.listeners[id];\n          }\n        };\n      }\n    }\n  }\n\n  registerListener(listener) {\n    const id = Toolkit_1.Toolkit.UID();\n    this.listeners[id] = listener;\n    return {\n      id: id,\n      listener: listener,\n      deregister: () => {\n        delete this.listeners[id];\n      }\n    };\n  }\n\n  deregisterListener(listener) {\n    if (typeof listener === 'object') {\n      listener.deregister();\n      return true;\n    }\n\n    const handle = this.getListenerHandle(listener);\n\n    if (handle) {\n      handle.deregister();\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexports.BaseObserver = BaseObserver;","map":{"version":3,"mappings":";;;;;;;AAAA;AA+CA;;;;;AAGA,MAAaA,YAAb,CAAyB;AAGxBC;AACC,SAAKC,SAAL,GAAiB,EAAjB;AACA;;AAEOC,mBAAiB,CAACC,IAAD,EAAgBC,CAAhB,EAA4BC,KAA5B,EAA4C;AACpE,SAAKC,gBAAL,CAAuBC,QAAD,IAAa;AAClC;AACA,UAAI,CAACJ,IAAD,IAAS,CAACE,KAAK,CAACG,MAApB,EAA4B;AAC3B,eAAO,KAAP;AACA,OAJiC,CAKlC;;;AACA,UAAID,QAAQ,CAACH,CAAD,CAAZ,EAAiB;AAChBG,gBAAQ,CAACH,CAAD,CAAR,CAAYC,KAAZ;AACA;AACD,KATD;AAUA;;AAEDI,WAAS,CAAoBJ,KAApB,EAAyDD,CAAzD,EAAmE;AAC3EC,SAAK;AACJG,YAAM,EAAE,IADJ;AAEJE,qBAAe,EAAE,MAAK;AACrBL,aAAK,CAACG,MAAN,GAAe,KAAf;AACA;AAJG,OAKDH,KALC,CAAL,CAD2E,CAS3E;;AACA,SAAKH,iBAAL,CAAuB,IAAvB,EAA6B,eAA7B,EAA8CS,gCAC1CN,KAD0C,GACrC;AACRO,cAAQ,EAAER;AADF,KADqC,CAA9C,EAV2E,CAe3E;;AACA,SAAKF,iBAAL,CAAuB,KAAvB,EAA8BE,CAA9B,EAAiCC,KAAjC,EAhB2E,CAkB3E;;AACA,SAAKH,iBAAL,CAAuB,IAAvB,EAA6B,cAA7B,EAA6CS,gCACzCN,KADyC,GACpC;AACRO,cAAQ,EAAER;AADF,KADoC,CAA7C;AAIA;;AAEDE,kBAAgB,CAACO,EAAD,EAAyB;AACxC,SAAK,IAAIC,EAAT,IAAe,KAAKb,SAApB,EAA+B;AAC9B,YAAMc,GAAG,GAAGF,EAAE,CAAC,KAAKZ,SAAL,CAAea,EAAf,CAAD,CAAd,CAD8B,CAE9B;;AACA,UAAIC,GAAG,KAAK,KAAZ,EAAmB;AAClB;AACA;AACD;AACD;;AAEDC,mBAAiB,CAACT,QAAD,EAAY;AAC5B,SAAK,IAAIO,EAAT,IAAe,KAAKb,SAApB,EAA+B;AAC9B,UAAI,KAAKA,SAAL,CAAea,EAAf,MAAuBP,QAA3B,EAAqC;AACpC,eAAO;AACNO,YAAE,EAAEA,EADE;AAENP,kBAAQ,EAAEA,QAFJ;AAGNU,oBAAU,EAAE,MAAK;AAChB,mBAAO,KAAKhB,SAAL,CAAea,EAAf,CAAP;AACA;AALK,SAAP;AAOA;AACD;AACD;;AAEDI,kBAAgB,CAACX,QAAD,EAAY;AAC3B,UAAMO,EAAE,GAAGK,kBAAQC,GAAR,EAAX;AACA,SAAKnB,SAAL,CAAea,EAAf,IAAqBP,QAArB;AACA,WAAO;AACNO,QAAE,EAAEA,EADE;AAENP,cAAQ,EAAEA,QAFJ;AAGNU,gBAAU,EAAE,MAAK;AAChB,eAAO,KAAKhB,SAAL,CAAea,EAAf,CAAP;AACA;AALK,KAAP;AAOA;;AAEDO,oBAAkB,CAACd,QAAD,EAA6B;AAC9C,QAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChCA,cAA2B,CAACU,UAA5B;AACD,aAAO,IAAP;AACA;;AACD,UAAMK,MAAM,GAAG,KAAKN,iBAAL,CAAuBT,QAAvB,CAAf;;AACA,QAAIe,MAAJ,EAAY;AACXA,YAAM,CAACL,UAAP;AACA,aAAO,IAAP;AACA;;AACD,WAAO,KAAP;AACA;;AA5FuB;;AAAzBM","names":["BaseObserver","constructor","listeners","fireEventInternal","fire","k","event","iterateListeners","listener","firing","fireEvent","stopPropagation","Object","function","cb","id","res","getListenerHandle","deregister","registerListener","Toolkit_1","UID","deregisterListener","handle","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-canvas-core\\src\\core\\BaseObserver.ts"],"sourcesContent":["import { Toolkit } from '../Toolkit';\n\nexport interface BaseEvent {\n\tfiring: boolean;\n\tstopPropagation: () => any;\n}\n\nexport interface BaseEventProxy extends BaseEvent {\n\tfunction: string;\n}\n\n/**\n * Listeners are always in the form of an object that contains methods that take events\n */\nexport type BaseListener = {\n\t/**\n\t * Generic event that fires before a specific event was fired\n\t */\n\teventWillFire?: (event: BaseEvent & { function: string }) => void;\n\n\t/**\n\t * Generic event that fires after a specific event was fired (even if it was consumed)\n\t */\n\teventDidFire?: (event: BaseEvent & { function: string }) => void;\n} & {\n\t/**\n\t * Type for other events that will fire\n\t */\n\t[key: string]: (event: BaseEvent) => any;\n};\n\nexport interface ListenerHandle {\n\t/**\n\t * Used to degister the listener\n\t */\n\tderegister: () => any;\n\t/**\n\t * Original ID of the listener\n\t */\n\tid: string;\n\n\t/**\n\t * Original Listener\n\t */\n\tlistener: BaseListener;\n}\n\n/**\n * Base observer pattern class for working with listeners\n */\nexport class BaseObserver<L extends BaseListener = BaseListener> {\n\tprotected listeners: { [id: string]: L };\n\n\tconstructor() {\n\t\tthis.listeners = {};\n\t}\n\n\tprivate fireEventInternal(fire: boolean, k: keyof L, event: BaseEvent) {\n\t\tthis.iterateListeners((listener) => {\n\t\t\t// returning false here will instruct itteration to stop\n\t\t\tif (!fire && !event.firing) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// fire selected listener\n\t\t\tif (listener[k]) {\n\t\t\t\tlistener[k](event as BaseEvent);\n\t\t\t}\n\t\t});\n\t}\n\n\tfireEvent<K extends keyof L>(event: Partial<Parameters<L[K]>[0]>, k: keyof L) {\n\t\tevent = {\n\t\t\tfiring: true,\n\t\t\tstopPropagation: () => {\n\t\t\t\tevent.firing = false;\n\t\t\t},\n\t\t\t...event\n\t\t};\n\n\t\t// fire pre\n\t\tthis.fireEventInternal(true, 'eventWillFire', {\n\t\t\t...event,\n\t\t\tfunction: k\n\t\t} as BaseEventProxy);\n\n\t\t// fire main event\n\t\tthis.fireEventInternal(false, k, event as BaseEvent);\n\n\t\t// fire post\n\t\tthis.fireEventInternal(true, 'eventDidFire', {\n\t\t\t...event,\n\t\t\tfunction: k\n\t\t} as BaseEventProxy);\n\t}\n\n\titerateListeners(cb: (listener: L) => any) {\n\t\tfor (let id in this.listeners) {\n\t\t\tconst res = cb(this.listeners[id]);\n\t\t\t// cancel itteration on false\n\t\t\tif (res === false) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetListenerHandle(listener: L): ListenerHandle {\n\t\tfor (let id in this.listeners) {\n\t\t\tif (this.listeners[id] === listener) {\n\t\t\t\treturn {\n\t\t\t\t\tid: id,\n\t\t\t\t\tlistener: listener,\n\t\t\t\t\tderegister: () => {\n\t\t\t\t\t\tdelete this.listeners[id];\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\tregisterListener(listener: L): ListenerHandle {\n\t\tconst id = Toolkit.UID();\n\t\tthis.listeners[id] = listener;\n\t\treturn {\n\t\t\tid: id,\n\t\t\tlistener: listener,\n\t\t\tderegister: () => {\n\t\t\t\tdelete this.listeners[id];\n\t\t\t}\n\t\t};\n\t}\n\n\tderegisterListener(listener: L | ListenerHandle) {\n\t\tif (typeof listener === 'object') {\n\t\t\t(listener as ListenerHandle).deregister();\n\t\t\treturn true;\n\t\t}\n\t\tconst handle = this.getListenerHandle(listener);\n\t\tif (handle) {\n\t\t\thandle.deregister();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}