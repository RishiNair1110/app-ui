{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultLinkModel = void 0;\n\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\n\nconst DefaultLabelModel_1 = require(\"../label/DefaultLabelModel\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nclass DefaultLinkModel extends react_diagrams_core_1.LinkModel {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(Object.assign({\n      type: 'default',\n      width: options.width || 3,\n      color: options.color || 'gray',\n      selectedColor: options.selectedColor || 'rgb(0,192,255)',\n      curvyness: 50\n    }, options));\n  }\n\n  calculateControlOffset(port) {\n    if (port.getOptions().alignment === react_diagrams_core_1.PortModelAlignment.RIGHT) {\n      return [this.options.curvyness, 0];\n    } else if (port.getOptions().alignment === react_diagrams_core_1.PortModelAlignment.LEFT) {\n      return [-this.options.curvyness, 0];\n    } else if (port.getOptions().alignment === react_diagrams_core_1.PortModelAlignment.TOP) {\n      return [0, -this.options.curvyness];\n    }\n\n    return [0, this.options.curvyness];\n  }\n\n  getSVGPath() {\n    if (this.points.length == 2) {\n      const curve = new geometry_1.BezierCurve();\n      curve.setSource(this.getFirstPoint().getPosition());\n      curve.setTarget(this.getLastPoint().getPosition());\n      curve.setSourceControl(this.getFirstPoint().getPosition().clone());\n      curve.setTargetControl(this.getLastPoint().getPosition().clone());\n\n      if (this.sourcePort) {\n        curve.getSourceControl().translate(...this.calculateControlOffset(this.getSourcePort()));\n      }\n\n      if (this.targetPort) {\n        curve.getTargetControl().translate(...this.calculateControlOffset(this.getTargetPort()));\n      }\n\n      return curve.getSVGCurve();\n    }\n  }\n\n  serialize() {\n    return Object.assign(Object.assign({}, super.serialize()), {\n      width: this.options.width,\n      color: this.options.color,\n      curvyness: this.options.curvyness,\n      selectedColor: this.options.selectedColor\n    });\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.options.color = event.data.color;\n    this.options.width = event.data.width;\n    this.options.curvyness = event.data.curvyness;\n    this.options.selectedColor = event.data.selectedColor;\n  }\n\n  addLabel(label) {\n    if (label instanceof react_diagrams_core_1.LabelModel) {\n      return super.addLabel(label);\n    }\n\n    let labelOb = new DefaultLabelModel_1.DefaultLabelModel();\n    labelOb.setLabel(label);\n    return super.addLabel(labelOb);\n  }\n\n  setWidth(width) {\n    this.options.width = width;\n    this.fireEvent({\n      width\n    }, 'widthChanged');\n  }\n\n  setColor(color) {\n    this.options.color = color;\n    this.fireEvent({\n      color\n    }, 'colorChanged');\n  }\n\n}\n\nexports.DefaultLinkModel = DefaultLinkModel;","map":{"version":3,"mappings":";;;;;;;AAAA;;AASA;;AACA;;AAuBA,MAAaA,gBAAb,SAAsCC,+BAAtC,CAAyE;AACxEC,gBAAiD;AAAA,QAArCC,OAAqC,uEAAF,EAAE;AAChD,UAAKC;AACJC,UAAI,EAAE,SADF;AAEJC,WAAK,EAAEH,OAAO,CAACG,KAAR,IAAiB,CAFpB;AAGJC,WAAK,EAAEJ,OAAO,CAACI,KAAR,IAAiB,MAHpB;AAIJC,mBAAa,EAAEL,OAAO,CAACK,aAAR,IAAyB,gBAJpC;AAKJC,eAAS,EAAE;AALP,OAMDN,OANC,CAAL;AAQA;;AAEDO,wBAAsB,CAACC,IAAD,EAAgB;AACrC,QAAIA,IAAI,CAACC,UAAL,GAAkBC,SAAlB,KAAgCZ,yCAAmBa,KAAvD,EAA8D;AAC7D,aAAO,CAAC,KAAKX,OAAL,CAAaM,SAAd,EAAyB,CAAzB,CAAP;AACA,KAFD,MAEO,IAAIE,IAAI,CAACC,UAAL,GAAkBC,SAAlB,KAAgCZ,yCAAmBc,IAAvD,EAA6D;AACnE,aAAO,CAAC,CAAC,KAAKZ,OAAL,CAAaM,SAAf,EAA0B,CAA1B,CAAP;AACA,KAFM,MAEA,IAAIE,IAAI,CAACC,UAAL,GAAkBC,SAAlB,KAAgCZ,yCAAmBe,GAAvD,EAA4D;AAClE,aAAO,CAAC,CAAD,EAAI,CAAC,KAAKb,OAAL,CAAaM,SAAlB,CAAP;AACA;;AACD,WAAO,CAAC,CAAD,EAAI,KAAKN,OAAL,CAAaM,SAAjB,CAAP;AACA;;AAEDQ,YAAU;AACT,QAAI,KAAKC,MAAL,CAAYC,MAAZ,IAAsB,CAA1B,EAA6B;AAC5B,YAAMC,KAAK,GAAG,IAAIC,sBAAJ,EAAd;AACAD,WAAK,CAACE,SAAN,CAAgB,KAAKC,aAAL,GAAqBC,WAArB,EAAhB;AACAJ,WAAK,CAACK,SAAN,CAAgB,KAAKC,YAAL,GAAoBF,WAApB,EAAhB;AACAJ,WAAK,CAACO,gBAAN,CAAuB,KAAKJ,aAAL,GAAqBC,WAArB,GAAmCI,KAAnC,EAAvB;AACAR,WAAK,CAACS,gBAAN,CAAuB,KAAKH,YAAL,GAAoBF,WAApB,GAAkCI,KAAlC,EAAvB;;AAEA,UAAI,KAAKE,UAAT,EAAqB;AACpBV,aAAK,CAACW,gBAAN,GAAyBC,SAAzB,CAAmC,GAAG,KAAKtB,sBAAL,CAA4B,KAAKuB,aAAL,EAA5B,CAAtC;AACA;;AAED,UAAI,KAAKC,UAAT,EAAqB;AACpBd,aAAK,CAACe,gBAAN,GAAyBH,SAAzB,CAAmC,GAAG,KAAKtB,sBAAL,CAA4B,KAAK0B,aAAL,EAA5B,CAAtC;AACA;;AACD,aAAOhB,KAAK,CAACiB,WAAN,EAAP;AACA;AACD;;AAEDC,WAAS;AACR,2CACI,MAAMA,SAAN,EADJ,GACqB;AACpBhC,WAAK,EAAE,KAAKH,OAAL,CAAaG,KADA;AAEpBC,WAAK,EAAE,KAAKJ,OAAL,CAAaI,KAFA;AAGpBE,eAAS,EAAE,KAAKN,OAAL,CAAaM,SAHJ;AAIpBD,mBAAa,EAAE,KAAKL,OAAL,CAAaK;AAJR,KADrB;AAOA;;AAED+B,aAAW,CAACC,KAAD,EAA8B;AACxC,UAAMD,WAAN,CAAkBC,KAAlB;AACA,SAAKrC,OAAL,CAAaI,KAAb,GAAqBiC,KAAK,CAACC,IAAN,CAAWlC,KAAhC;AACA,SAAKJ,OAAL,CAAaG,KAAb,GAAqBkC,KAAK,CAACC,IAAN,CAAWnC,KAAhC;AACA,SAAKH,OAAL,CAAaM,SAAb,GAAyB+B,KAAK,CAACC,IAAN,CAAWhC,SAApC;AACA,SAAKN,OAAL,CAAaK,aAAb,GAA6BgC,KAAK,CAACC,IAAN,CAAWjC,aAAxC;AACA;;AAEDkC,UAAQ,CAACC,KAAD,EAA2B;AAClC,QAAIA,KAAK,YAAY1C,gCAArB,EAAiC;AAChC,aAAO,MAAMyC,QAAN,CAAeC,KAAf,CAAP;AACA;;AACD,QAAIC,OAAO,GAAG,IAAIC,qCAAJ,EAAd;AACAD,WAAO,CAACE,QAAR,CAAiBH,KAAjB;AACA,WAAO,MAAMD,QAAN,CAAeE,OAAf,CAAP;AACA;;AAEDG,UAAQ,CAACzC,KAAD,EAAc;AACrB,SAAKH,OAAL,CAAaG,KAAb,GAAqBA,KAArB;AACA,SAAK0C,SAAL,CAAe;AAAE1C;AAAF,KAAf,EAA0B,cAA1B;AACA;;AAED2C,UAAQ,CAAC1C,KAAD,EAAc;AACrB,SAAKJ,OAAL,CAAaI,KAAb,GAAqBA,KAArB;AACA,SAAKyC,SAAL,CAAe;AAAEzC;AAAF,KAAf,EAA0B,cAA1B;AACA;;AA7EuE;;AAAzE2C","names":["DefaultLinkModel","react_diagrams_core_1","constructor","options","Object","type","width","color","selectedColor","curvyness","calculateControlOffset","port","getOptions","alignment","RIGHT","LEFT","TOP","getSVGPath","points","length","curve","geometry_1","setSource","getFirstPoint","getPosition","setTarget","getLastPoint","setSourceControl","clone","setTargetControl","sourcePort","getSourceControl","translate","getSourcePort","targetPort","getTargetControl","getTargetPort","getSVGCurve","serialize","deserialize","event","data","addLabel","label","labelOb","DefaultLabelModel_1","setLabel","setWidth","fireEvent","setColor","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-defaults\\src\\link\\DefaultLinkModel.ts"],"sourcesContent":["import {\n\tDiagramEngine,\n\tLabelModel,\n\tLinkModel,\n\tLinkModelGenerics,\n\tLinkModelListener,\n\tPortModel,\n\tPortModelAlignment\n} from '@projectstorm/react-diagrams-core';\nimport { DefaultLabelModel } from '../label/DefaultLabelModel';\nimport { BezierCurve } from '@projectstorm/geometry';\nimport { BaseEntityEvent, BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n\tcolorChanged?(event: BaseEntityEvent<DefaultLinkModel> & { color: null | string }): void;\n\n\twidthChanged?(event: BaseEntityEvent<DefaultLinkModel> & { width: 0 | number }): void;\n}\n\nexport interface DefaultLinkModelOptions extends BaseModelOptions {\n\twidth?: number;\n\tcolor?: string;\n\tselectedColor?: string;\n\tcurvyness?: number;\n\ttype?: string;\n\ttestName?: string;\n}\n\nexport interface DefaultLinkModelGenerics extends LinkModelGenerics {\n\tLISTENER: DefaultLinkModelListener;\n\tOPTIONS: DefaultLinkModelOptions;\n}\n\nexport class DefaultLinkModel extends LinkModel<DefaultLinkModelGenerics> {\n\tconstructor(options: DefaultLinkModelOptions = {}) {\n\t\tsuper({\n\t\t\ttype: 'default',\n\t\t\twidth: options.width || 3,\n\t\t\tcolor: options.color || 'gray',\n\t\t\tselectedColor: options.selectedColor || 'rgb(0,192,255)',\n\t\t\tcurvyness: 50,\n\t\t\t...options\n\t\t});\n\t}\n\n\tcalculateControlOffset(port: PortModel): [number, number] {\n\t\tif (port.getOptions().alignment === PortModelAlignment.RIGHT) {\n\t\t\treturn [this.options.curvyness, 0];\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.LEFT) {\n\t\t\treturn [-this.options.curvyness, 0];\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.TOP) {\n\t\t\treturn [0, -this.options.curvyness];\n\t\t}\n\t\treturn [0, this.options.curvyness];\n\t}\n\n\tgetSVGPath(): string {\n\t\tif (this.points.length == 2) {\n\t\t\tconst curve = new BezierCurve();\n\t\t\tcurve.setSource(this.getFirstPoint().getPosition());\n\t\t\tcurve.setTarget(this.getLastPoint().getPosition());\n\t\t\tcurve.setSourceControl(this.getFirstPoint().getPosition().clone());\n\t\t\tcurve.setTargetControl(this.getLastPoint().getPosition().clone());\n\n\t\t\tif (this.sourcePort) {\n\t\t\t\tcurve.getSourceControl().translate(...this.calculateControlOffset(this.getSourcePort()));\n\t\t\t}\n\n\t\t\tif (this.targetPort) {\n\t\t\t\tcurve.getTargetControl().translate(...this.calculateControlOffset(this.getTargetPort()));\n\t\t\t}\n\t\t\treturn curve.getSVGCurve();\n\t\t}\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\twidth: this.options.width,\n\t\t\tcolor: this.options.color,\n\t\t\tcurvyness: this.options.curvyness,\n\t\t\tselectedColor: this.options.selectedColor\n\t\t};\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.color = event.data.color;\n\t\tthis.options.width = event.data.width;\n\t\tthis.options.curvyness = event.data.curvyness;\n\t\tthis.options.selectedColor = event.data.selectedColor;\n\t}\n\n\taddLabel(label: LabelModel | string) {\n\t\tif (label instanceof LabelModel) {\n\t\t\treturn super.addLabel(label);\n\t\t}\n\t\tlet labelOb = new DefaultLabelModel();\n\t\tlabelOb.setLabel(label);\n\t\treturn super.addLabel(labelOb);\n\t}\n\n\tsetWidth(width: number) {\n\t\tthis.options.width = width;\n\t\tthis.fireEvent({ width }, 'widthChanged');\n\t}\n\n\tsetColor(color: string) {\n\t\tthis.options.color = color;\n\t\tthis.fireEvent({ color }, 'colorChanged');\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}