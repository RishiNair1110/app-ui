{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nairr\\\\app-ui\\\\app-ui\\\\src\\\\BasicConnection.jsx\";\nimport createEngine, { DefaultLinkModel, DefaultNodeModel, DiagramModel } from '@projectstorm/react-diagrams';\nimport \"./app.css\";\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Architecture = () => {\n  const engine = createEngine();\n  const node1 = new DefaultNodeModel({\n    name: 'Source',\n    color: 'rgb(0,255,0)'\n  });\n  node1.setPosition(100, 100);\n  let port1 = node1.addOutPort(' ');\n  const node2 = new DefaultNodeModel({\n    name: 'Destination',\n    color: 'rgb(255,0,0)'\n  });\n  node2.setPosition(400, 100);\n  let port2 = node2.addInPort(' ');\n  const link = port1.link < DefaultLinkModel > port2;\n  console.log(link);\n\n  /*#__PURE__*/\n  _jsxDEV(\"button\", {\n    children: \"Submit\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n\n  const model = new DiagramModel();\n  model.addAll(node1, node2, link);\n  engine.setModel(model);\n  return /*#__PURE__*/_jsxDEV(CanvasWidget, {\n    className: \"srd-demo-canvas\",\n    engine: engine\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 12\n  }, this);\n};\n\n_c = Architecture;\n\nfunction BasicConnection() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"BasicConnection\",\n    children: /*#__PURE__*/_jsxDEV(Architecture, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = BasicConnection;\nexport default BasicConnection;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Architecture\");\n$RefreshReg$(_c2, \"BasicConnection\");","map":{"version":3,"sources":["C:/Users/nairr/app-ui/app-ui/src/BasicConnection.jsx"],"names":["createEngine","DefaultLinkModel","DefaultNodeModel","DiagramModel","CanvasWidget","Architecture","engine","node1","name","color","setPosition","port1","addOutPort","node2","port2","addInPort","link","console","log","model","addAll","setModel","BasicConnection"],"mappings":";AAAA,OAAOA,YAAP,IACIC,gBADJ,EAEIC,gBAFJ,EAGIC,YAHJ,QAIO,8BAJP;AAKA,OAAO,WAAP;AACA,SACIC,YADJ,QAEO,iCAFP;;;AAKA,MAAMC,YAAY,GAAG,MAAM;AACvB,QAAMC,MAAM,GAAGN,YAAY,EAA3B;AAEA,QAAMO,KAAK,GAAG,IAAIL,gBAAJ,CAAqB;AAC/BM,IAAAA,IAAI,EAAE,QADyB;AAE/BC,IAAAA,KAAK,EAAE;AAFwB,GAArB,CAAd;AAIAF,EAAAA,KAAK,CAACG,WAAN,CAAkB,GAAlB,EAAuB,GAAvB;AACA,MAAIC,KAAK,GAAGJ,KAAK,CAACK,UAAN,CAAiB,GAAjB,CAAZ;AAEA,QAAMC,KAAK,GAAG,IAAIX,gBAAJ,CAAqB;AAC/BM,IAAAA,IAAI,EAAE,aADyB;AAE/BC,IAAAA,KAAK,EAAE;AAFwB,GAArB,CAAd;AAIAI,EAAAA,KAAK,CAACH,WAAN,CAAkB,GAAlB,EAAuB,GAAvB;AACA,MAAII,KAAK,GAAGD,KAAK,CAACE,SAAN,CAAgB,GAAhB,CAAZ;AAEA,QAAMC,IAAI,GAAGL,KAAK,CAACK,IAAN,GAAaf,gBAAb,GAAiCa,KAA9C;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,QAAMG,KAAK,GAAG,IAAIhB,YAAJ,EAAd;AACAgB,EAAAA,KAAK,CAACC,MAAN,CAAab,KAAb,EAAoBM,KAApB,EAA2BG,IAA3B;AACAV,EAAAA,MAAM,CAACe,QAAP,CAAgBF,KAAhB;AAEA,sBAAO,QAAC,YAAD;AAAc,IAAA,SAAS,EAAC,iBAAxB;AAA0C,IAAA,MAAM,EAAEb;AAAlD;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CA3BD;;KAAMD,Y;;AA6BN,SAASiB,eAAT,GAA2B;AACvB,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,2BACI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;MANQA,e;AAOT,eAAeA,eAAf","sourcesContent":["import createEngine, {\r\n    DefaultLinkModel,\r\n    DefaultNodeModel,\r\n    DiagramModel\r\n} from '@projectstorm/react-diagrams';\r\nimport \"./app.css\";\r\nimport {\r\n    CanvasWidget\r\n} from '@projectstorm/react-canvas-core';\r\n\r\n\r\nconst Architecture = () => {\r\n    const engine = createEngine();\r\n\r\n    const node1 = new DefaultNodeModel({\r\n        name: 'Source',\r\n        color: 'rgb(0,255,0)',\r\n    });\r\n    node1.setPosition(100, 100);\r\n    let port1 = node1.addOutPort(' ');\r\n\r\n    const node2 = new DefaultNodeModel({\r\n        name: 'Destination',\r\n        color: 'rgb(255,0,0)',\r\n    });\r\n    node2.setPosition(400, 100);\r\n    let port2 = node2.addInPort(' ');\r\n\r\n    const link = port1.link < DefaultLinkModel > (port2);\r\n    console.log(link);\r\n\r\n    <button>Submit</button>\r\n\r\n    const model = new DiagramModel();\r\n    model.addAll(node1, node2, link);\r\n    engine.setModel(model);\r\n\r\n    return <CanvasWidget className='srd-demo-canvas' engine={engine} />;\r\n};\r\n\r\nfunction BasicConnection() {\r\n    return (\r\n        <div className='BasicConnection'>\r\n            <Architecture />\r\n        </div>\r\n    )\r\n}\r\nexport default BasicConnection"]},"metadata":{},"sourceType":"module"}