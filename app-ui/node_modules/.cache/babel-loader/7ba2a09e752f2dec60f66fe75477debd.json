{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseModel = void 0;\n\nconst BaseEntity_1 = require(\"./BaseEntity\");\n\nconst CanvasModel_1 = require(\"../entities/canvas/CanvasModel\");\n\nclass BaseModel extends BaseEntity_1.BaseEntity {\n  constructor(options) {\n    super(options);\n  }\n\n  performanceTune() {\n    return true;\n  }\n\n  getParentCanvasModel() {\n    if (!this.parent) {\n      return null;\n    }\n\n    if (this.parent instanceof CanvasModel_1.CanvasModel) {\n      return this.parent;\n    } else if (this.parent instanceof BaseModel) {\n      return this.parent.getParentCanvasModel();\n    }\n\n    return null;\n  }\n\n  getParent() {\n    return this.parent;\n  }\n\n  setParent(parent) {\n    this.parent = parent;\n  }\n\n  getSelectionEntities() {\n    return [this];\n  }\n\n  serialize() {\n    return Object.assign(Object.assign({}, super.serialize()), {\n      type: this.options.type,\n      selected: this.options.selected,\n      extras: this.options.extras\n    });\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.options.extras = event.data.extras;\n    this.options.selected = event.data.selected;\n  }\n\n  getType() {\n    return this.options.type;\n  }\n\n  isSelected() {\n    return this.options.selected;\n  }\n\n  isLocked() {\n    const locked = super.isLocked();\n\n    if (locked) {\n      return true;\n    } // delegate this call up to the parent\n\n\n    if (this.parent) {\n      return this.parent.isLocked();\n    }\n\n    return false;\n  }\n\n  setSelected() {\n    let selected = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    if (this.options.selected !== selected) {\n      this.options.selected = selected;\n      this.fireEvent({\n        isSelected: selected\n      }, 'selectionChanged');\n    }\n  }\n\n  remove() {\n    this.fireEvent({}, 'entityRemoved');\n  }\n\n}\n\nexports.BaseModel = BaseModel;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAQA;;AAoBA,MAAaA,SAAb,SAAgFC,uBAAhF,CAA6F;AAG5FC,cAAYC,OAAZ,EAAiC;AAChC,UAAMA,OAAN;AACA;;AAEDC,iBAAe;AACd,WAAO,IAAP;AACA;;AAEDC,sBAAoB;AACnB,QAAI,CAAC,KAAKC,MAAV,EAAkB;AACjB,aAAO,IAAP;AACA;;AACD,QAAI,KAAKA,MAAL,YAAuBC,yBAA3B,EAAwC;AACvC,aAAO,KAAKD,MAAZ;AACA,KAFD,MAEO,IAAI,KAAKA,MAAL,YAAuBN,SAA3B,EAAsC;AAC5C,aAAO,KAAKM,MAAL,CAAYD,oBAAZ,EAAP;AACA;;AACD,WAAO,IAAP;AACA;;AAEDG,WAAS;AACR,WAAO,KAAKF,MAAZ;AACA;;AAEDG,WAAS,CAACH,MAAD,EAAoB;AAC5B,SAAKA,MAAL,GAAcA,MAAd;AACA;;AAEDI,sBAAoB;AACnB,WAAO,CAAC,IAAD,CAAP;AACA;;AAEDC,WAAS;AACR,2CACI,MAAMA,SAAN,EADJ,GACqB;AACpBC,UAAI,EAAE,KAAKT,OAAL,CAAaS,IADC;AAEpBC,cAAQ,EAAE,KAAKV,OAAL,CAAaU,QAFH;AAGpBC,YAAM,EAAE,KAAKX,OAAL,CAAaW;AAHD,KADrB;AAMA;;AAEDC,aAAW,CAACC,KAAD,EAA8B;AACxC,UAAMD,WAAN,CAAkBC,KAAlB;AACA,SAAKb,OAAL,CAAaW,MAAb,GAAsBE,KAAK,CAACC,IAAN,CAAWH,MAAjC;AACA,SAAKX,OAAL,CAAaU,QAAb,GAAwBG,KAAK,CAACC,IAAN,CAAWJ,QAAnC;AACA;;AAEDK,SAAO;AACN,WAAO,KAAKf,OAAL,CAAaS,IAApB;AACA;;AAEDO,YAAU;AACT,WAAO,KAAKhB,OAAL,CAAaU,QAApB;AACA;;AAEDO,UAAQ;AACP,UAAMC,MAAM,GAAG,MAAMD,QAAN,EAAf;;AACA,QAAIC,MAAJ,EAAY;AACX,aAAO,IAAP;AACA,KAJM,CAMP;;;AACA,QAAI,KAAKf,MAAT,EAAiB;AAChB,aAAO,KAAKA,MAAL,CAAYc,QAAZ,EAAP;AACA;;AACD,WAAO,KAAP;AACA;;AAEDE,aAAW,GAAyB;AAAA,QAAxBT,QAAwB,uEAAJ,IAAI;;AACnC,QAAI,KAAKV,OAAL,CAAaU,QAAb,KAA0BA,QAA9B,EAAwC;AACvC,WAAKV,OAAL,CAAaU,QAAb,GAAwBA,QAAxB;AAEA,WAAKU,SAAL,CACC;AACCJ,kBAAU,EAAEN;AADb,OADD,EAIC,kBAJD;AAMA;AACD;;AAEDW,QAAM;AACL,SAAKD,SAAL,CAAe,EAAf,EAAmB,eAAnB;AACA;;AAtF2F;;AAA7FE","names":["BaseModel","BaseEntity_1","constructor","options","performanceTune","getParentCanvasModel","parent","CanvasModel_1","getParent","setParent","getSelectionEntities","serialize","type","selected","extras","deserialize","event","data","getType","isSelected","isLocked","locked","setSelected","fireEvent","remove","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-canvas-core\\src\\core-models\\BaseModel.ts"],"sourcesContent":["import {\n\tBaseEntity,\n\tBaseEntityEvent,\n\tBaseEntityGenerics,\n\tBaseEntityListener,\n\tBaseEntityOptions,\n\tDeserializeEvent\n} from './BaseEntity';\nimport { CanvasModel } from '../entities/canvas/CanvasModel';\n\nexport interface BaseModelListener extends BaseEntityListener {\n\tselectionChanged?(event: BaseEntityEvent<BaseModel> & { isSelected: boolean }): void;\n\n\tentityRemoved?(event: BaseEntityEvent<BaseModel>): void;\n}\n\nexport interface BaseModelOptions extends BaseEntityOptions {\n\ttype?: string;\n\tselected?: boolean;\n\textras?: any;\n}\n\nexport interface BaseModelGenerics extends BaseEntityGenerics {\n\tLISTENER: BaseModelListener;\n\tPARENT: BaseEntity;\n\tOPTIONS: BaseModelOptions;\n}\n\nexport class BaseModel<G extends BaseModelGenerics = BaseModelGenerics> extends BaseEntity<G> {\n\tprotected parent: G['PARENT'];\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t}\n\n\tperformanceTune() {\n\t\treturn true;\n\t}\n\n\tgetParentCanvasModel(): CanvasModel {\n\t\tif (!this.parent) {\n\t\t\treturn null;\n\t\t}\n\t\tif (this.parent instanceof CanvasModel) {\n\t\t\treturn this.parent;\n\t\t} else if (this.parent instanceof BaseModel) {\n\t\t\treturn this.parent.getParentCanvasModel();\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetParent(): G['PARENT'] {\n\t\treturn this.parent;\n\t}\n\n\tsetParent(parent: G['PARENT']) {\n\t\tthis.parent = parent;\n\t}\n\n\tgetSelectionEntities(): Array<BaseModel> {\n\t\treturn [this];\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\ttype: this.options.type,\n\t\t\tselected: this.options.selected,\n\t\t\textras: this.options.extras\n\t\t};\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.extras = event.data.extras;\n\t\tthis.options.selected = event.data.selected;\n\t}\n\n\tgetType(): string {\n\t\treturn this.options.type;\n\t}\n\n\tisSelected(): boolean {\n\t\treturn this.options.selected;\n\t}\n\n\tisLocked(): boolean {\n\t\tconst locked = super.isLocked();\n\t\tif (locked) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// delegate this call up to the parent\n\t\tif (this.parent) {\n\t\t\treturn this.parent.isLocked();\n\t\t}\n\t\treturn false;\n\t}\n\n\tsetSelected(selected: boolean = true) {\n\t\tif (this.options.selected !== selected) {\n\t\t\tthis.options.selected = selected;\n\n\t\t\tthis.fireEvent(\n\t\t\t\t{\n\t\t\t\t\tisSelected: selected\n\t\t\t\t},\n\t\t\t\t'selectionChanged'\n\t\t\t);\n\t\t}\n\t}\n\n\tremove() {\n\t\tthis.fireEvent({}, 'entityRemoved');\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}