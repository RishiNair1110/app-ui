{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DragCanvasState = void 0;\n\nconst AbstractDisplacementState_1 = require(\"../core-state/AbstractDisplacementState\");\n\nclass DragCanvasState extends AbstractDisplacementState_1.AbstractDisplacementState {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      name: 'drag-canvas'\n    });\n    this.config = Object.assign({\n      allowDrag: true\n    }, options);\n  }\n\n  activated(prev) {\n    const _super = Object.create(null, {\n      activated: {\n        get: () => super.activated\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      _super.activated.call(this, prev);\n\n      this.engine.getModel().clearSelection();\n      yield this.engine.repaintCanvas(true); // we can block layer rendering because we are only targeting the transforms\n\n      for (let layer of this.engine.getModel().getLayers()) {\n        layer.allowRepaint(false);\n      }\n\n      this.initialCanvasX = this.engine.getModel().getOffsetX();\n      this.initialCanvasY = this.engine.getModel().getOffsetY();\n    });\n  }\n\n  deactivated(next) {\n    super.deactivated(next);\n\n    for (let layer of this.engine.getModel().getLayers()) {\n      layer.allowRepaint(true);\n    }\n  }\n\n  fireMouseMoved(event) {\n    if (this.config.allowDrag) {\n      this.engine.getModel().setOffset(this.initialCanvasX + event.displacementX, this.initialCanvasY + event.displacementY);\n      this.engine.repaintCanvas();\n    }\n  }\n\n}\n\nexports.DragCanvasState = DragCanvasState;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAUA,MAAaA,eAAb,SAAqCC,qDAArC,CAA8D;AAM7DC,gBAAgD;AAAA,QAApCC,OAAoC,uEAAF,EAAE;AAC/C,UAAM;AACLC,UAAI,EAAE;AADD,KAAN;AAGA,SAAKC,MAAL,GAAWC;AACVC,eAAS,EAAE;AADD,OAEPJ,OAFO,CAAX;AAIA;;AAEKK,WAAS,CAACC,IAAD,EAAK;;;;;;;;AACnBC,aAAMF,SAAN,CAAeG,IAAf,CAAe,IAAf,EAAgBF,IAAhB;;AACA,WAAKG,MAAL,CAAYC,QAAZ,GAAuBC,cAAvB;AACA,YAAM,KAAKF,MAAL,CAAYG,aAAZ,CAA0B,IAA1B,CAAN,EAEA;;AACA,WAAK,IAAIC,KAAT,IAAkB,KAAKJ,MAAL,CAAYC,QAAZ,GAAuBI,SAAvB,EAAlB,EAAsD;AACrDD,aAAK,CAACE,YAAN,CAAmB,KAAnB;AACA;;AAED,WAAKC,cAAL,GAAsB,KAAKP,MAAL,CAAYC,QAAZ,GAAuBO,UAAvB,EAAtB;AACA,WAAKC,cAAL,GAAsB,KAAKT,MAAL,CAAYC,QAAZ,GAAuBS,UAAvB,EAAtB;AACA;AAAA;;AAEDC,aAAW,CAACC,IAAD,EAAY;AACtB,UAAMD,WAAN,CAAkBC,IAAlB;;AACA,SAAK,IAAIR,KAAT,IAAkB,KAAKJ,MAAL,CAAYC,QAAZ,GAAuBI,SAAvB,EAAlB,EAAsD;AACrDD,WAAK,CAACE,YAAN,CAAmB,IAAnB;AACA;AACD;;AAEDO,gBAAc,CAACC,KAAD,EAAsC;AACnD,QAAI,KAAKrB,MAAL,CAAYE,SAAhB,EAA2B;AAC1B,WAAKK,MAAL,CACEC,QADF,GAEEc,SAFF,CAEY,KAAKR,cAAL,GAAsBO,KAAK,CAACE,aAFxC,EAEuD,KAAKP,cAAL,GAAsBK,KAAK,CAACG,aAFnF;AAGA,WAAKjB,MAAL,CAAYG,aAAZ;AACA;AACD;;AA5C4D;;AAA9De","names":["DragCanvasState","AbstractDisplacementState_1","constructor","options","name","config","Object","allowDrag","activated","prev","_super","call","engine","getModel","clearSelection","repaintCanvas","layer","getLayers","allowRepaint","initialCanvasX","getOffsetX","initialCanvasY","getOffsetY","deactivated","next","fireMouseMoved","event","setOffset","displacementX","displacementY","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-canvas-core\\src\\states\\DragCanvasState.ts"],"sourcesContent":["import { AbstractDisplacementState, AbstractDisplacementStateEvent } from '../core-state/AbstractDisplacementState';\nimport { State } from '../core-state/State';\n\nexport interface DragCanvasStateOptions {\n\t/**\n\t * If enabled, the canvas is available to drag\n\t */\n\tallowDrag?: boolean;\n}\n\nexport class DragCanvasState extends AbstractDisplacementState {\n\t// store this as we drag the canvas\n\tinitialCanvasX: number;\n\tinitialCanvasY: number;\n\tconfig: DragCanvasStateOptions;\n\n\tconstructor(options: DragCanvasStateOptions = {}) {\n\t\tsuper({\n\t\t\tname: 'drag-canvas'\n\t\t});\n\t\tthis.config = {\n\t\t\tallowDrag: true,\n\t\t\t...options\n\t\t};\n\t}\n\n\tasync activated(prev) {\n\t\tsuper.activated(prev);\n\t\tthis.engine.getModel().clearSelection();\n\t\tawait this.engine.repaintCanvas(true);\n\n\t\t// we can block layer rendering because we are only targeting the transforms\n\t\tfor (let layer of this.engine.getModel().getLayers()) {\n\t\t\tlayer.allowRepaint(false);\n\t\t}\n\n\t\tthis.initialCanvasX = this.engine.getModel().getOffsetX();\n\t\tthis.initialCanvasY = this.engine.getModel().getOffsetY();\n\t}\n\n\tdeactivated(next: State) {\n\t\tsuper.deactivated(next);\n\t\tfor (let layer of this.engine.getModel().getLayers()) {\n\t\t\tlayer.allowRepaint(true);\n\t\t}\n\t}\n\n\tfireMouseMoved(event: AbstractDisplacementStateEvent) {\n\t\tif (this.config.allowDrag) {\n\t\t\tthis.engine\n\t\t\t\t.getModel()\n\t\t\t\t.setOffset(this.initialCanvasX + event.displacementX, this.initialCanvasY + event.displacementY);\n\t\t\tthis.engine.repaintCanvas();\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}