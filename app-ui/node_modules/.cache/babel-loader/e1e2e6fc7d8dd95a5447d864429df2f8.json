{"ast":null,"code":"/**\r\n * @author aniero / https://github.com/aniero\r\n */\nvar DiagonalMovement = require('../core/DiagonalMovement');\n\nvar JPFNeverMoveDiagonally = require('./JPFNeverMoveDiagonally');\n\nvar JPFAlwaysMoveDiagonally = require('./JPFAlwaysMoveDiagonally');\n\nvar JPFMoveDiagonallyIfNoObstacles = require('./JPFMoveDiagonallyIfNoObstacles');\n\nvar JPFMoveDiagonallyIfAtMostOneObstacle = require('./JPFMoveDiagonallyIfAtMostOneObstacle');\n/**\r\n * Path finder using the Jump Point Search algorithm\r\n * @param {Object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {DiagonalMovement} opt.diagonalMovement Condition under which diagonal\r\n *      movement will be allowed.\r\n */\n\n\nfunction JumpPointFinder(opt) {\n  opt = opt || {};\n\n  if (opt.diagonalMovement === DiagonalMovement.Never) {\n    return new JPFNeverMoveDiagonally(opt);\n  } else if (opt.diagonalMovement === DiagonalMovement.Always) {\n    return new JPFAlwaysMoveDiagonally(opt);\n  } else if (opt.diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\n    return new JPFMoveDiagonallyIfNoObstacles(opt);\n  } else {\n    return new JPFMoveDiagonallyIfAtMostOneObstacle(opt);\n  }\n}\n\nmodule.exports = JumpPointFinder;","map":{"version":3,"sources":["C:/Users/nairr/app-ui/app-ui/node_modules/pathfinding/src/finders/JumpPointFinder.js"],"names":["DiagonalMovement","require","JPFNeverMoveDiagonally","JPFAlwaysMoveDiagonally","JPFMoveDiagonallyIfNoObstacles","JPFMoveDiagonallyIfAtMostOneObstacle","JumpPointFinder","opt","diagonalMovement","Never","Always","OnlyWhenNoObstacles","module","exports"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,0BAAD,CAA9B;;AACA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,0BAAD,CAApC;;AACA,IAAIE,uBAAuB,GAAGF,OAAO,CAAC,2BAAD,CAArC;;AACA,IAAIG,8BAA8B,GAAGH,OAAO,CAAC,kCAAD,CAA5C;;AACA,IAAII,oCAAoC,GAAGJ,OAAO,CAAC,wCAAD,CAAlD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,eAAT,CAAyBC,GAAzB,EAA8B;AAC1BA,EAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;;AACA,MAAIA,GAAG,CAACC,gBAAJ,KAAyBR,gBAAgB,CAACS,KAA9C,EAAqD;AACjD,WAAO,IAAIP,sBAAJ,CAA2BK,GAA3B,CAAP;AACH,GAFD,MAEO,IAAIA,GAAG,CAACC,gBAAJ,KAAyBR,gBAAgB,CAACU,MAA9C,EAAsD;AACzD,WAAO,IAAIP,uBAAJ,CAA4BI,GAA5B,CAAP;AACH,GAFM,MAEA,IAAIA,GAAG,CAACC,gBAAJ,KAAyBR,gBAAgB,CAACW,mBAA9C,EAAmE;AACtE,WAAO,IAAIP,8BAAJ,CAAmCG,GAAnC,CAAP;AACH,GAFM,MAEA;AACH,WAAO,IAAIF,oCAAJ,CAAyCE,GAAzC,CAAP;AACH;AACJ;;AAEDK,MAAM,CAACC,OAAP,GAAiBP,eAAjB","sourcesContent":["/**\r\n * @author aniero / https://github.com/aniero\r\n */\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\nvar JPFNeverMoveDiagonally = require('./JPFNeverMoveDiagonally');\r\nvar JPFAlwaysMoveDiagonally = require('./JPFAlwaysMoveDiagonally');\r\nvar JPFMoveDiagonallyIfNoObstacles = require('./JPFMoveDiagonallyIfNoObstacles');\r\nvar JPFMoveDiagonallyIfAtMostOneObstacle = require('./JPFMoveDiagonallyIfAtMostOneObstacle');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm\r\n * @param {Object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {DiagonalMovement} opt.diagonalMovement Condition under which diagonal\r\n *      movement will be allowed.\r\n */\r\nfunction JumpPointFinder(opt) {\r\n    opt = opt || {};\r\n    if (opt.diagonalMovement === DiagonalMovement.Never) {\r\n        return new JPFNeverMoveDiagonally(opt);\r\n    } else if (opt.diagonalMovement === DiagonalMovement.Always) {\r\n        return new JPFAlwaysMoveDiagonally(opt);\r\n    } else if (opt.diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        return new JPFMoveDiagonallyIfNoObstacles(opt);\r\n    } else {\r\n        return new JPFMoveDiagonallyIfAtMostOneObstacle(opt);\r\n    }\r\n}\r\n\r\nmodule.exports = JumpPointFinder;\r\n"]},"metadata":{},"sourceType":"script"}