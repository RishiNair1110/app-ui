{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DagreEngine = void 0;\n\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\n\nconst dagre = require(\"dagre\");\n\nconst _ = require(\"lodash\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nclass DagreEngine {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.options = options;\n  }\n\n  redistribute(model) {\n    // Create a new directed graph\n    var g = new dagre.graphlib.Graph({\n      multigraph: true,\n      compound: true\n    });\n    g.setGraph(this.options.graph || {});\n    g.setDefaultEdgeLabel(function () {\n      return {};\n    }); // set nodes\n\n    _.forEach(model.getNodes(), node => {\n      g.setNode(node.getID(), {\n        width: node.width,\n        height: node.height\n      });\n    });\n\n    _.forEach(model.getLinks(), link => {\n      // set edges\n      if (link.getSourcePort() && link.getTargetPort()) {\n        g.setEdge({\n          v: link.getSourcePort().getNode().getID(),\n          w: link.getTargetPort().getNode().getID(),\n          name: link.getID()\n        });\n      }\n    }); // layout the graph\n\n\n    dagre.layout(g);\n    g.nodes().forEach(v => {\n      const node = g.node(v);\n      model.getNode(v).setPosition(node.x - node.width / 2, node.y - node.height / 2);\n    }); // also include links?\n\n    if (this.options.includeLinks) {\n      g.edges().forEach(e => {\n        const edge = g.edge(e);\n        const link = model.getLink(e.name);\n        const points = [link.getFirstPoint()];\n\n        for (let i = 1; i < edge.points.length - 1; i++) {\n          points.push(new react_diagrams_core_1.PointModel({\n            link: link,\n            position: new geometry_1.Point(edge.points[i].x, edge.points[i].y)\n          }));\n        }\n\n        link.setPoints(points.concat(link.getLastPoint()));\n      });\n    }\n  }\n\n}\n\nexports.DagreEngine = DagreEngine;","map":{"version":3,"mappings":"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","names":["DagreEngine","constructor","options","redistribute","model","g","dagre","graphlib","Graph","multigraph","compound","setGraph","graph","setDefaultEdgeLabel","_","forEach","getNodes","node","setNode","getID","width","height","getLinks","link","getSourcePort","getTargetPort","setEdge","v","getNode","w","name","layout","nodes","setPosition","x","y","includeLinks","edges","e","edge","getLink","points","getFirstPoint","i","length","push","react_diagrams_core_1","position","geometry_1","setPoints","concat","getLastPoint","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-routing\\src\\dagre\\DagreEngine.ts"],"sourcesContent":["import { DiagramModel, PointModel } from '@projectstorm/react-diagrams-core';\nimport * as dagre from 'dagre';\nimport * as _ from 'lodash';\nimport { GraphLabel } from 'dagre';\nimport { Point } from '@projectstorm/geometry';\n\nexport interface DagreEngineOptions {\n\tgraph?: GraphLabel;\n\t/**\n\t * Will also layout links\n\t */\n\tincludeLinks?: boolean;\n}\n\nexport class DagreEngine {\n\toptions: DagreEngineOptions;\n\n\tconstructor(options: DagreEngineOptions = {}) {\n\t\tthis.options = options;\n\t}\n\n\tredistribute(model: DiagramModel) {\n\t\t// Create a new directed graph\n\t\tvar g = new dagre.graphlib.Graph({\n\t\t\tmultigraph: true,\n\t\t\tcompound: true\n\t\t});\n\t\tg.setGraph(this.options.graph || {});\n\t\tg.setDefaultEdgeLabel(function () {\n\t\t\treturn {};\n\t\t});\n\n\t\t// set nodes\n\t\t_.forEach(model.getNodes(), (node) => {\n\t\t\tg.setNode(node.getID(), { width: node.width, height: node.height });\n\t\t});\n\n\t\t_.forEach(model.getLinks(), (link) => {\n\t\t\t// set edges\n\t\t\tif (link.getSourcePort() && link.getTargetPort()) {\n\t\t\t\tg.setEdge({\n\t\t\t\t\tv: link.getSourcePort().getNode().getID(),\n\t\t\t\t\tw: link.getTargetPort().getNode().getID(),\n\t\t\t\t\tname: link.getID()\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// layout the graph\n\t\tdagre.layout(g);\n\n\t\tg.nodes().forEach((v) => {\n\t\t\tconst node = g.node(v);\n\t\t\tmodel.getNode(v).setPosition(node.x - node.width / 2, node.y - node.height / 2);\n\t\t});\n\n\t\t// also include links?\n\t\tif (this.options.includeLinks) {\n\t\t\tg.edges().forEach((e) => {\n\t\t\t\tconst edge = g.edge(e);\n\t\t\t\tconst link = model.getLink(e.name);\n\n\t\t\t\tconst points = [link.getFirstPoint()];\n\t\t\t\tfor (let i = 1; i < edge.points.length - 1; i++) {\n\t\t\t\t\tpoints.push(new PointModel({ link: link, position: new Point(edge.points[i].x, edge.points[i].y) }));\n\t\t\t\t}\n\t\t\t\tlink.setPoints(points.concat(link.getLastPoint()));\n\t\t\t});\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}