{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DiagramEngine = void 0;\n\nconst NodeModel_1 = require(\"./entities/node/NodeModel\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n/**\n * Passed as a parameter to the DiagramWidget\n */\n\n\nclass DiagramEngine extends react_canvas_core_1.CanvasEngine {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options);\n    this.maxNumberPointsPerLink = 1000; // create banks for the different factory types\n\n    this.nodeFactories = new react_canvas_core_1.FactoryBank();\n    this.linkFactories = new react_canvas_core_1.FactoryBank();\n    this.portFactories = new react_canvas_core_1.FactoryBank();\n    this.labelFactories = new react_canvas_core_1.FactoryBank();\n\n    const setup = factory => {\n      factory.registerListener({\n        factoryAdded: event => {\n          event.factory.setDiagramEngine(this);\n        },\n        factoryRemoved: event => {\n          event.factory.setDiagramEngine(null);\n        }\n      });\n    };\n\n    setup(this.nodeFactories);\n    setup(this.linkFactories);\n    setup(this.portFactories);\n    setup(this.labelFactories);\n  }\n  /**\n   * Gets a model and element under the mouse cursor\n   */\n\n\n  getMouseElement(event) {\n    var target = event.target;\n    var diagramModel = this.model; //is it a port\n\n    var element = react_canvas_core_1.Toolkit.closest(target, '.port[data-name]');\n\n    if (element) {\n      var nodeElement = react_canvas_core_1.Toolkit.closest(target, '.node[data-nodeid]');\n      return diagramModel.getNode(nodeElement.getAttribute('data-nodeid')).getPort(element.getAttribute('data-name'));\n    } //look for a point\n\n\n    element = react_canvas_core_1.Toolkit.closest(target, '.point[data-id]');\n\n    if (element) {\n      return diagramModel.getLink(element.getAttribute('data-linkid')).getPointModel(element.getAttribute('data-id'));\n    } //look for a link\n\n\n    element = react_canvas_core_1.Toolkit.closest(target, '[data-linkid]');\n\n    if (element) {\n      return diagramModel.getLink(element.getAttribute('data-linkid'));\n    } //look for a node\n\n\n    element = react_canvas_core_1.Toolkit.closest(target, '.node[data-nodeid]');\n\n    if (element) {\n      return diagramModel.getNode(element.getAttribute('data-nodeid'));\n    }\n\n    return null;\n  } //!-------------- FACTORIES ------------\n\n\n  getNodeFactories() {\n    return this.nodeFactories;\n  }\n\n  getLinkFactories() {\n    return this.linkFactories;\n  }\n\n  getLabelFactories() {\n    return this.labelFactories;\n  }\n\n  getPortFactories() {\n    return this.portFactories;\n  }\n\n  getFactoryForNode(node) {\n    if (typeof node === 'string') {\n      return this.nodeFactories.getFactory(node);\n    }\n\n    return this.nodeFactories.getFactory(node.getType());\n  }\n\n  getFactoryForLink(link) {\n    if (typeof link === 'string') {\n      return this.linkFactories.getFactory(link);\n    }\n\n    return this.linkFactories.getFactory(link.getType());\n  }\n\n  getFactoryForLabel(label) {\n    if (typeof label === 'string') {\n      return this.labelFactories.getFactory(label);\n    }\n\n    return this.labelFactories.getFactory(label.getType());\n  }\n\n  getFactoryForPort(port) {\n    if (typeof port === 'string') {\n      return this.portFactories.getFactory(port);\n    }\n\n    return this.portFactories.getFactory(port.getType());\n  }\n\n  generateWidgetForLink(link) {\n    return this.getFactoryForLink(link).generateReactWidget({\n      model: link\n    });\n  }\n\n  generateWidgetForNode(node) {\n    return this.getFactoryForNode(node).generateReactWidget({\n      model: node\n    });\n  }\n\n  getNodeElement(node) {\n    const selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\n\n    if (selector === null) {\n      throw new Error('Cannot find Node element with nodeID: [' + node.getID() + ']');\n    }\n\n    return selector;\n  }\n\n  getNodePortElement(port) {\n    var selector = this.canvas.querySelector(`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`);\n\n    if (selector === null) {\n      throw new Error('Cannot find Node Port element with nodeID: [' + port.getParent().getID() + '] and name: [' + port.getName() + ']');\n    }\n\n    return selector;\n  }\n\n  getPortCenter(port) {\n    return this.getPortCoords(port).getOrigin();\n  }\n  /**\n   * Calculate rectangular coordinates of the port passed in.\n   */\n\n\n  getPortCoords(port, element) {\n    if (!this.canvas) {\n      throw new Error('Canvas needs to be set first');\n    }\n\n    if (!element) {\n      element = this.getNodePortElement(port);\n    }\n\n    const sourceRect = element.getBoundingClientRect();\n    const point = this.getRelativeMousePoint({\n      clientX: sourceRect.left,\n      clientY: sourceRect.top\n    });\n    const zoom = this.model.getZoomLevel() / 100.0;\n    return new geometry_1.Rectangle(point.x, point.y, sourceRect.width / zoom, sourceRect.height / zoom);\n  }\n  /**\n   * Determine the width and height of the node passed in.\n   * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n   */\n\n\n  getNodeDimensions(node) {\n    if (!this.canvas) {\n      return {\n        width: 0,\n        height: 0\n      };\n    }\n\n    const nodeElement = this.getNodeElement(node);\n    const nodeRect = nodeElement.getBoundingClientRect();\n    return {\n      width: nodeRect.width,\n      height: nodeRect.height\n    };\n  }\n\n  getBoundingNodesRect(nodes) {\n    if (nodes) {\n      if (nodes.length === 0) {\n        return new geometry_1.Rectangle(0, 0, 0, 0);\n      }\n\n      return geometry_1.Polygon.boundingBoxFromPolygons(nodes.map(node => node.getBoundingBox()));\n    }\n  }\n\n  zoomToFitSelectedNodes(options) {\n    const nodes = this.model.getSelectedEntities().filter(entity => entity instanceof NodeModel_1.NodeModel);\n    this.zoomToFitNodes({\n      margin: options.margin,\n      maxZoom: options.maxZoom,\n      nodes: nodes.length > 0 ? nodes : null\n    });\n  }\n\n  zoomToFitNodes(options) {\n    var _this = this;\n\n    let margin = options || 0;\n    let nodes = [];\n    let maxZoom = null;\n\n    if (!!options && typeof options == 'object') {\n      margin = options.margin || 0;\n      nodes = options.nodes || [];\n      maxZoom = options.maxZoom || null;\n    } // no node selected\n\n\n    if (nodes.length === 0) {\n      nodes = this.model.getNodes();\n    }\n\n    const nodesRect = this.getBoundingNodesRect(nodes);\n\n    if (nodesRect) {\n      // there is something we should zoom on\n      let canvasRect = this.canvas.getBoundingClientRect();\n\n      const calculate = function () {\n        let margin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        // work out zoom\n        const xFactor = _this.canvas.clientWidth / (nodesRect.getWidth() + margin * 2);\n        const yFactor = _this.canvas.clientHeight / (nodesRect.getHeight() + margin * 2);\n        let zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n\n        if (maxZoom && zoomFactor > maxZoom) {\n          zoomFactor = maxZoom;\n        }\n\n        return {\n          zoom: zoomFactor,\n          x: canvasRect.width / 2 - ((nodesRect.getWidth() + margin * 2) / 2 + nodesRect.getTopLeft().x) * zoomFactor + margin,\n          y: canvasRect.height / 2 - ((nodesRect.getHeight() + margin * 2) / 2 + nodesRect.getTopLeft().y) * zoomFactor + margin\n        };\n      };\n\n      let params = calculate(0);\n\n      if (margin) {\n        if (params.x < margin || params.y < margin) {\n          params = calculate(margin);\n        }\n      } // apply\n\n\n      this.model.setZoomLevel(params.zoom * 100);\n      this.model.setOffset(params.x, params.y);\n      this.repaintCanvas();\n    }\n  }\n\n  getMaxNumberPointsPerLink() {\n    return this.maxNumberPointsPerLink;\n  }\n\n  setMaxNumberPointsPerLink(max) {\n    this.maxNumberPointsPerLink = max;\n  }\n\n}\n\nexports.DiagramEngine = DiagramEngine;","map":{"version":3,"mappings":"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","names":["DiagramEngine","react_canvas_core_1","constructor","options","maxNumberPointsPerLink","nodeFactories","linkFactories","portFactories","labelFactories","setup","factory","registerListener","factoryAdded","event","setDiagramEngine","factoryRemoved","getMouseElement","target","diagramModel","model","element","closest","nodeElement","getNode","getAttribute","getPort","getLink","getPointModel","getNodeFactories","getLinkFactories","getLabelFactories","getPortFactories","getFactoryForNode","node","getFactory","getType","getFactoryForLink","link","getFactoryForLabel","label","getFactoryForPort","port","generateWidgetForLink","generateReactWidget","generateWidgetForNode","getNodeElement","selector","canvas","querySelector","getID","Error","getNodePortElement","getName","getParent","getPortCenter","getPortCoords","getOrigin","sourceRect","getBoundingClientRect","point","getRelativeMousePoint","clientX","left","clientY","top","zoom","getZoomLevel","geometry_1","x","y","width","height","getNodeDimensions","nodeRect","getBoundingNodesRect","nodes","length","boundingBoxFromPolygons","map","getBoundingBox","zoomToFitSelectedNodes","getSelectedEntities","filter","entity","NodeModel_1","zoomToFitNodes","margin","maxZoom","getNodes","nodesRect","canvasRect","calculate","xFactor","clientWidth","getWidth","yFactor","clientHeight","getHeight","zoomFactor","getTopLeft","params","setZoomLevel","setOffset","repaintCanvas","getMaxNumberPointsPerLink","setMaxNumberPointsPerLink","max","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-core\\src\\DiagramEngine.ts"],"sourcesContent":["import { NodeModel } from './entities/node/NodeModel';\nimport { PortModel } from './entities/port/PortModel';\nimport { LinkModel } from './entities/link/LinkModel';\nimport { LabelModel } from './entities/label/LabelModel';\nimport { Point, Rectangle, Polygon } from '@projectstorm/geometry';\nimport { MouseEvent } from 'react';\nimport {\n\tAbstractModelFactory,\n\tAbstractReactFactory,\n\tBaseModel,\n\tCanvasEngine,\n\tFactoryBank,\n\tToolkit,\n\tCanvasEngineListener,\n\tCanvasEngineOptions\n} from '@projectstorm/react-canvas-core';\nimport { DiagramModel } from './models/DiagramModel';\n\n/**\n * Passed as a parameter to the DiagramWidget\n */\nexport class DiagramEngine extends CanvasEngine<CanvasEngineListener, DiagramModel> {\n\tprotected nodeFactories: FactoryBank<AbstractReactFactory<NodeModel, DiagramEngine>>;\n\tprotected linkFactories: FactoryBank<AbstractReactFactory<LinkModel, DiagramEngine>>;\n\tprotected portFactories: FactoryBank<AbstractModelFactory<PortModel, DiagramEngine>>;\n\tprotected labelFactories: FactoryBank<AbstractReactFactory<LabelModel, DiagramEngine>>;\n\n\tmaxNumberPointsPerLink: number;\n\n\tconstructor(options: CanvasEngineOptions = {}) {\n\t\tsuper(options);\n\t\tthis.maxNumberPointsPerLink = 1000;\n\n\t\t// create banks for the different factory types\n\t\tthis.nodeFactories = new FactoryBank();\n\t\tthis.linkFactories = new FactoryBank();\n\t\tthis.portFactories = new FactoryBank();\n\t\tthis.labelFactories = new FactoryBank();\n\n\t\tconst setup = (factory: FactoryBank) => {\n\t\t\tfactory.registerListener({\n\t\t\t\tfactoryAdded: (event) => {\n\t\t\t\t\tevent.factory.setDiagramEngine(this);\n\t\t\t\t},\n\t\t\t\tfactoryRemoved: (event) => {\n\t\t\t\t\tevent.factory.setDiagramEngine(null);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tsetup(this.nodeFactories);\n\t\tsetup(this.linkFactories);\n\t\tsetup(this.portFactories);\n\t\tsetup(this.labelFactories);\n\t}\n\n\t/**\n\t * Gets a model and element under the mouse cursor\n\t */\n\tgetMouseElement(event: MouseEvent): BaseModel {\n\t\tvar target = event.target as Element;\n\t\tvar diagramModel = this.model;\n\n\t\t//is it a port\n\t\tvar element = Toolkit.closest(target, '.port[data-name]');\n\t\tif (element) {\n\t\t\tvar nodeElement = Toolkit.closest(target, '.node[data-nodeid]') as HTMLElement;\n\t\t\treturn diagramModel.getNode(nodeElement.getAttribute('data-nodeid')).getPort(element.getAttribute('data-name'));\n\t\t}\n\n\t\t//look for a point\n\t\telement = Toolkit.closest(target, '.point[data-id]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getLink(element.getAttribute('data-linkid')).getPointModel(element.getAttribute('data-id'));\n\t\t}\n\n\t\t//look for a link\n\t\telement = Toolkit.closest(target, '[data-linkid]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getLink(element.getAttribute('data-linkid'));\n\t\t}\n\n\t\t//look for a node\n\t\telement = Toolkit.closest(target, '.node[data-nodeid]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getNode(element.getAttribute('data-nodeid'));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//!-------------- FACTORIES ------------\n\n\tgetNodeFactories() {\n\t\treturn this.nodeFactories;\n\t}\n\n\tgetLinkFactories() {\n\t\treturn this.linkFactories;\n\t}\n\n\tgetLabelFactories() {\n\t\treturn this.labelFactories;\n\t}\n\n\tgetPortFactories() {\n\t\treturn this.portFactories;\n\t}\n\n\tgetFactoryForNode<F extends AbstractReactFactory<NodeModel, DiagramEngine>>(node: NodeModel | string) {\n\t\tif (typeof node === 'string') {\n\t\t\treturn this.nodeFactories.getFactory(node);\n\t\t}\n\t\treturn this.nodeFactories.getFactory(node.getType());\n\t}\n\n\tgetFactoryForLink<F extends AbstractReactFactory<LinkModel, DiagramEngine>>(link: LinkModel | string) {\n\t\tif (typeof link === 'string') {\n\t\t\treturn this.linkFactories.getFactory<F>(link);\n\t\t}\n\t\treturn this.linkFactories.getFactory<F>(link.getType());\n\t}\n\n\tgetFactoryForLabel<F extends AbstractReactFactory<LabelModel, DiagramEngine>>(label: LabelModel) {\n\t\tif (typeof label === 'string') {\n\t\t\treturn this.labelFactories.getFactory(label);\n\t\t}\n\t\treturn this.labelFactories.getFactory(label.getType());\n\t}\n\n\tgetFactoryForPort<F extends AbstractModelFactory<PortModel, DiagramEngine>>(port: PortModel) {\n\t\tif (typeof port === 'string') {\n\t\t\treturn this.portFactories.getFactory<F>(port);\n\t\t}\n\t\treturn this.portFactories.getFactory<F>(port.getType());\n\t}\n\n\tgenerateWidgetForLink(link: LinkModel): JSX.Element {\n\t\treturn this.getFactoryForLink(link).generateReactWidget({ model: link });\n\t}\n\n\tgenerateWidgetForNode(node: NodeModel): JSX.Element {\n\t\treturn this.getFactoryForNode(node).generateReactWidget({ model: node });\n\t}\n\n\tgetNodeElement(node: NodeModel): Element {\n\t\tconst selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\n\t\tif (selector === null) {\n\t\t\tthrow new Error('Cannot find Node element with nodeID: [' + node.getID() + ']');\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetNodePortElement(port: PortModel): any {\n\t\tvar selector = this.canvas.querySelector(\n\t\t\t`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`\n\t\t);\n\t\tif (selector === null) {\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot find Node Port element with nodeID: [' +\n\t\t\t\t\tport.getParent().getID() +\n\t\t\t\t\t'] and name: [' +\n\t\t\t\t\tport.getName() +\n\t\t\t\t\t']'\n\t\t\t);\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetPortCenter(port: PortModel): Point {\n\t\treturn this.getPortCoords(port).getOrigin();\n\t}\n\n\t/**\n\t * Calculate rectangular coordinates of the port passed in.\n\t */\n\tgetPortCoords(port: PortModel, element?: HTMLDivElement): Rectangle {\n\t\tif (!this.canvas) {\n\t\t\tthrow new Error('Canvas needs to be set first');\n\t\t}\n\t\tif (!element) {\n\t\t\telement = this.getNodePortElement(port);\n\t\t}\n\t\tconst sourceRect = element.getBoundingClientRect();\n\t\tconst point = this.getRelativeMousePoint({\n\t\t\tclientX: sourceRect.left,\n\t\t\tclientY: sourceRect.top\n\t\t});\n\t\tconst zoom = this.model.getZoomLevel() / 100.0;\n\t\treturn new Rectangle(point.x, point.y, sourceRect.width / zoom, sourceRect.height / zoom);\n\t}\n\n\t/**\n\t * Determine the width and height of the node passed in.\n\t * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n\t */\n\tgetNodeDimensions(node: NodeModel): { width: number; height: number } {\n\t\tif (!this.canvas) {\n\t\t\treturn {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t};\n\t\t}\n\n\t\tconst nodeElement = this.getNodeElement(node);\n\t\tconst nodeRect = nodeElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\twidth: nodeRect.width,\n\t\t\theight: nodeRect.height\n\t\t};\n\t}\n\n\tgetBoundingNodesRect(nodes: NodeModel[]): Rectangle {\n\t\tif (nodes) {\n\t\t\tif (nodes.length === 0) {\n\t\t\t\treturn new Rectangle(0, 0, 0, 0);\n\t\t\t}\n\n\t\t\treturn Polygon.boundingBoxFromPolygons(nodes.map((node) => node.getBoundingBox()));\n\t\t}\n\t}\n\n\tzoomToFitSelectedNodes(options: { margin?: number; maxZoom?: number }) {\n\t\tconst nodes: NodeModel[] = this.model\n\t\t\t.getSelectedEntities()\n\t\t\t.filter((entity) => entity instanceof NodeModel) as NodeModel[];\n\t\tthis.zoomToFitNodes({\n\t\t\tmargin: options.margin,\n\t\t\tmaxZoom: options.maxZoom,\n\t\t\tnodes: nodes.length > 0 ? nodes : null\n\t\t});\n\t}\n\n\tzoomToFitNodes(options: { margin?: number; nodes?: NodeModel[]; maxZoom?: number });\n\t/**\n\t * @deprecated\n\t */\n\tzoomToFitNodes(margin: number);\n\tzoomToFitNodes(options) {\n\t\tlet margin = options || 0;\n\t\tlet nodes: NodeModel[] = [];\n\t\tlet maxZoom: number | null = null;\n\t\tif (!!options && typeof options == 'object') {\n\t\t\tmargin = options.margin || 0;\n\t\t\tnodes = options.nodes || [];\n\t\t\tmaxZoom = options.maxZoom || null;\n\t\t}\n\n\t\t// no node selected\n\t\tif (nodes.length === 0) {\n\t\t\tnodes = this.model.getNodes();\n\t\t}\n\t\tconst nodesRect = this.getBoundingNodesRect(nodes);\n\t\tif (nodesRect) {\n\t\t\t// there is something we should zoom on\n\t\t\tlet canvasRect = this.canvas.getBoundingClientRect();\n\n\t\t\tconst calculate = (margin: number = 0) => {\n\t\t\t\t// work out zoom\n\t\t\t\tconst xFactor = this.canvas.clientWidth / (nodesRect.getWidth() + margin * 2);\n\t\t\t\tconst yFactor = this.canvas.clientHeight / (nodesRect.getHeight() + margin * 2);\n\n\t\t\t\tlet zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n\t\t\t\tif (maxZoom && zoomFactor > maxZoom) {\n\t\t\t\t\tzoomFactor = maxZoom;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tzoom: zoomFactor,\n\t\t\t\t\tx:\n\t\t\t\t\t\tcanvasRect.width / 2 -\n\t\t\t\t\t\t((nodesRect.getWidth() + margin * 2) / 2 + nodesRect.getTopLeft().x) * zoomFactor +\n\t\t\t\t\t\tmargin,\n\t\t\t\t\ty:\n\t\t\t\t\t\tcanvasRect.height / 2 -\n\t\t\t\t\t\t((nodesRect.getHeight() + margin * 2) / 2 + nodesRect.getTopLeft().y) * zoomFactor +\n\t\t\t\t\t\tmargin\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tlet params = calculate(0);\n\t\t\tif (margin) {\n\t\t\t\tif (params.x < margin || params.y < margin) {\n\t\t\t\t\tparams = calculate(margin);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// apply\n\t\t\tthis.model.setZoomLevel(params.zoom * 100);\n\t\t\tthis.model.setOffset(params.x, params.y);\n\t\t\tthis.repaintCanvas();\n\t\t}\n\t}\n\n\tgetMaxNumberPointsPerLink(): number {\n\t\treturn this.maxNumberPointsPerLink;\n\t}\n\n\tsetMaxNumberPointsPerLink(max: number) {\n\t\tthis.maxNumberPointsPerLink = max;\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}