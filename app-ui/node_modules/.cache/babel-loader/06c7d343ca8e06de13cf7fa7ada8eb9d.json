{"ast":null,"code":"var Node = require('./Node');\n\nvar DiagonalMovement = require('./DiagonalMovement');\n/**\r\n * The Grid class, which serves as the encapsulation of the layout of the nodes.\r\n * @constructor\r\n * @param {number|Array<Array<(number|boolean)>>} width_or_matrix Number of columns of the grid, or matrix\r\n * @param {number} height Number of rows of the grid.\r\n * @param {Array<Array<(number|boolean)>>} [matrix] - A 0-1 matrix\r\n *     representing the walkable status of the nodes(0 or false for walkable).\r\n *     If the matrix is not supplied, all the nodes will be walkable.  */\n\n\nfunction Grid(width_or_matrix, height, matrix) {\n  var width;\n\n  if (typeof width_or_matrix !== 'object') {\n    width = width_or_matrix;\n  } else {\n    height = width_or_matrix.length;\n    width = width_or_matrix[0].length;\n    matrix = width_or_matrix;\n  }\n  /**\r\n   * The number of columns of the grid.\r\n   * @type number\r\n   */\n\n\n  this.width = width;\n  /**\r\n   * The number of rows of the grid.\r\n   * @type number\r\n   */\n\n  this.height = height;\n  /**\r\n   * A 2D array of nodes.\r\n   */\n\n  this.nodes = this._buildNodes(width, height, matrix);\n}\n/**\r\n * Build and return the nodes.\r\n * @private\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {Array<Array<number|boolean>>} [matrix] - A 0-1 matrix representing\r\n *     the walkable status of the nodes.\r\n * @see Grid\r\n */\n\n\nGrid.prototype._buildNodes = function (width, height, matrix) {\n  var i,\n      j,\n      nodes = new Array(height);\n\n  for (i = 0; i < height; ++i) {\n    nodes[i] = new Array(width);\n\n    for (j = 0; j < width; ++j) {\n      nodes[i][j] = new Node(j, i);\n    }\n  }\n\n  if (matrix === undefined) {\n    return nodes;\n  }\n\n  if (matrix.length !== height || matrix[0].length !== width) {\n    throw new Error('Matrix size does not fit');\n  }\n\n  for (i = 0; i < height; ++i) {\n    for (j = 0; j < width; ++j) {\n      if (matrix[i][j]) {\n        // 0, false, null will be walkable\n        // while others will be un-walkable\n        nodes[i][j].walkable = false;\n      }\n    }\n  }\n\n  return nodes;\n};\n\nGrid.prototype.getNodeAt = function (x, y) {\n  return this.nodes[y][x];\n};\n/**\r\n * Determine whether the node at the given position is walkable.\r\n * (Also returns false if the position is outside the grid.)\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @return {boolean} - The walkability of the node.\r\n */\n\n\nGrid.prototype.isWalkableAt = function (x, y) {\n  return this.isInside(x, y) && this.nodes[y][x].walkable;\n};\n/**\r\n * Determine whether the position is inside the grid.\r\n * XXX: `grid.isInside(x, y)` is wierd to read.\r\n * It should be `(x, y) is inside grid`, but I failed to find a better\r\n * name for this method.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\n\n\nGrid.prototype.isInside = function (x, y) {\n  return x >= 0 && x < this.width && y >= 0 && y < this.height;\n};\n/**\r\n * Set whether the node on the given position is walkable.\r\n * NOTE: throws exception if the coordinate is not inside the grid.\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @param {boolean} walkable - Whether the position is walkable.\r\n */\n\n\nGrid.prototype.setWalkableAt = function (x, y, walkable) {\n  this.nodes[y][x].walkable = walkable;\n};\n/**\r\n * Get the neighbors of the given node.\r\n *\r\n *     offsets      diagonalOffsets:\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 0 |   |    | 0 |   | 1 |\r\n *  +---+---+---+    +---+---+---+\r\n *  | 3 |   | 1 |    |   |   |   |\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 2 |   |    | 3 |   | 2 |\r\n *  +---+---+---+    +---+---+---+\r\n *\r\n *  When allowDiagonal is true, if offsets[i] is valid, then\r\n *  diagonalOffsets[i] and\r\n *  diagonalOffsets[(i + 1) % 4] is valid.\r\n * @param {Node} node\r\n * @param {DiagonalMovement} diagonalMovement\r\n */\n\n\nGrid.prototype.getNeighbors = function (node, diagonalMovement) {\n  var x = node.x,\n      y = node.y,\n      neighbors = [],\n      s0 = false,\n      d0 = false,\n      s1 = false,\n      d1 = false,\n      s2 = false,\n      d2 = false,\n      s3 = false,\n      d3 = false,\n      nodes = this.nodes; // ↑\n\n  if (this.isWalkableAt(x, y - 1)) {\n    neighbors.push(nodes[y - 1][x]);\n    s0 = true;\n  } // →\n\n\n  if (this.isWalkableAt(x + 1, y)) {\n    neighbors.push(nodes[y][x + 1]);\n    s1 = true;\n  } // ↓\n\n\n  if (this.isWalkableAt(x, y + 1)) {\n    neighbors.push(nodes[y + 1][x]);\n    s2 = true;\n  } // ←\n\n\n  if (this.isWalkableAt(x - 1, y)) {\n    neighbors.push(nodes[y][x - 1]);\n    s3 = true;\n  }\n\n  if (diagonalMovement === DiagonalMovement.Never) {\n    return neighbors;\n  }\n\n  if (diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\n    d0 = s3 && s0;\n    d1 = s0 && s1;\n    d2 = s1 && s2;\n    d3 = s2 && s3;\n  } else if (diagonalMovement === DiagonalMovement.IfAtMostOneObstacle) {\n    d0 = s3 || s0;\n    d1 = s0 || s1;\n    d2 = s1 || s2;\n    d3 = s2 || s3;\n  } else if (diagonalMovement === DiagonalMovement.Always) {\n    d0 = true;\n    d1 = true;\n    d2 = true;\n    d3 = true;\n  } else {\n    throw new Error('Incorrect value of diagonalMovement');\n  } // ↖\n\n\n  if (d0 && this.isWalkableAt(x - 1, y - 1)) {\n    neighbors.push(nodes[y - 1][x - 1]);\n  } // ↗\n\n\n  if (d1 && this.isWalkableAt(x + 1, y - 1)) {\n    neighbors.push(nodes[y - 1][x + 1]);\n  } // ↘\n\n\n  if (d2 && this.isWalkableAt(x + 1, y + 1)) {\n    neighbors.push(nodes[y + 1][x + 1]);\n  } // ↙\n\n\n  if (d3 && this.isWalkableAt(x - 1, y + 1)) {\n    neighbors.push(nodes[y + 1][x - 1]);\n  }\n\n  return neighbors;\n};\n/**\r\n * Get a clone of this grid.\r\n * @return {Grid} Cloned grid.\r\n */\n\n\nGrid.prototype.clone = function () {\n  var i,\n      j,\n      width = this.width,\n      height = this.height,\n      thisNodes = this.nodes,\n      newGrid = new Grid(width, height),\n      newNodes = new Array(height);\n\n  for (i = 0; i < height; ++i) {\n    newNodes[i] = new Array(width);\n\n    for (j = 0; j < width; ++j) {\n      newNodes[i][j] = new Node(j, i, thisNodes[i][j].walkable);\n    }\n  }\n\n  newGrid.nodes = newNodes;\n  return newGrid;\n};\n\nmodule.exports = Grid;","map":{"version":3,"sources":["C:/Users/nairr/app-ui/app-ui/node_modules/pathfinding/src/core/Grid.js"],"names":["Node","require","DiagonalMovement","Grid","width_or_matrix","height","matrix","width","length","nodes","_buildNodes","prototype","i","j","Array","undefined","Error","walkable","getNodeAt","x","y","isWalkableAt","isInside","setWalkableAt","getNeighbors","node","diagonalMovement","neighbors","s0","d0","s1","d1","s2","d2","s3","d3","push","Never","OnlyWhenNoObstacles","IfAtMostOneObstacle","Always","clone","thisNodes","newGrid","newNodes","module","exports"],"mappings":"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","sourcesContent":["var Node = require('./Node');\r\nvar DiagonalMovement = require('./DiagonalMovement');\r\n\r\n/**\r\n * The Grid class, which serves as the encapsulation of the layout of the nodes.\r\n * @constructor\r\n * @param {number|Array<Array<(number|boolean)>>} width_or_matrix Number of columns of the grid, or matrix\r\n * @param {number} height Number of rows of the grid.\r\n * @param {Array<Array<(number|boolean)>>} [matrix] - A 0-1 matrix\r\n *     representing the walkable status of the nodes(0 or false for walkable).\r\n *     If the matrix is not supplied, all the nodes will be walkable.  */\r\nfunction Grid(width_or_matrix, height, matrix) {\r\n    var width;\r\n\r\n    if (typeof width_or_matrix !== 'object') {\r\n        width = width_or_matrix;\r\n    } else {\r\n        height = width_or_matrix.length;\r\n        width = width_or_matrix[0].length;\r\n        matrix = width_or_matrix;\r\n    }\r\n\r\n    /**\r\n     * The number of columns of the grid.\r\n     * @type number\r\n     */\r\n    this.width = width;\r\n    /**\r\n     * The number of rows of the grid.\r\n     * @type number\r\n     */\r\n    this.height = height;\r\n\r\n    /**\r\n     * A 2D array of nodes.\r\n     */\r\n    this.nodes = this._buildNodes(width, height, matrix);\r\n}\r\n\r\n/**\r\n * Build and return the nodes.\r\n * @private\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {Array<Array<number|boolean>>} [matrix] - A 0-1 matrix representing\r\n *     the walkable status of the nodes.\r\n * @see Grid\r\n */\r\nGrid.prototype._buildNodes = function(width, height, matrix) {\r\n    var i, j,\r\n        nodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        nodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            nodes[i][j] = new Node(j, i);\r\n        }\r\n    }\r\n\r\n\r\n    if (matrix === undefined) {\r\n        return nodes;\r\n    }\r\n\r\n    if (matrix.length !== height || matrix[0].length !== width) {\r\n        throw new Error('Matrix size does not fit');\r\n    }\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        for (j = 0; j < width; ++j) {\r\n            if (matrix[i][j]) {\r\n                // 0, false, null will be walkable\r\n                // while others will be un-walkable\r\n                nodes[i][j].walkable = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return nodes;\r\n};\r\n\r\n\r\nGrid.prototype.getNodeAt = function(x, y) {\r\n    return this.nodes[y][x];\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the node at the given position is walkable.\r\n * (Also returns false if the position is outside the grid.)\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @return {boolean} - The walkability of the node.\r\n */\r\nGrid.prototype.isWalkableAt = function(x, y) {\r\n    return this.isInside(x, y) && this.nodes[y][x].walkable;\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the position is inside the grid.\r\n * XXX: `grid.isInside(x, y)` is wierd to read.\r\n * It should be `(x, y) is inside grid`, but I failed to find a better\r\n * name for this method.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nGrid.prototype.isInside = function(x, y) {\r\n    return (x >= 0 && x < this.width) && (y >= 0 && y < this.height);\r\n};\r\n\r\n\r\n/**\r\n * Set whether the node on the given position is walkable.\r\n * NOTE: throws exception if the coordinate is not inside the grid.\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @param {boolean} walkable - Whether the position is walkable.\r\n */\r\nGrid.prototype.setWalkableAt = function(x, y, walkable) {\r\n    this.nodes[y][x].walkable = walkable;\r\n};\r\n\r\n\r\n/**\r\n * Get the neighbors of the given node.\r\n *\r\n *     offsets      diagonalOffsets:\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 0 |   |    | 0 |   | 1 |\r\n *  +---+---+---+    +---+---+---+\r\n *  | 3 |   | 1 |    |   |   |   |\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 2 |   |    | 3 |   | 2 |\r\n *  +---+---+---+    +---+---+---+\r\n *\r\n *  When allowDiagonal is true, if offsets[i] is valid, then\r\n *  diagonalOffsets[i] and\r\n *  diagonalOffsets[(i + 1) % 4] is valid.\r\n * @param {Node} node\r\n * @param {DiagonalMovement} diagonalMovement\r\n */\r\nGrid.prototype.getNeighbors = function(node, diagonalMovement) {\r\n    var x = node.x,\r\n        y = node.y,\r\n        neighbors = [],\r\n        s0 = false, d0 = false,\r\n        s1 = false, d1 = false,\r\n        s2 = false, d2 = false,\r\n        s3 = false, d3 = false,\r\n        nodes = this.nodes;\r\n\r\n    // ↑\r\n    if (this.isWalkableAt(x, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x]);\r\n        s0 = true;\r\n    }\r\n    // →\r\n    if (this.isWalkableAt(x + 1, y)) {\r\n        neighbors.push(nodes[y][x + 1]);\r\n        s1 = true;\r\n    }\r\n    // ↓\r\n    if (this.isWalkableAt(x, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x]);\r\n        s2 = true;\r\n    }\r\n    // ←\r\n    if (this.isWalkableAt(x - 1, y)) {\r\n        neighbors.push(nodes[y][x - 1]);\r\n        s3 = true;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.Never) {\r\n        return neighbors;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        d0 = s3 && s0;\r\n        d1 = s0 && s1;\r\n        d2 = s1 && s2;\r\n        d3 = s2 && s3;\r\n    } else if (diagonalMovement === DiagonalMovement.IfAtMostOneObstacle) {\r\n        d0 = s3 || s0;\r\n        d1 = s0 || s1;\r\n        d2 = s1 || s2;\r\n        d3 = s2 || s3;\r\n    } else if (diagonalMovement === DiagonalMovement.Always) {\r\n        d0 = true;\r\n        d1 = true;\r\n        d2 = true;\r\n        d3 = true;\r\n    } else {\r\n        throw new Error('Incorrect value of diagonalMovement');\r\n    }\r\n\r\n    // ↖\r\n    if (d0 && this.isWalkableAt(x - 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x - 1]);\r\n    }\r\n    // ↗\r\n    if (d1 && this.isWalkableAt(x + 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x + 1]);\r\n    }\r\n    // ↘\r\n    if (d2 && this.isWalkableAt(x + 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x + 1]);\r\n    }\r\n    // ↙\r\n    if (d3 && this.isWalkableAt(x - 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x - 1]);\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\n\r\n/**\r\n * Get a clone of this grid.\r\n * @return {Grid} Cloned grid.\r\n */\r\nGrid.prototype.clone = function() {\r\n    var i, j,\r\n\r\n        width = this.width,\r\n        height = this.height,\r\n        thisNodes = this.nodes,\r\n\r\n        newGrid = new Grid(width, height),\r\n        newNodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        newNodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            newNodes[i][j] = new Node(j, i, thisNodes[i][j].walkable);\r\n        }\r\n    }\r\n\r\n    newGrid.nodes = newNodes;\r\n\r\n    return newGrid;\r\n};\r\n\r\nmodule.exports = Grid;\r\n"]},"metadata":{},"sourceType":"script"}