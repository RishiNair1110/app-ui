{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeWidget = void 0;\n\nconst React = require(\"react\");\n\nconst _ = require(\"lodash\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nconst styled_1 = require(\"@emotion/styled\");\n\nconst resize_observer_polyfill_1 = require(\"resize-observer-polyfill\");\n\nvar S;\n\n(function (S) {\n  S.Node = styled_1.default.div`\n\t\tposition: absolute;\n\t\t-webkit-touch-callout: none; /* iOS Safari */\n\t\t-webkit-user-select: none; /* Chrome/Safari/Opera */\n\t\tuser-select: none;\n\t\tcursor: move;\n\t\tpointer-events: all;\n\t`;\n})(S || (S = {}));\n\nclass NodeWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  componentWillUnmount() {\n    var _a;\n\n    this.ob.disconnect();\n    this.ob = null;\n    (_a = this.listener) === null || _a === void 0 ? void 0 : _a.deregister();\n    this.listener = null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.listener && this.props.node !== prevProps.node) {\n      this.listener.deregister();\n      this.installSelectionListener();\n    }\n  }\n\n  installSelectionListener() {\n    this.listener = this.props.node.registerListener({\n      selectionChanged: event => {\n        this.forceUpdate();\n      }\n    });\n  }\n\n  updateSize(width, height) {\n    this.props.node.updateDimensions({\n      width,\n      height\n    }); //now mark the links as dirty\n\n    try {\n      _.forEach(this.props.node.getPorts(), port => {\n        port.updateCoords(this.props.diagramEngine.getPortCoords(port));\n      });\n    } catch (ex) {}\n  }\n\n  componentDidMount() {\n    // @ts-ignore\n    this.ob = new resize_observer_polyfill_1.default(entities => {\n      const bounds = entities[0].contentRect;\n      this.updateSize(bounds.width, bounds.height);\n    });\n    const b = this.ref.current.getBoundingClientRect();\n    this.updateSize(b.width, b.height);\n    this.ob.observe(this.ref.current);\n    this.installSelectionListener();\n  }\n\n  render() {\n    return React.createElement(react_canvas_core_1.PeformanceWidget, {\n      model: this.props.node,\n      serialized: this.props.node.serialize()\n    }, () => {\n      return React.createElement(S.Node, {\n        className: \"node\",\n        ref: this.ref,\n        \"data-nodeid\": this.props.node.getID(),\n        style: {\n          top: this.props.node.getY(),\n          left: this.props.node.getX()\n        }\n      }, this.props.diagramEngine.generateWidgetForNode(this.props.node));\n    });\n  }\n\n}\n\nexports.NodeWidget = NodeWidget;","map":{"version":3,"mappings":"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","names":["S","styled_1","div","NodeWidget","React","Component","constructor","props","ref","createRef","componentWillUnmount","ob","disconnect","listener","_a","deregister","componentDidUpdate","prevProps","prevState","snapshot","node","installSelectionListener","registerListener","selectionChanged","event","forceUpdate","updateSize","width","height","updateDimensions","_","forEach","getPorts","port","updateCoords","diagramEngine","getPortCoords","ex","componentDidMount","resize_observer_polyfill_1","entities","bounds","contentRect","b","current","getBoundingClientRect","observe","render","react_canvas_core_1","model","serialized","serialize","Node","className","getID","style","top","getY","left","getX","generateWidgetForNode","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-core\\src\\entities\\node\\NodeWidget.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { NodeModel } from './NodeModel';\nimport { BaseEntityEvent, BaseModel, ListenerHandle, PeformanceWidget } from '@projectstorm/react-canvas-core';\nimport styled from '@emotion/styled';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport interface NodeProps {\n\tnode: NodeModel;\n\tchildren?: any;\n\tdiagramEngine: DiagramEngine;\n}\n\nnamespace S {\n\texport const Node = styled.div`\n\t\tposition: absolute;\n\t\t-webkit-touch-callout: none; /* iOS Safari */\n\t\t-webkit-user-select: none; /* Chrome/Safari/Opera */\n\t\tuser-select: none;\n\t\tcursor: move;\n\t\tpointer-events: all;\n\t`;\n}\n\nexport class NodeWidget extends React.Component<NodeProps> {\n\tob: any;\n\tref: React.RefObject<HTMLDivElement>;\n\tlistener: ListenerHandle;\n\n\tconstructor(props: NodeProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.ob.disconnect();\n\t\tthis.ob = null;\n\n\t\tthis.listener?.deregister();\n\t\tthis.listener = null;\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<NodeProps>, prevState: Readonly<any>, snapshot?: any): void {\n\t\tif (this.listener && this.props.node !== prevProps.node) {\n\t\t\tthis.listener.deregister();\n\t\t\tthis.installSelectionListener();\n\t\t}\n\t}\n\n\tinstallSelectionListener() {\n\t\tthis.listener = this.props.node.registerListener({\n\t\t\tselectionChanged: (event: BaseEntityEvent<BaseModel> & { isSelected: boolean }) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tupdateSize(width: number, height: number) {\n\t\tthis.props.node.updateDimensions({ width, height });\n\n\t\t//now mark the links as dirty\n\t\ttry {\n\t\t\t_.forEach(this.props.node.getPorts(), (port) => {\n\t\t\t\tport.updateCoords(this.props.diagramEngine.getPortCoords(port));\n\t\t\t});\n\t\t} catch (ex) {}\n\t}\n\n\tcomponentDidMount(): void {\n\t\t// @ts-ignore\n\t\tthis.ob = new ResizeObserver((entities) => {\n\t\t\tconst bounds = entities[0].contentRect;\n\t\t\tthis.updateSize(bounds.width, bounds.height);\n\t\t});\n\n\t\tconst b = this.ref.current.getBoundingClientRect();\n\t\tthis.updateSize(b.width, b.height);\n\t\tthis.ob.observe(this.ref.current);\n\t\tthis.installSelectionListener();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<PeformanceWidget model={this.props.node} serialized={this.props.node.serialize()}>\n\t\t\t\t{() => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<S.Node\n\t\t\t\t\t\t\tclassName=\"node\"\n\t\t\t\t\t\t\tref={this.ref}\n\t\t\t\t\t\t\tdata-nodeid={this.props.node.getID()}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\ttop: this.props.node.getY(),\n\t\t\t\t\t\t\t\tleft: this.props.node.getX()\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t{this.props.diagramEngine.generateWidgetForNode(this.props.node)}\n\t\t\t\t\t\t</S.Node>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</PeformanceWidget>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}