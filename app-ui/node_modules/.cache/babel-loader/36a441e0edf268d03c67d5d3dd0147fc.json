{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MoveItemsState = void 0;\n\nconst AbstractDisplacementState_1 = require(\"../core-state/AbstractDisplacementState\");\n\nconst Action_1 = require(\"../core-actions/Action\");\n\nconst BasePositionModel_1 = require(\"../core-models/BasePositionModel\");\n\nclass MoveItemsState extends AbstractDisplacementState_1.AbstractDisplacementState {\n  constructor() {\n    super({\n      name: 'move-items'\n    });\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.MOUSE_DOWN,\n      fire: event => {\n        const element = this.engine.getActionEventBus().getModelForEvent(event);\n\n        if (!element) {\n          return;\n        }\n\n        if (!element.isSelected()) {\n          this.engine.getModel().clearSelection();\n        }\n\n        element.setSelected(true);\n        this.engine.repaintCanvas();\n      }\n    }));\n  }\n\n  activated(previous) {\n    super.activated(previous);\n    this.initialPositions = {};\n  }\n\n  fireMouseMoved(event) {\n    const items = this.engine.getModel().getSelectedEntities();\n    const model = this.engine.getModel();\n\n    for (let item of items) {\n      if (item instanceof BasePositionModel_1.BasePositionModel) {\n        if (item.isLocked()) {\n          continue;\n        }\n\n        if (!this.initialPositions[item.getID()]) {\n          this.initialPositions[item.getID()] = {\n            point: item.getPosition(),\n            item: item\n          };\n        }\n\n        const pos = this.initialPositions[item.getID()].point;\n        item.setPosition(model.getGridPosition(pos.x + event.virtualDisplacementX), model.getGridPosition(pos.y + event.virtualDisplacementY));\n      }\n    }\n\n    this.engine.repaintCanvas();\n  }\n\n}\n\nexports.MoveItemsState = MoveItemsState;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AAIA,MAAaA,cAAb,SAA2EC,qDAA3E,CAAuG;AAQtGC;AACC,UAAM;AACLC,UAAI,EAAE;AADD,KAAN;AAGA,SAAKC,cAAL,CACC,IAAIC,eAAJ,CAAW;AACVC,UAAI,EAAED,mBAAUE,UADN;AAEVC,UAAI,EAAGC,KAAD,IAAyC;AAC9C,cAAMC,OAAO,GAAG,KAAKC,MAAL,CAAYC,iBAAZ,GAAgCC,gBAAhC,CAAiDJ,KAAjD,CAAhB;;AACA,YAAI,CAACC,OAAL,EAAc;AACb;AACA;;AACD,YAAI,CAACA,OAAO,CAACI,UAAR,EAAL,EAA2B;AAC1B,eAAKH,MAAL,CAAYI,QAAZ,GAAuBC,cAAvB;AACA;;AACDN,eAAO,CAACO,WAAR,CAAoB,IAApB;AACA,aAAKN,MAAL,CAAYO,aAAZ;AACA;AAZS,KAAX,CADD;AAgBA;;AAEDC,WAAS,CAACC,QAAD,EAAgB;AACxB,UAAMD,SAAN,CAAgBC,QAAhB;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA;;AAEDC,gBAAc,CAACb,KAAD,EAAsC;AACnD,UAAMc,KAAK,GAAG,KAAKZ,MAAL,CAAYI,QAAZ,GAAuBS,mBAAvB,EAAd;AACA,UAAMC,KAAK,GAAG,KAAKd,MAAL,CAAYI,QAAZ,EAAd;;AACA,SAAK,IAAIW,IAAT,IAAiBH,KAAjB,EAAwB;AACvB,UAAIG,IAAI,YAAYC,qCAApB,EAAuC;AACtC,YAAID,IAAI,CAACE,QAAL,EAAJ,EAAqB;AACpB;AACA;;AACD,YAAI,CAAC,KAAKP,gBAAL,CAAsBK,IAAI,CAACG,KAAL,EAAtB,CAAL,EAA0C;AACzC,eAAKR,gBAAL,CAAsBK,IAAI,CAACG,KAAL,EAAtB,IAAsC;AACrCC,iBAAK,EAAEJ,IAAI,CAACK,WAAL,EAD8B;AAErCL,gBAAI,EAAEA;AAF+B,WAAtC;AAIA;;AAED,cAAMM,GAAG,GAAG,KAAKX,gBAAL,CAAsBK,IAAI,CAACG,KAAL,EAAtB,EAAoCC,KAAhD;AACAJ,YAAI,CAACO,WAAL,CACCR,KAAK,CAACS,eAAN,CAAsBF,GAAG,CAACG,CAAJ,GAAQ1B,KAAK,CAAC2B,oBAApC,CADD,EAECX,KAAK,CAACS,eAAN,CAAsBF,GAAG,CAACK,CAAJ,GAAQ5B,KAAK,CAAC6B,oBAApC,CAFD;AAIA;AACD;;AACD,SAAK3B,MAAL,CAAYO,aAAZ;AACA;;AA1DqG;;AAAvGqB","names":["MoveItemsState","AbstractDisplacementState_1","constructor","name","registerAction","Action_1","type","MOUSE_DOWN","fire","event","element","engine","getActionEventBus","getModelForEvent","isSelected","getModel","clearSelection","setSelected","repaintCanvas","activated","previous","initialPositions","fireMouseMoved","items","getSelectedEntities","model","item","BasePositionModel_1","isLocked","getID","point","getPosition","pos","setPosition","getGridPosition","x","virtualDisplacementX","y","virtualDisplacementY","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-canvas-core\\src\\states\\MoveItemsState.ts"],"sourcesContent":["import { AbstractDisplacementState, AbstractDisplacementStateEvent } from '../core-state/AbstractDisplacementState';\nimport { State } from '../core-state/State';\nimport { Action, ActionEvent, InputType } from '../core-actions/Action';\nimport { BasePositionModel } from '../core-models/BasePositionModel';\nimport { Point } from '@projectstorm/geometry';\nimport { CanvasEngine } from '../CanvasEngine';\n\nexport class MoveItemsState<E extends CanvasEngine = CanvasEngine> extends AbstractDisplacementState<E> {\n\tinitialPositions: {\n\t\t[id: string]: {\n\t\t\tpoint: Point;\n\t\t\titem: BasePositionModel;\n\t\t};\n\t};\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'move-items'\n\t\t});\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<React.MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\t\t\t\t\tif (!element) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (!element.isSelected()) {\n\t\t\t\t\t\tthis.engine.getModel().clearSelection();\n\t\t\t\t\t}\n\t\t\t\t\telement.setSelected(true);\n\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tactivated(previous: State) {\n\t\tsuper.activated(previous);\n\t\tthis.initialPositions = {};\n\t}\n\n\tfireMouseMoved(event: AbstractDisplacementStateEvent) {\n\t\tconst items = this.engine.getModel().getSelectedEntities();\n\t\tconst model = this.engine.getModel();\n\t\tfor (let item of items) {\n\t\t\tif (item instanceof BasePositionModel) {\n\t\t\t\tif (item.isLocked()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!this.initialPositions[item.getID()]) {\n\t\t\t\t\tthis.initialPositions[item.getID()] = {\n\t\t\t\t\t\tpoint: item.getPosition(),\n\t\t\t\t\t\titem: item\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tconst pos = this.initialPositions[item.getID()].point;\n\t\t\t\titem.setPosition(\n\t\t\t\t\tmodel.getGridPosition(pos.x + event.virtualDisplacementX),\n\t\t\t\t\tmodel.getGridPosition(pos.y + event.virtualDisplacementY)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis.engine.repaintCanvas();\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}