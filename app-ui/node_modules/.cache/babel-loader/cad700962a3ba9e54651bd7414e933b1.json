{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LinkModel = void 0;\n\nconst PointModel_1 = require(\"./PointModel\");\n\nconst _ = require(\"lodash\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nclass LinkModel extends react_canvas_core_1.BaseModel {\n  constructor(options) {\n    super(options);\n    this.points = [new PointModel_1.PointModel({\n      link: this\n    }), new PointModel_1.PointModel({\n      link: this\n    })];\n    this.sourcePort = null;\n    this.targetPort = null;\n    this.renderedPaths = [];\n    this.labels = [];\n  }\n\n  getBoundingBox() {\n    return geometry_1.Polygon.boundingBoxFromPoints(_.map(this.points, point => {\n      return point.getPosition();\n    }));\n  }\n\n  getSelectionEntities() {\n    if (this.getTargetPort() && this.getSourcePort()) {\n      return super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length - 1));\n    } // allow selection of the first point\n\n\n    if (!this.getSourcePort()) {\n      return super.getSelectionEntities().concat(_.slice(this.points, 0, this.points.length - 1));\n    } // allow selection of the last point\n\n\n    if (!this.getTargetPort()) {\n      return super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length));\n    }\n\n    return super.getSelectionEntities().concat(this.points);\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.points = _.map(event.data.points || [], point => {\n      var p = new PointModel_1.PointModel({\n        link: this,\n        position: new geometry_1.Point(point.x, point.y)\n      });\n      p.deserialize(Object.assign(Object.assign({}, event), {\n        data: point\n      }));\n      return p;\n    }); //deserialize labels\n\n    _.forEach(event.data.labels || [], label => {\n      let labelOb = event.engine.getFactoryForLabel(label.type).generateModel({});\n      labelOb.deserialize(Object.assign(Object.assign({}, event), {\n        data: label\n      }));\n      this.addLabel(labelOb);\n    }); // these happen async, so we use the promises for these (they need to be done like this without the async keyword\n    // because we need the deserailize method to finish for other methods while this happen\n\n\n    if (event.data.target) {\n      event.getModel(event.data.targetPort).then(model => {\n        this.setTargetPort(model);\n      });\n    }\n\n    if (event.data.source) {\n      event.getModel(event.data.sourcePort).then(model => {\n        this.setSourcePort(model);\n      });\n    }\n  }\n\n  getRenderedPath() {\n    return this.renderedPaths;\n  }\n\n  setRenderedPaths(paths) {\n    this.renderedPaths = paths;\n  }\n\n  serialize() {\n    return Object.assign(Object.assign({}, super.serialize()), {\n      source: this.sourcePort ? this.sourcePort.getParent().getID() : null,\n      sourcePort: this.sourcePort ? this.sourcePort.getID() : null,\n      target: this.targetPort ? this.targetPort.getParent().getID() : null,\n      targetPort: this.targetPort ? this.targetPort.getID() : null,\n      points: _.map(this.points, point => {\n        return point.serialize();\n      }),\n      labels: _.map(this.labels, label => {\n        return label.serialize();\n      })\n    });\n  }\n\n  doClone() {\n    let lookupTable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let clone = arguments.length > 1 ? arguments[1] : undefined;\n    clone.setPoints(_.map(this.getPoints(), point => {\n      return point.clone(lookupTable);\n    }));\n\n    if (this.sourcePort) {\n      clone.setSourcePort(this.sourcePort.clone(lookupTable));\n    }\n\n    if (this.targetPort) {\n      clone.setTargetPort(this.targetPort.clone(lookupTable));\n    }\n  }\n\n  clearPort(port) {\n    if (this.sourcePort === port) {\n      this.setSourcePort(null);\n    } else if (this.targetPort === port) {\n      this.setTargetPort(null);\n    }\n  }\n\n  remove() {\n    if (this.sourcePort) {\n      this.sourcePort.removeLink(this);\n      delete this.sourcePort;\n    }\n\n    if (this.targetPort) {\n      this.targetPort.removeLink(this);\n      delete this.targetPort;\n    }\n\n    super.remove();\n  }\n\n  isLastPoint(point) {\n    var index = this.getPointIndex(point);\n    return index === this.points.length - 1;\n  }\n\n  getPointIndex(point) {\n    return this.points.indexOf(point);\n  }\n\n  getPointModel(id) {\n    for (var i = 0; i < this.points.length; i++) {\n      if (this.points[i].getID() === id) {\n        return this.points[i];\n      }\n    }\n\n    return null;\n  }\n\n  getPortForPoint(point) {\n    if (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\n      return this.sourcePort;\n    }\n\n    if (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\n      return this.targetPort;\n    }\n\n    return null;\n  }\n\n  getPointForPort(port) {\n    if (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\n      return this.getFirstPoint();\n    }\n\n    if (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\n      return this.getLastPoint();\n    }\n\n    return null;\n  }\n\n  getFirstPoint() {\n    return this.points[0];\n  }\n\n  getLastPoint() {\n    return this.points[this.points.length - 1];\n  }\n\n  setSourcePort(port) {\n    if (port !== null) {\n      port.addLink(this);\n    }\n\n    if (this.sourcePort !== null) {\n      this.sourcePort.removeLink(this);\n    }\n\n    this.sourcePort = port;\n    this.fireEvent({\n      port\n    }, 'sourcePortChanged');\n\n    if (port === null || port === void 0 ? void 0 : port.reportedPosition) {\n      this.getPointForPort(port).setPosition(port.getCenter());\n    }\n  }\n\n  getSourcePort() {\n    return this.sourcePort;\n  }\n\n  getTargetPort() {\n    return this.targetPort;\n  }\n\n  setTargetPort(port) {\n    if (port !== null) {\n      port.addLink(this);\n    }\n\n    if (this.targetPort !== null) {\n      this.targetPort.removeLink(this);\n    }\n\n    this.targetPort = port;\n    this.fireEvent({\n      port\n    }, 'targetPortChanged');\n\n    if (port === null || port === void 0 ? void 0 : port.reportedPosition) {\n      this.getPointForPort(port).setPosition(port.getCenter());\n    }\n  }\n\n  point(x, y) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    return this.addPoint(this.generatePoint(x, y), index);\n  }\n\n  addLabel(label) {\n    label.setParent(this);\n    this.labels.push(label);\n  }\n\n  getPoints() {\n    return this.points;\n  }\n\n  getLabels() {\n    return this.labels;\n  }\n\n  setPoints(points) {\n    _.forEach(points, point => {\n      point.setParent(this);\n    });\n\n    this.points = points;\n  }\n\n  removePoint(pointModel) {\n    if (this.isLastPoint(pointModel)) this.remove();\n    this.points.splice(this.getPointIndex(pointModel), 1);\n  }\n\n  removePointsBefore(pointModel) {\n    this.points.splice(0, this.getPointIndex(pointModel));\n  }\n\n  removePointsAfter(pointModel) {\n    this.points.splice(this.getPointIndex(pointModel) + 1);\n  }\n\n  removeMiddlePoints() {\n    if (this.points.length > 2) {\n      this.points.splice(1, this.points.length - 2);\n    }\n  }\n\n  addPoint(pointModel) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    pointModel.setParent(this);\n    this.points.splice(index, 0, pointModel);\n    return pointModel;\n  }\n\n  generatePoint() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return new PointModel_1.PointModel({\n      link: this,\n      position: new geometry_1.Point(x, y)\n    });\n  }\n\n}\n\nexports.LinkModel = LinkModel;","map":{"version":3,"mappings":"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","names":["LinkModel","react_canvas_core_1","constructor","options","points","PointModel_1","link","sourcePort","targetPort","renderedPaths","labels","getBoundingBox","geometry_1","boundingBoxFromPoints","_","map","point","getPosition","getSelectionEntities","getTargetPort","getSourcePort","concat","slice","length","deserialize","event","data","p","position","x","y","Object","forEach","label","labelOb","engine","getFactoryForLabel","type","generateModel","addLabel","target","getModel","then","model","setTargetPort","source","setSourcePort","getRenderedPath","setRenderedPaths","paths","serialize","getParent","getID","doClone","lookupTable","clone","setPoints","getPoints","clearPort","port","remove","removeLink","isLastPoint","index","getPointIndex","indexOf","getPointModel","id","i","getPortForPoint","getFirstPoint","getLastPoint","getPointForPort","addLink","fireEvent","reportedPosition","setPosition","getCenter","addPoint","generatePoint","setParent","push","getLabels","removePoint","pointModel","splice","removePointsBefore","removePointsAfter","removeMiddlePoints","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-diagrams-core\\src\\entities\\link\\LinkModel.ts"],"sourcesContent":["import { PortModel } from '../port/PortModel';\nimport { PointModel } from './PointModel';\nimport * as _ from 'lodash';\nimport { LabelModel } from '../label/LabelModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\nimport { Point, Polygon, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModel,\n\tBaseModelGenerics,\n\tBaseModelListener,\n\tDeserializeEvent,\n\tModelGeometryInterface\n} from '@projectstorm/react-canvas-core';\n\nexport interface LinkModelListener extends BaseModelListener {\n\tsourcePortChanged?(event: BaseEntityEvent<LinkModel> & { port: null | PortModel }): void;\n\n\ttargetPortChanged?(event: BaseEntityEvent<LinkModel> & { port: null | PortModel }): void;\n}\n\nexport interface LinkModelGenerics extends BaseModelGenerics {\n\tLISTENER: LinkModelListener;\n\tPARENT: DiagramModel;\n}\n\nexport class LinkModel<G extends LinkModelGenerics = LinkModelGenerics>\n\textends BaseModel<G>\n\timplements ModelGeometryInterface\n{\n\tprotected sourcePort: PortModel | null;\n\tprotected targetPort: PortModel | null;\n\n\tprotected labels: LabelModel[];\n\tprotected points: PointModel[];\n\n\tprotected renderedPaths: SVGPathElement[];\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.points = [\n\t\t\tnew PointModel({\n\t\t\t\tlink: this\n\t\t\t}),\n\t\t\tnew PointModel({\n\t\t\t\tlink: this\n\t\t\t})\n\t\t];\n\t\tthis.sourcePort = null;\n\t\tthis.targetPort = null;\n\t\tthis.renderedPaths = [];\n\t\tthis.labels = [];\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn Polygon.boundingBoxFromPoints(\n\t\t\t_.map(this.points, (point: PointModel) => {\n\t\t\t\treturn point.getPosition();\n\t\t\t})\n\t\t);\n\t}\n\n\tgetSelectionEntities(): Array<BaseModel> {\n\t\tif (this.getTargetPort() && this.getSourcePort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length - 1));\n\t\t}\n\t\t// allow selection of the first point\n\t\tif (!this.getSourcePort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 0, this.points.length - 1));\n\t\t}\n\t\t// allow selection of the last point\n\t\tif (!this.getTargetPort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length));\n\t\t}\n\t\treturn super.getSelectionEntities().concat(this.points);\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.points = _.map(event.data.points || [], (point) => {\n\t\t\tvar p = new PointModel({\n\t\t\t\tlink: this,\n\t\t\t\tposition: new Point(point.x, point.y)\n\t\t\t});\n\t\t\tp.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: point\n\t\t\t});\n\t\t\treturn p;\n\t\t});\n\n\t\t//deserialize labels\n\t\t_.forEach(event.data.labels || [], (label: any) => {\n\t\t\tlet labelOb = (event.engine as DiagramEngine).getFactoryForLabel(label.type).generateModel({});\n\t\t\tlabelOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: label\n\t\t\t});\n\t\t\tthis.addLabel(labelOb);\n\t\t});\n\n\t\t// these happen async, so we use the promises for these (they need to be done like this without the async keyword\n\t\t// because we need the deserailize method to finish for other methods while this happen\n\t\tif (event.data.target) {\n\t\t\tevent.getModel(event.data.targetPort).then((model: PortModel) => {\n\t\t\t\tthis.setTargetPort(model);\n\t\t\t});\n\t\t}\n\t\tif (event.data.source) {\n\t\t\tevent.getModel(event.data.sourcePort).then((model: PortModel) => {\n\t\t\t\tthis.setSourcePort(model);\n\t\t\t});\n\t\t}\n\t}\n\n\tgetRenderedPath(): SVGPathElement[] {\n\t\treturn this.renderedPaths;\n\t}\n\n\tsetRenderedPaths(paths: SVGPathElement[]) {\n\t\tthis.renderedPaths = paths;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tsource: this.sourcePort ? this.sourcePort.getParent().getID() : null,\n\t\t\tsourcePort: this.sourcePort ? this.sourcePort.getID() : null,\n\t\t\ttarget: this.targetPort ? this.targetPort.getParent().getID() : null,\n\t\t\ttargetPort: this.targetPort ? this.targetPort.getID() : null,\n\t\t\tpoints: _.map(this.points, (point) => {\n\t\t\t\treturn point.serialize();\n\t\t\t}),\n\t\t\tlabels: _.map(this.labels, (label) => {\n\t\t\t\treturn label.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.setPoints(\n\t\t\t_.map(this.getPoints(), (point: PointModel) => {\n\t\t\t\treturn point.clone(lookupTable);\n\t\t\t})\n\t\t);\n\t\tif (this.sourcePort) {\n\t\t\tclone.setSourcePort(this.sourcePort.clone(lookupTable));\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tclone.setTargetPort(this.targetPort.clone(lookupTable));\n\t\t}\n\t}\n\n\tclearPort(port: PortModel) {\n\t\tif (this.sourcePort === port) {\n\t\t\tthis.setSourcePort(null);\n\t\t} else if (this.targetPort === port) {\n\t\t\tthis.setTargetPort(null);\n\t\t}\n\t}\n\n\tremove() {\n\t\tif (this.sourcePort) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t\tdelete this.sourcePort;\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t\tdelete this.targetPort;\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tisLastPoint(point: PointModel) {\n\t\tvar index = this.getPointIndex(point);\n\t\treturn index === this.points.length - 1;\n\t}\n\n\tgetPointIndex(point: PointModel) {\n\t\treturn this.points.indexOf(point);\n\t}\n\n\tgetPointModel(id: string): PointModel | null {\n\t\tfor (var i = 0; i < this.points.length; i++) {\n\t\t\tif (this.points[i].getID() === id) {\n\t\t\t\treturn this.points[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPortForPoint(point: PointModel): PortModel {\n\t\tif (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\n\t\t\treturn this.sourcePort;\n\t\t}\n\t\tif (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\n\t\t\treturn this.targetPort;\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPointForPort(port: PortModel): PointModel {\n\t\tif (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\n\t\t\treturn this.getFirstPoint();\n\t\t}\n\t\tif (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\n\t\t\treturn this.getLastPoint();\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetFirstPoint(): PointModel {\n\t\treturn this.points[0];\n\t}\n\n\tgetLastPoint(): PointModel {\n\t\treturn this.points[this.points.length - 1];\n\t}\n\n\tsetSourcePort(port: PortModel | null) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.sourcePort !== null) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tthis.sourcePort = port;\n\t\tthis.fireEvent({ port }, 'sourcePortChanged');\n\t\tif (port?.reportedPosition) {\n\t\t\tthis.getPointForPort(port).setPosition(port.getCenter());\n\t\t}\n\t}\n\n\tgetSourcePort(): PortModel {\n\t\treturn this.sourcePort;\n\t}\n\n\tgetTargetPort(): PortModel {\n\t\treturn this.targetPort;\n\t}\n\n\tsetTargetPort(port: PortModel | null) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.targetPort !== null) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tthis.targetPort = port;\n\t\tthis.fireEvent({ port }, 'targetPortChanged');\n\t\tif (port?.reportedPosition) {\n\t\t\tthis.getPointForPort(port).setPosition(port.getCenter());\n\t\t}\n\t}\n\n\tpoint(x: number, y: number, index: number = 1): PointModel {\n\t\treturn this.addPoint(this.generatePoint(x, y), index);\n\t}\n\n\taddLabel(label: LabelModel) {\n\t\tlabel.setParent(this);\n\t\tthis.labels.push(label);\n\t}\n\n\tgetPoints(): PointModel[] {\n\t\treturn this.points;\n\t}\n\n\tgetLabels() {\n\t\treturn this.labels;\n\t}\n\n\tsetPoints(points: PointModel[]) {\n\t\t_.forEach(points, (point) => {\n\t\t\tpoint.setParent(this);\n\t\t});\n\t\tthis.points = points;\n\t}\n\n\tremovePoint(pointModel: PointModel) {\n\t\tif (this.isLastPoint(pointModel)) this.remove();\n\t\tthis.points.splice(this.getPointIndex(pointModel), 1);\n\t}\n\n\tremovePointsBefore(pointModel: PointModel) {\n\t\tthis.points.splice(0, this.getPointIndex(pointModel));\n\t}\n\n\tremovePointsAfter(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel) + 1);\n\t}\n\n\tremoveMiddlePoints() {\n\t\tif (this.points.length > 2) {\n\t\t\tthis.points.splice(1, this.points.length - 2);\n\t\t}\n\t}\n\n\taddPoint<P extends PointModel>(pointModel: P, index = 1): P {\n\t\tpointModel.setParent(this);\n\t\tthis.points.splice(index, 0, pointModel);\n\t\treturn pointModel;\n\t}\n\n\tgeneratePoint(x: number = 0, y: number = 0): PointModel {\n\t\treturn new PointModel({\n\t\t\tlink: this,\n\t\t\tposition: new Point(x, y)\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}