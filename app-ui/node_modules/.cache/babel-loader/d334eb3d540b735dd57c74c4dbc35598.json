{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActionEventBus = void 0;\n\nconst Action_1 = require(\"./Action\");\n\nconst _ = require(\"lodash\");\n\nclass ActionEventBus {\n  constructor(engine) {\n    this.actions = {};\n    this.engine = engine;\n    this.keys = {};\n  }\n\n  getKeys() {\n    return _.keys(this.keys);\n  }\n\n  registerAction(action) {\n    action.setEngine(this.engine);\n    this.actions[action.id] = action;\n    return () => {\n      this.deregisterAction(action);\n    };\n  }\n\n  deregisterAction(action) {\n    action.setEngine(null);\n    delete this.actions[action.id];\n  }\n\n  getActionsForType(type) {\n    return _.filter(this.actions, action => {\n      return action.options.type === type;\n    });\n  }\n\n  getModelForEvent(actionEvent) {\n    if (actionEvent.model) {\n      return actionEvent.model;\n    }\n\n    return this.engine.getMouseElement(actionEvent.event);\n  }\n\n  getActionsForEvent(actionEvent) {\n    const {\n      event\n    } = actionEvent;\n\n    if (event.type === 'mousedown') {\n      return this.getActionsForType(Action_1.InputType.MOUSE_DOWN);\n    } else if (event.type === 'mouseup') {\n      return this.getActionsForType(Action_1.InputType.MOUSE_UP);\n    } else if (event.type === 'keydown') {\n      // store the recorded key\n      this.keys[event.key.toLowerCase()] = true;\n      return this.getActionsForType(Action_1.InputType.KEY_DOWN);\n    } else if (event.type === 'keyup') {\n      // delete the recorded key\n      delete this.keys[event.key.toLowerCase()];\n      return this.getActionsForType(Action_1.InputType.KEY_UP);\n    } else if (event.type === 'mousemove') {\n      return this.getActionsForType(Action_1.InputType.MOUSE_MOVE);\n    } else if (event.type === 'wheel') {\n      return this.getActionsForType(Action_1.InputType.MOUSE_WHEEL);\n    } else if (event.type === 'touchstart') {\n      return this.getActionsForType(Action_1.InputType.TOUCH_START);\n    } else if (event.type === 'touchend') {\n      return this.getActionsForType(Action_1.InputType.TOUCH_END);\n    } else if (event.type === 'touchmove') {\n      return this.getActionsForType(Action_1.InputType.TOUCH_MOVE);\n    }\n\n    return [];\n  }\n\n  fireAction(actionEvent) {\n    const actions = this.getActionsForEvent(actionEvent);\n\n    for (let action of actions) {\n      action.options.fire(actionEvent);\n    }\n  }\n\n}\n\nexports.ActionEventBus = ActionEventBus;","map":{"version":3,"mappings":"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","names":["ActionEventBus","constructor","engine","actions","keys","getKeys","_","registerAction","action","setEngine","id","deregisterAction","getActionsForType","type","filter","options","getModelForEvent","actionEvent","model","getMouseElement","event","getActionsForEvent","Action_1","MOUSE_DOWN","MOUSE_UP","key","toLowerCase","KEY_DOWN","KEY_UP","MOUSE_MOVE","MOUSE_WHEEL","TOUCH_START","TOUCH_END","TOUCH_MOVE","fireAction","fire","exports"],"sources":["C:\\Users\\nairr\\app-ui\\app-ui\\node_modules\\@projectstorm\\react-canvas-core\\src\\core-actions\\ActionEventBus.ts"],"sourcesContent":["import { Action, ActionEvent, InputType } from './Action';\nimport { KeyboardEvent, MouseEvent } from 'react';\nimport * as _ from 'lodash';\nimport { CanvasEngine } from '../CanvasEngine';\nimport { BaseModel } from '../core-models/BaseModel';\n\nexport class ActionEventBus {\n\tprotected actions: { [id: string]: Action };\n\tprotected engine: CanvasEngine;\n\tprotected keys: { [key: string]: boolean };\n\n\tconstructor(engine: CanvasEngine) {\n\t\tthis.actions = {};\n\t\tthis.engine = engine;\n\t\tthis.keys = {};\n\t}\n\n\tgetKeys(): string[] {\n\t\treturn _.keys(this.keys);\n\t}\n\n\tregisterAction(action: Action): () => void {\n\t\taction.setEngine(this.engine);\n\t\tthis.actions[action.id] = action;\n\t\treturn () => {\n\t\t\tthis.deregisterAction(action);\n\t\t};\n\t}\n\n\tderegisterAction(action: Action) {\n\t\taction.setEngine(null);\n\t\tdelete this.actions[action.id];\n\t}\n\n\tgetActionsForType(type: InputType): Action[] {\n\t\treturn _.filter(this.actions, (action) => {\n\t\t\treturn action.options.type === type;\n\t\t});\n\t}\n\n\tgetModelForEvent(actionEvent: ActionEvent<MouseEvent>): BaseModel {\n\t\tif (actionEvent.model) {\n\t\t\treturn actionEvent.model;\n\t\t}\n\t\treturn this.engine.getMouseElement(actionEvent.event);\n\t}\n\n\tgetActionsForEvent(actionEvent: ActionEvent): Action[] {\n\t\tconst { event } = actionEvent;\n\t\tif (event.type === 'mousedown') {\n\t\t\treturn this.getActionsForType(InputType.MOUSE_DOWN);\n\t\t} else if (event.type === 'mouseup') {\n\t\t\treturn this.getActionsForType(InputType.MOUSE_UP);\n\t\t} else if (event.type === 'keydown') {\n\t\t\t// store the recorded key\n\t\t\tthis.keys[(event as KeyboardEvent).key.toLowerCase()] = true;\n\t\t\treturn this.getActionsForType(InputType.KEY_DOWN);\n\t\t} else if (event.type === 'keyup') {\n\t\t\t// delete the recorded key\n\t\t\tdelete this.keys[(event as KeyboardEvent).key.toLowerCase()];\n\t\t\treturn this.getActionsForType(InputType.KEY_UP);\n\t\t} else if (event.type === 'mousemove') {\n\t\t\treturn this.getActionsForType(InputType.MOUSE_MOVE);\n\t\t} else if (event.type === 'wheel') {\n\t\t\treturn this.getActionsForType(InputType.MOUSE_WHEEL);\n\t\t} else if (event.type === 'touchstart') {\n\t\t\treturn this.getActionsForType(InputType.TOUCH_START);\n\t\t} else if (event.type === 'touchend') {\n\t\t\treturn this.getActionsForType(InputType.TOUCH_END);\n\t\t} else if (event.type === 'touchmove') {\n\t\t\treturn this.getActionsForType(InputType.TOUCH_MOVE);\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tfireAction(actionEvent: ActionEvent) {\n\t\tconst actions = this.getActionsForEvent(actionEvent);\n\t\tfor (let action of actions) {\n\t\t\taction.options.fire(actionEvent as any);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}